{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","prost","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"prost-derive\"","-C","metadata=73d412c91aa9c3c0","-C","extra-filename=-73d412c91aa9c3c0","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","--extern","bytes=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libbytes-94736955f1f3c1e5.rmeta","--extern","prost_derive=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libprost_derive-19a117ccfb8f2f49.so","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libprost-73d412c91aa9c3c0.rmeta"},"prelude":{"crate_id":{"name":"prost","disambiguator":[14723283405306302894,8455346446528904687]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","num":18,"id":{"name":"prost_derive","disambiguator":[1314004770385514942,1413412371849766261]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","num":19,"id":{"name":"bytes","disambiguator":[11926726182971503316,16956388010612504231]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":0,"byte_end":2768,"line_start":1,"line_end":87,"column_start":1,"column_end":25}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":149,"byte_end":160,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":162,"byte_end":173,"line_start":10,"line_end":10,"column_start":37,"column_end":48},"alias_span":null,"name":"EncodeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":41},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":200,"byte_end":207,"line_start":11,"line_end":11,"column_start":25,"column_end":32},"alias_span":null,"name":"Message","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":2689,"byte_end":2694,"line_start":84,"line_end":84,"column_start":9,"column_end":14},"alias_span":null,"name":"bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":2766,"byte_end":2767,"line_start":87,"line_end":87,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Message","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":0,"byte_end":2768,"line_start":1,"line_end":87,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":26},{"krate":0,"index":69},{"krate":0,"index":159},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3202,"byte_end":3213,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"DecodeError","qualname":"::error::DecodeError","value":"DecodeError {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"decl_id":null,"docs":" A Protobuf message decoding error.","sig":null,"attributes":[{"value":"/ A Protobuf message decoding error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":2880,"byte_end":2918,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":2919,"byte_end":2922,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ `DecodeError` indicates that the input buffer does not caontain a valid","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":2923,"byte_end":2998,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ Protobuf message. The error details should be considered 'best effort': in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":2999,"byte_end":3077,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ general it is not possible to exactly pinpoint why data is malformed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3078,"byte_end":3151,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3735,"byte_end":3738,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodeError>::new","value":"pub fn new<S>(S) -> DecodeError where S: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `DecodeError` with a 'best effort' root cause description.","sig":null,"attributes":[{"value":"/ Creates a new `DecodeError` with a 'best effort' root cause description.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3560,"byte_end":3636,"line_start":24,"line_end":24,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3641,"byte_end":3644,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3649,"byte_end":3704,"line_start":26,"line_end":26,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4117,"byte_end":4121,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"push","qualname":"<DecodeError>::push","value":"pub fn push(&mut Self, &'static str, &'static str)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a (message, field) name location pair on to the location stack.","sig":null,"attributes":[{"value":"/ Pushes a (message, field) name location pair on to the location stack.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3944,"byte_end":4018,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4023,"byte_end":4026,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4031,"byte_end":4086,"line_start":40,"line_end":40,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":302},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5009,"byte_end":5020,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"EncodeError","qualname":"::error::EncodeError","value":"EncodeError {  }","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" A Protobuf message encoding error.","sig":null,"attributes":[{"value":"/ A Protobuf message encoding error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4738,"byte_end":4776,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4777,"byte_end":4780,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ `EncodeError` always indicates that a message failed to encode because the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4781,"byte_end":4859,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ provided buffer had insufficient capacity. Message encoding is otherwise","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4860,"byte_end":4936,"line_start":68,"line_end":68,"column_start":1,"column_end":77}},{"value":"/ infallible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4937,"byte_end":4952,"line_start":69,"line_end":69,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5362,"byte_end":5379,"line_start":86,"line_end":86,"column_start":12,"column_end":29},"name":"required_capacity","qualname":"<EncodeError>::required_capacity","value":"pub fn required_capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the required buffer capacity to encode the message.\n","sig":null,"attributes":[{"value":"/ Returns the required buffer capacity to encode the message.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5287,"byte_end":5350,"line_start":85,"line_end":85,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5523,"byte_end":5532,"line_start":91,"line_end":91,"column_start":12,"column_end":21},"name":"remaining","qualname":"<EncodeError>::remaining","value":"pub fn remaining(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining length in the provided buffer at the time of encoding.\n","sig":null,"attributes":[{"value":"/ Returns the remaining length in the provided buffer at the time of encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5431,"byte_end":5511,"line_start":90,"line_end":90,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6343,"byte_end":6350,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"Message","qualname":"::message::Message","value":"Message: Debug + Send + Sync","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60}],"decl_id":null,"docs":" A Protocol Buffers message.\n","sig":null,"attributes":[{"value":"/ A Protocol Buffers message.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6301,"byte_end":6332,"line_start":12,"line_end":12,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6589,"byte_end":6599,"line_start":20,"line_end":20,"column_start":8,"column_end":18},"name":"encode_raw","qualname":"::message::Message::encode_raw","value":"pub fn encode_raw<B>(&Self, &mut B) where B: BufMut, Self: Sized","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Encodes the message to a buffer.","sig":null,"attributes":[{"value":"/ Encodes the message to a buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6378,"byte_end":6414,"line_start":14,"line_end":14,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6419,"byte_end":6422,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the buffer has insufficient capacity.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6427,"byte_end":6494,"line_start":16,"line_end":16,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6499,"byte_end":6502,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6507,"byte_end":6562,"line_start":18,"line_end":18,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6834,"byte_end":6845,"line_start":29,"line_end":29,"column_start":8,"column_end":19},"name":"merge_field","qualname":"::message::Message::merge_field","value":"pub fn merge_field<B>(&mut Self, u32, WireType, &mut B, DecodeContext)\n-> Result<(), DecodeError> where B: Buf, Self: Sized","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Decodes a field from a buffer, and merges it into `self`.","sig":null,"attributes":[{"value":"/ Decodes a field from a buffer, and merges it into `self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6678,"byte_end":6739,"line_start":25,"line_end":25,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6744,"byte_end":6747,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6752,"byte_end":6807,"line_start":27,"line_end":27,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7131,"byte_end":7142,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::message::Message::encoded_len","value":"pub fn encoded_len(&Self) -> usize","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Returns the encoded length of the message without a length delimiter.\n","sig":null,"attributes":[{"value":"/ Returns the encoded length of the message without a length delimiter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7050,"byte_end":7123,"line_start":40,"line_end":40,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7300,"byte_end":7306,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"encode","qualname":"::message::Message::encode","value":"pub fn encode<B>(&Self, &mut B) -> Result<(), EncodeError> where B: BufMut,\nSelf: Sized","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Encodes the message to a buffer.","sig":null,"attributes":[{"value":"/ Encodes the message to a buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7165,"byte_end":7201,"line_start":43,"line_end":43,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7206,"byte_end":7209,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the buffer does not have sufficient capacity.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7214,"byte_end":7292,"line_start":45,"line_end":45,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7834,"byte_end":7857,"line_start":64,"line_end":64,"column_start":8,"column_end":31},"name":"encode_length_delimited","qualname":"::message::Message::encode_length_delimited","value":"pub fn encode_length_delimited<B>(&Self, &mut B) -> Result<(), EncodeError>\nwhere B: BufMut, Self: Sized","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Encodes the message with a length-delimiter to a buffer.","sig":null,"attributes":[{"value":"/ Encodes the message with a length-delimiter to a buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7675,"byte_end":7735,"line_start":61,"line_end":61,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7740,"byte_end":7743,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the buffer does not have sufficient capacity.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":7748,"byte_end":7826,"line_start":63,"line_end":63,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8424,"byte_end":8430,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"decode","qualname":"::message::Message::decode","value":"pub fn decode<B>(B) -> Result<Self, DecodeError> where B: Buf, Self: Default","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Decodes an instance of the message from a buffer.","sig":null,"attributes":[{"value":"/ Decodes an instance of the message from a buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8311,"byte_end":8364,"line_start":80,"line_end":80,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8369,"byte_end":8372,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ The entire buffer will be consumed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8377,"byte_end":8416,"line_start":82,"line_end":82,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8724,"byte_end":8747,"line_start":93,"line_end":93,"column_start":8,"column_end":31},"name":"decode_length_delimited","qualname":"::message::Message::decode_length_delimited","value":"pub fn decode_length_delimited<B>(B) -> Result<Self, DecodeError> where\nB: Buf, Self: Default","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Decodes a length-delimited instance of the message from the buffer.\n","sig":null,"attributes":[{"value":"/ Decodes a length-delimited instance of the message from the buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8645,"byte_end":8716,"line_start":92,"line_end":92,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9103,"byte_end":9108,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"merge","qualname":"::message::Message::merge","value":"pub fn merge<B>(&mut Self, B) -> Result<(), DecodeError> where B: Buf,\nSelf: Sized","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Decodes an instance of the message from a buffer, and merges it into `self`.","sig":null,"attributes":[{"value":"/ Decodes an instance of the message from a buffer, and merges it into `self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":8963,"byte_end":9043,"line_start":103,"line_end":103,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9048,"byte_end":9051,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The entire buffer will be consumed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9056,"byte_end":9095,"line_start":105,"line_end":105,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9569,"byte_end":9591,"line_start":121,"line_end":121,"column_start":8,"column_end":30},"name":"merge_length_delimited","qualname":"::message::Message::merge_length_delimited","value":"pub fn merge_length_delimited<B>(&mut Self, B) -> Result<(), DecodeError>\nwhere B: Buf, Self: Sized","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Decodes a length-delimited instance of the message from buffer, and\n merges it into `self`.\n","sig":null,"attributes":[{"value":"/ Decodes a length-delimited instance of the message from buffer, and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9459,"byte_end":9530,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/ merges it into `self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9535,"byte_end":9561,"line_start":120,"line_end":120,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9930,"byte_end":9935,"line_start":135,"line_end":135,"column_start":8,"column_end":13},"name":"clear","qualname":"::message::Message::clear","value":"pub fn clear(&mut Self)","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Clears the message, resetting all fields to their default.\n","sig":null,"attributes":[{"value":"/ Clears the message, resetting all fields to their default.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9860,"byte_end":9922,"line_start":134,"line_end":134,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encoding","qualname":"::encoding","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":763},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":319},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":323},{"krate":0,"index":348},{"krate":0,"index":347},{"krate":0,"index":345},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":350},{"krate":0,"index":369},{"krate":0,"index":388},{"krate":0,"index":407},{"krate":0,"index":426},{"krate":0,"index":445},{"krate":0,"index":464},{"krate":0,"index":483},{"krate":0,"index":499},{"krate":0,"index":515},{"krate":0,"index":531},{"krate":0,"index":547},{"krate":0,"index":563},{"krate":0,"index":208},{"krate":0,"index":221},{"krate":0,"index":227},{"krate":0,"index":247},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Utility functions and types for encoding and decoding Protobuf types.","sig":null,"attributes":[{"value":"/ Utility functions and types for encoding and decoding Protobuf types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":18536,"byte_end":18609,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":18610,"byte_end":18613,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Meant to be used only from `Message` implementations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":18614,"byte_end":18671,"line_start":3,"line_end":3,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":19049,"byte_end":19062,"line_start":20,"line_end":20,"column_start":8,"column_end":21},"name":"encode_varint","qualname":"::encoding::encode_varint","value":"pub fn encode_varint<B>(u64, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":" Encodes an integer value into LEB128 variable length format, and writes it to the buffer.\n The buffer must have enough remaining space (maximum 10 bytes).\n","sig":null,"attributes":[{"value":"/ Encodes an integer value into LEB128 variable length format, and writes it to the buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":18870,"byte_end":18963,"line_start":17,"line_end":17,"column_start":1,"column_end":94}},{"value":"/ The buffer must have enough remaining space (maximum 10 bytes).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":18964,"byte_end":19031,"line_start":18,"line_end":18,"column_start":1,"column_end":68}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":19032,"byte_end":19041,"line_start":19,"line_end":19,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":19994,"byte_end":20007,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"decode_varint","qualname":"::encoding::decode_varint","value":"pub fn decode_varint<B>(&mut B) -> Result<u64, DecodeError> where B: Buf","parent":null,"children":[],"decl_id":null,"docs":" Decodes a LEB128-encoded variable length integer from the buffer.\n","sig":null,"attributes":[{"value":"/ Decodes a LEB128-encoded variable length integer from the buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":19917,"byte_end":19986,"line_start":55,"line_end":55,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":317},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":23872,"byte_end":23885,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"name":"DecodeContext","qualname":"::encoding::DecodeContext","value":"DecodeContext {  }","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Additional information passed to every decode/merge function.","sig":null,"attributes":[{"value":"/ Additional information passed to every decode/merge function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":23605,"byte_end":23670,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":23671,"byte_end":23674,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ The context should be passed by value and can be freely cloned. When passing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":23675,"byte_end":23755,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/ to a function which is decoding a nested object, then use `enter_recursion`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":23756,"byte_end":23836,"line_start":188,"line_end":188,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26163,"byte_end":26181,"line_start":262,"line_end":262,"column_start":8,"column_end":26},"name":"encoded_len_varint","qualname":"::encoding::encoded_len_varint","value":"pub fn encoded_len_varint(u64) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of the value in LEB128 variable length format.\n The returned value will be between 1 and 10, inclusive.\n","sig":null,"attributes":[{"value":"/ Returns the encoded length of the value in LEB128 variable length format.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26008,"byte_end":26085,"line_start":259,"line_end":259,"column_start":1,"column_end":78}},{"value":"/ The returned value will be between 1 and 10, inclusive.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26086,"byte_end":26145,"line_start":260,"line_end":260,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26146,"byte_end":26155,"line_start":261,"line_end":261,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":324},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26494,"byte_end":26500,"line_start":271,"line_end":271,"column_start":5,"column_end":11},"name":"Varint","qualname":"::encoding::WireType::Varint","value":"WireType::Varint","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26510,"byte_end":26522,"line_start":272,"line_end":272,"column_start":5,"column_end":17},"name":"SixtyFourBit","qualname":"::encoding::WireType::SixtyFourBit","value":"WireType::SixtyFourBit","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":330},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26532,"byte_end":26547,"line_start":273,"line_end":273,"column_start":5,"column_end":20},"name":"LengthDelimited","qualname":"::encoding::WireType::LengthDelimited","value":"WireType::LengthDelimited","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":333},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26557,"byte_end":26567,"line_start":274,"line_end":274,"column_start":5,"column_end":15},"name":"StartGroup","qualname":"::encoding::WireType::StartGroup","value":"WireType::StartGroup","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":336},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26577,"byte_end":26585,"line_start":275,"line_end":275,"column_start":5,"column_end":13},"name":"EndGroup","qualname":"::encoding::WireType::EndGroup","value":"WireType::EndGroup","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":339},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26595,"byte_end":26607,"line_start":276,"line_end":276,"column_start":5,"column_end":17},"name":"ThirtyTwoBit","qualname":"::encoding::WireType::ThirtyTwoBit","value":"WireType::ThirtyTwoBit","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":323},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26479,"byte_end":26487,"line_start":270,"line_end":270,"column_start":10,"column_end":18},"name":"WireType","qualname":"::encoding::WireType","value":"pub enum WireType {\n    Varint = ,\n    SixtyFourBit = ,\n    LengthDelimited = ,\n    StartGroup = ,\n    EndGroup = ,\n    ThirtyTwoBit = ,\n}","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26458,"byte_end":26469,"line_start":269,"line_end":269,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":185},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26626,"byte_end":26633,"line_start":279,"line_end":279,"column_start":11,"column_end":18},"name":"MIN_TAG","qualname":"::encoding::MIN_TAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":186},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26654,"byte_end":26661,"line_start":280,"line_end":280,"column_start":11,"column_end":18},"name":"MAX_TAG","qualname":"::encoding::MAX_TAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":190},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27372,"byte_end":27382,"line_start":305,"line_end":305,"column_start":8,"column_end":18},"name":"encode_key","qualname":"::encoding::encode_key","value":"pub fn encode_key<B>(u32, WireType, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":" Encodes a Protobuf field key, which consists of a wire type designator and\n the field tag.\n","sig":null,"attributes":[{"value":"/ Encodes a Protobuf field key, which consists of a wire type designator and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27257,"byte_end":27335,"line_start":302,"line_end":302,"column_start":1,"column_end":79}},{"value":"/ the field tag.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27336,"byte_end":27354,"line_start":303,"line_end":303,"column_start":1,"column_end":19}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27355,"byte_end":27364,"line_start":304,"line_end":304,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27717,"byte_end":27727,"line_start":317,"line_end":317,"column_start":8,"column_end":18},"name":"decode_key","qualname":"::encoding::decode_key","value":"pub fn decode_key<B>(&mut B) -> Result<(u32, WireType), DecodeError> where\nB: Buf","parent":null,"children":[],"decl_id":null,"docs":" Decodes a Protobuf field key, which consists of a wire type designator and\n the field tag.\n","sig":null,"attributes":[{"value":"/ Decodes a Protobuf field key, which consists of a wire type designator and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27594,"byte_end":27672,"line_start":314,"line_end":314,"column_start":1,"column_end":79}},{"value":"/ the field tag.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27673,"byte_end":27691,"line_start":315,"line_end":315,"column_start":1,"column_end":19}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":27692,"byte_end":27709,"line_start":316,"line_end":316,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":194},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28320,"byte_end":28327,"line_start":338,"line_end":338,"column_start":8,"column_end":15},"name":"key_len","qualname":"::encoding::key_len","value":"pub fn key_len(u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the width of an encoded Protobuf field key with the given tag.\n The returned width will be between 1 and 5 bytes (inclusive).\n","sig":null,"attributes":[{"value":"/ Returns the width of an encoded Protobuf field key with the given tag.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28162,"byte_end":28236,"line_start":335,"line_end":335,"column_start":1,"column_end":75}},{"value":"/ The returned width will be between 1 and 5 bytes (inclusive).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28237,"byte_end":28302,"line_start":336,"line_end":336,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28303,"byte_end":28312,"line_start":337,"line_end":337,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28514,"byte_end":28529,"line_start":345,"line_end":345,"column_start":8,"column_end":23},"name":"check_wire_type","qualname":"::encoding::check_wire_type","value":"pub fn check_wire_type(WireType, WireType) -> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the expected wire type matches the actual wire type,\n or returns an error result.\n","sig":null,"attributes":[{"value":"/ Checks that the expected wire type matches the actual wire type,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28396,"byte_end":28464,"line_start":342,"line_end":342,"column_start":1,"column_end":69}},{"value":"/ or returns an error result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28465,"byte_end":28496,"line_start":343,"line_end":343,"column_start":1,"column_end":32}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28497,"byte_end":28506,"line_start":344,"line_end":344,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28936,"byte_end":28946,"line_start":357,"line_end":357,"column_start":8,"column_end":18},"name":"merge_loop","qualname":"::encoding::merge_loop","value":"pub fn merge_loop<T, M, B>(&mut T, &mut B, DecodeContext, M)\n-> Result<(), DecodeError> where M: FnMut(&mut T, &mut B, DecodeContext) ->\nResult<(), DecodeError>, B: Buf","parent":null,"children":[],"decl_id":null,"docs":" Helper function which abstracts reading a length delimiter prefix followed\n by decoding values until the length of bytes is exhausted.\n","sig":null,"attributes":[{"value":"/ Helper function which abstracts reading a length delimiter prefix followed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28787,"byte_end":28865,"line_start":355,"line_end":355,"column_start":1,"column_end":79}},{"value":"/ by decoding values until the length of bytes is exhausted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":28866,"byte_end":28928,"line_start":356,"line_end":356,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":29579,"byte_end":29589,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"skip_field","qualname":"::encoding::skip_field","value":"pub fn skip_field<B>(WireType, u32, &mut B, DecodeContext)\n-> Result<(), DecodeError> where B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":350},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36091,"byte_end":36095,"line_start":570,"line_end":570,"column_start":15,"column_end":19},"name":"bool","qualname":"::encoding::bool","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":364},{"krate":0,"index":356},{"krate":0,"index":366},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":362}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":369},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36209,"byte_end":36214,"line_start":573,"line_end":573,"column_start":14,"column_end":19},"name":"int32","qualname":"::encoding::int32","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":383},{"krate":0,"index":375},{"krate":0,"index":385},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":381}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":388},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36230,"byte_end":36235,"line_start":574,"line_end":574,"column_start":14,"column_end":19},"name":"int64","qualname":"::encoding::int64","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":402},{"krate":0,"index":394},{"krate":0,"index":404},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":407},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36251,"byte_end":36257,"line_start":575,"line_end":575,"column_start":14,"column_end":20},"name":"uint32","qualname":"::encoding::uint32","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":421},{"krate":0,"index":413},{"krate":0,"index":423},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":419}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":426},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36273,"byte_end":36279,"line_start":576,"line_end":576,"column_start":14,"column_end":20},"name":"uint64","qualname":"::encoding::uint64","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":440},{"krate":0,"index":432},{"krate":0,"index":442},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":445},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36295,"byte_end":36301,"line_start":577,"line_end":577,"column_start":14,"column_end":20},"name":"sint32","qualname":"::encoding::sint32","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":459},{"krate":0,"index":451},{"krate":0,"index":461},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":464},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":36550,"byte_end":36556,"line_start":585,"line_end":585,"column_start":14,"column_end":20},"name":"sint64","qualname":"::encoding::sint64","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":478},{"krate":0,"index":470},{"krate":0,"index":480},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":476}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":483},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":40255,"byte_end":40260,"line_start":702,"line_end":702,"column_start":5,"column_end":10},"name":"float","qualname":"::encoding::float","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":494},{"krate":0,"index":489},{"krate":0,"index":496},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":499},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":40358,"byte_end":40364,"line_start":710,"line_end":710,"column_start":5,"column_end":11},"name":"double","qualname":"::encoding::double","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":510},{"krate":0,"index":505},{"krate":0,"index":512},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":515},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":40462,"byte_end":40469,"line_start":718,"line_end":718,"column_start":5,"column_end":12},"name":"fixed32","qualname":"::encoding::fixed32","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":526},{"krate":0,"index":521},{"krate":0,"index":528},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":531},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":40567,"byte_end":40574,"line_start":726,"line_end":726,"column_start":5,"column_end":12},"name":"fixed64","qualname":"::encoding::fixed64","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":542},{"krate":0,"index":537},{"krate":0,"index":544},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":547},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":40672,"byte_end":40680,"line_start":734,"line_end":734,"column_start":5,"column_end":13},"name":"sfixed32","qualname":"::encoding::sfixed32","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":558},{"krate":0,"index":553},{"krate":0,"index":560},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":563},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":40778,"byte_end":40786,"line_start":742,"line_end":742,"column_start":5,"column_end":13},"name":"sfixed64","qualname":"::encoding::sfixed64","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":574},{"krate":0,"index":569},{"krate":0,"index":576},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":208},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":42787,"byte_end":42793,"line_start":804,"line_end":804,"column_start":9,"column_end":15},"name":"string","qualname":"::encoding::string","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":584},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":582}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":42826,"byte_end":42832,"line_start":807,"line_end":807,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::string::encode","value":"pub fn encode<B>(u32, &String, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":43073,"byte_end":43078,"line_start":815,"line_end":815,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::string::merge","value":"pub fn merge<B>(WireType, &mut String, &mut B, DecodeContext)\n-> Result<(), DecodeError> where B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":221},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":44926,"byte_end":44931,"line_start":864,"line_end":864,"column_start":9,"column_end":14},"name":"bytes","qualname":"::encoding::bytes","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":591},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":589}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":44964,"byte_end":44970,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::bytes::encode","value":"pub fn encode<B>(u32, &Vec<u8>, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":45202,"byte_end":45207,"line_start":876,"line_end":876,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::bytes::merge","value":"pub fn merge<B>(WireType, &mut Vec<u8>, &mut B, DecodeContext)\n-> Result<(), DecodeError> where B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":227},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":46322,"byte_end":46329,"line_start":909,"line_end":909,"column_start":9,"column_end":16},"name":"message","qualname":"::encoding::message","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":244}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":46362,"byte_end":46368,"line_start":912,"line_end":912,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::message::encode","value":"pub fn encode<M, B>(u32, &M, &mut B) where M: Message, B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":46620,"byte_end":46625,"line_start":922,"line_end":922,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::message::merge","value":"pub fn merge<M, B>(WireType, &mut M, &mut B, DecodeContext)\n-> Result<(), DecodeError> where M: Message, B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":47204,"byte_end":47219,"line_start":945,"line_end":945,"column_start":12,"column_end":27},"name":"encode_repeated","qualname":"::encoding::message::encode_repeated","value":"pub fn encode_repeated<M, B>(u32, &[M], &mut B) where M: Message, B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":47413,"byte_end":47427,"line_start":955,"line_end":955,"column_start":12,"column_end":26},"name":"merge_repeated","qualname":"::encoding::message::merge_repeated","value":"pub fn merge_repeated<M, B>(WireType, &mut Vec<M>, &mut B, DecodeContext)\n-> Result<(), DecodeError> where M: Message + Default, B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":47877,"byte_end":47888,"line_start":973,"line_end":973,"column_start":12,"column_end":23},"name":"encoded_len","qualname":"::encoding::message::encoded_len","value":"pub fn encoded_len<M>(u32, &M) -> usize where M: Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":47856,"byte_end":47865,"line_start":972,"line_end":972,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":48085,"byte_end":48105,"line_start":982,"line_end":982,"column_start":12,"column_end":32},"name":"encoded_len_repeated","qualname":"::encoding::message::encoded_len_repeated","value":"pub fn encoded_len_repeated<M>(u32, &[M]) -> usize where M: Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":48064,"byte_end":48073,"line_start":981,"line_end":981,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":247},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":48422,"byte_end":48427,"line_start":995,"line_end":995,"column_start":9,"column_end":14},"name":"group","qualname":"::encoding::group","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":263}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":48460,"byte_end":48466,"line_start":998,"line_end":998,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::group::encode","value":"pub fn encode<M, B>(u32, &M, &mut B) where M: Message, B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":48709,"byte_end":48714,"line_start":1008,"line_end":1008,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::group::merge","value":"pub fn merge<M, B>(u32, WireType, &mut M, &mut B, DecodeContext)\n-> Result<(), DecodeError> where M: Message, B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":255},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":49447,"byte_end":49462,"line_start":1035,"line_end":1035,"column_start":12,"column_end":27},"name":"encode_repeated","qualname":"::encoding::group::encode_repeated","value":"pub fn encode_repeated<M, B>(u32, &[M], &mut B) where M: Message, B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":49656,"byte_end":49670,"line_start":1045,"line_end":1045,"column_start":12,"column_end":26},"name":"merge_repeated","qualname":"::encoding::group::merge_repeated","value":"pub fn merge_repeated<M, B>(u32, WireType, &mut Vec<M>, &mut B, DecodeContext)\n-> Result<(), DecodeError> where M: Message + Default, B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":50133,"byte_end":50144,"line_start":1064,"line_end":1064,"column_start":12,"column_end":23},"name":"encoded_len","qualname":"::encoding::group::encoded_len","value":"pub fn encoded_len<M>(u32, &M) -> usize where M: Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":50112,"byte_end":50121,"line_start":1063,"line_end":1063,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":50289,"byte_end":50309,"line_start":1072,"line_end":1072,"column_start":12,"column_end":32},"name":"encoded_len_repeated","qualname":"::encoding::group::encoded_len_repeated","value":"pub fn encoded_len_repeated<M>(u32, &[M]) -> usize where M: Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":50268,"byte_end":50277,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":266},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":56935,"byte_end":56943,"line_start":1269,"line_end":1269,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::encoding::hash_map","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":767},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":604},{"krate":0,"index":610},{"krate":0,"index":615},{"krate":0,"index":623},{"krate":0,"index":630}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":267},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":56976,"byte_end":56985,"line_start":1273,"line_end":1273,"column_start":9,"column_end":18},"name":"btree_map","qualname":"::encoding::btree_map","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":771},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":647},{"krate":0,"index":653},{"krate":0,"index":658},{"krate":0,"index":666},{"krate":0,"index":673}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":280},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":728,"byte_end":751,"line_start":28,"line_end":28,"column_start":8,"column_end":31},"name":"encode_length_delimiter","qualname":"::encode_length_delimiter","value":"pub fn encode_length_delimiter<B>(usize, &mut B) -> Result<(), EncodeError>\nwhere B: BufMut","parent":null,"children":[],"decl_id":null,"docs":" Encodes a length delimiter to the buffer.","sig":null,"attributes":[{"value":"/ Encodes a length delimiter to the buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":503,"byte_end":548,"line_start":22,"line_end":22,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":549,"byte_end":552,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See [Message.encode_length_delimited] for more info.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":553,"byte_end":609,"line_start":24,"line_end":24,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":610,"byte_end":613,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ An error will be returned if the buffer does not have sufficient capacity to encode the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":614,"byte_end":705,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/ delimiter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":706,"byte_end":720,"line_start":27,"line_end":27,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1334,"byte_end":1354,"line_start":46,"line_end":46,"column_start":8,"column_end":28},"name":"length_delimiter_len","qualname":"::length_delimiter_len","value":"pub fn length_delimiter_len(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of a length delimiter.","sig":null,"attributes":[{"value":"/ Returns the encoded length of a length delimiter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1094,"byte_end":1147,"line_start":42,"line_end":42,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1148,"byte_end":1151,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Applications may use this method to ensure sufficient buffer capacity before calling","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1152,"byte_end":1240,"line_start":44,"line_end":44,"column_start":1,"column_end":89}},{"value":"/ `encode_length_delimiter`. The returned size will be between 1 and 10, inclusive.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1241,"byte_end":1326,"line_start":45,"line_end":45,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":2009,"byte_end":2032,"line_start":61,"line_end":61,"column_start":8,"column_end":31},"name":"decode_length_delimiter","qualname":"::decode_length_delimiter","value":"pub fn decode_length_delimiter<B>(B) -> Result<usize, DecodeError> where\nB: Buf","parent":null,"children":[],"decl_id":null,"docs":" Decodes a length delimiter from the buffer.","sig":null,"attributes":[{"value":"/ Decodes a length delimiter from the buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1422,"byte_end":1469,"line_start":50,"line_end":50,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This method allows the length delimiter to be decoded independently of the message, when the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1474,"byte_end":1570,"line_start":52,"line_end":52,"column_start":1,"column_end":97}},{"value":"/ message is encoded with [Message.encode_length_delimited].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1571,"byte_end":1633,"line_start":53,"line_end":53,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1634,"byte_end":1637,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ An error may be returned in two cases:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1638,"byte_end":1680,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1681,"byte_end":1684,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/  * If the supplied buffer contains fewer than 10 bytes, then an error indicates that more","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1685,"byte_end":1778,"line_start":57,"line_end":57,"column_start":1,"column_end":94}},{"value":"/    input is required to decode the full delimiter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1779,"byte_end":1833,"line_start":58,"line_end":58,"column_start":1,"column_end":55}},{"value":"/  * If the supplied buffer contains more than 10 bytes, then the buffer contains an invalid","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1834,"byte_end":1928,"line_start":59,"line_end":59,"column_start":1,"column_end":95}},{"value":"/    delimiter, and typically the buffer should be considered corrupt.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":1929,"byte_end":2001,"line_start":60,"line_end":60,"column_start":1,"column_end":73}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3542,"byte_end":3553,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4253,"byte_end":4264,"line_start":47,"line_end":47,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4569,"byte_end":4580,"line_start":57,"line_end":57,"column_start":23,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4616,"byte_end":4621,"line_start":59,"line_end":59,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5074,"byte_end":5085,"line_start":76,"line_end":76,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5605,"byte_end":5616,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5906,"byte_end":5917,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5953,"byte_end":5958,"line_start":108,"line_end":108,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9971,"byte_end":9974,"line_start":138,"line_end":138,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/types.rs","byte_start":16530,"byte_end":16536,"line_start":285,"line_end":285,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/types.rs","byte_start":17324,"byte_end":17327,"line_start":323,"line_end":323,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":24301,"byte_end":24314,"line_start":201,"line_end":201,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":24639,"byte_end":24652,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26707,"byte_end":26715,"line_start":282,"line_end":282,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":44222,"byte_end":44231,"line_start":839,"line_end":839,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/lib.rs","byte_start":115,"byte_end":123,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":159}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":3542,"byte_end":3553,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4253,"byte_end":4264,"line_start":47,"line_end":47,"column_start":23,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4569,"byte_end":4580,"line_start":57,"line_end":57,"column_start":23,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":4616,"byte_end":4621,"line_start":59,"line_end":59,"column_start":32,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":1,"index":2659},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5074,"byte_end":5085,"line_start":76,"line_end":76,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5605,"byte_end":5616,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":302},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5906,"byte_end":5917,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":302},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/error.rs","byte_start":5953,"byte_end":5958,"line_start":108,"line_end":108,"column_start":32,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":1,"index":2659},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6352,"byte_end":6357,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6360,"byte_end":6364,"line_start":13,"line_end":13,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":6367,"byte_end":6371,"line_start":13,"line_end":13,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/message.rs","byte_start":9971,"byte_end":9974,"line_start":138,"line_end":138,"column_start":21,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/types.rs","byte_start":16530,"byte_end":16536,"line_start":285,"line_end":285,"column_start":18,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":5,"index":5316},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/types.rs","byte_start":17324,"byte_end":17327,"line_start":323,"line_end":323,"column_start":18,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":24301,"byte_end":24314,"line_start":201,"line_end":201,"column_start":18,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":24639,"byte_end":24652,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":26707,"byte_end":26715,"line_start":282,"line_end":282,"column_start":23,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":323},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.6.1/src/encoding.rs","byte_start":44222,"byte_end":44231,"line_start":839,"line_end":839,"column_start":31,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":2257}}]}