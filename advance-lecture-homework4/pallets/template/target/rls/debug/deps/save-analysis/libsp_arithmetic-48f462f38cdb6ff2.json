{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_arithmetic","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=48f462f38cdb6ff2","-C","extra-filename=-48f462f38cdb6ff2","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps","--extern","integer_sqrt=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libinteger_sqrt-f6f0ccc7ded4f201.rmeta","--extern","num_traits=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libnum_traits-46b732eafcd58ded.rmeta","--extern","codec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libparity_scale_codec-c2a3c300da64cba4.rmeta","--extern","serde=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libserde-80263e68ba500d78.rmeta","--extern","sp_debug_derive=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_debug_derive-833f87711d0c6e40.so","--extern","sp_std=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_std-e8e779e008c5c2c6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_arithmetic-48f462f38cdb6ff2.rmeta"},"prelude":{"crate_id":{"name":"sp_arithmetic","disambiguator":[11188263385090241613,11050410231310448845]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","num":18,"id":{"name":"num_traits","disambiguator":[215404550585587115,5285806180049352428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","num":19,"id":{"name":"sp_std","disambiguator":[7356154292131214206,15539128417196248828]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":20,"id":{"name":"parity_scale_codec","disambiguator":[16439007312830197035,13769093477079864056]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":21,"id":{"name":"parity_scale_codec_derive","disambiguator":[15916895702609288415,13390909414312069258]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":22,"id":{"name":"arrayvec","disambiguator":[9711399210076819589,6533224003713073282]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":23,"id":{"name":"byte_slice_cast","disambiguator":[7351640255773626293,2315590138104183949]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":24,"id":{"name":"serde","disambiguator":[18094986483354249175,15403000118412511765]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":25,"id":{"name":"serde_derive","disambiguator":[2422799003874411447,4301428410593763920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","num":26,"id":{"name":"integer_sqrt","disambiguator":[6159326418223766355,11569997483938519441]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","num":27,"id":{"name":"sp_debug_derive","disambiguator":[11752057424767612336,6988741196861483299]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":686,"byte_end":15595,"line_start":18,"line_end":508,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":26,"index":4},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41612,"byte_end":41629,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"IntegerSquareRoot","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":301},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41654,"byte_end":41658,"line_start":24,"line_end":24,"column_start":2,"column_end":6},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":311},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41660,"byte_end":41663,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":92},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41665,"byte_end":41672,"line_start":24,"line_end":24,"column_start":13,"column_end":20},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":366},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41674,"byte_end":41684,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":369},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41686,"byte_end":41696,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":371},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41698,"byte_end":41708,"line_start":24,"line_end":24,"column_start":46,"column_end":56},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":373},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41710,"byte_end":41720,"line_start":24,"line_end":24,"column_start":58,"column_end":68},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":378},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41722,"byte_end":41732,"line_start":24,"line_end":24,"column_start":70,"column_end":80},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":380},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41735,"byte_end":41745,"line_start":25,"line_end":25,"column_start":2,"column_end":12},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":383},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41747,"byte_end":41757,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":526},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41759,"byte_end":41770,"line_start":25,"line_end":25,"column_start":26,"column_end":37},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":590},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41772,"byte_end":41778,"line_start":25,"line_end":25,"column_start":39,"column_end":45},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":18,"index":611},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41780,"byte_end":41788,"line_start":25,"line_end":25,"column_start":47,"column_end":55},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1226,"byte_end":1242,"line_start":43,"line_end":43,"column_start":23,"column_end":39},"alias_span":null,"name":"FixedPointNumber","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":273},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1244,"byte_end":1261,"line_start":43,"line_end":43,"column_start":41,"column_end":58},"alias_span":null,"name":"FixedPointOperand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1120},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1263,"byte_end":1271,"line_start":43,"line_end":43,"column_start":60,"column_end":68},"alias_span":null,"name":"FixedI64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1230},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1273,"byte_end":1282,"line_start":43,"line_end":43,"column_start":70,"column_end":79},"alias_span":null,"name":"FixedI128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1340},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1284,"byte_end":1293,"line_start":43,"line_end":43,"column_start":81,"column_end":90},"alias_span":null,"name":"FixedU128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":193},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1317,"byte_end":1325,"line_start":44,"line_end":44,"column_start":22,"column_end":30},"alias_span":null,"name":"PerThing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1327,"byte_end":1334,"line_start":44,"line_end":44,"column_start":32,"column_end":39},"alias_span":null,"name":"InnerOf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1336,"byte_end":1343,"line_start":44,"line_end":44,"column_start":41,"column_end":48},"alias_span":null,"name":"UpperOf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1345,"byte_end":1352,"line_start":44,"line_end":44,"column_start":50,"column_end":57},"alias_span":null,"name":"Percent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1354,"byte_end":1360,"line_start":44,"line_end":44,"column_start":59,"column_end":65},"alias_span":null,"name":"PerU16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1362,"byte_end":1369,"line_start":44,"line_end":44,"column_start":67,"column_end":74},"alias_span":null,"name":"Permill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1371,"byte_end":1378,"line_start":44,"line_end":44,"column_start":76,"column_end":83},"alias_span":null,"name":"Perbill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1380,"byte_end":1391,"line_start":44,"line_end":44,"column_start":85,"column_end":96},"alias_span":null,"name":"Perquintill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1378},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1415,"byte_end":1426,"line_start":45,"line_end":45,"column_start":22,"column_end":33},"alias_span":null,"name":"Rational128","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":686,"byte_end":15595,"line_start":18,"line_end":508,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":74},{"krate":0,"index":88},{"krate":0,"index":168},{"krate":0,"index":236},{"krate":0,"index":350},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":1617},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":420},{"krate":0,"index":425}],"decl_id":null,"docs":" Minimal fixed point arithmetic primitives and types for runtime.\n","sig":null,"attributes":[{"value":"/ Minimal fixed point arithmetic primitives and types for runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":686,"byte_end":754,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"biguint","qualname":"::biguint","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":1409},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":432},{"krate":0,"index":436},{"krate":0,"index":434},{"krate":0,"index":21},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":72}],"decl_id":null,"docs":" Infinite precision unsigned integer for substrate runtime.\n","sig":null,"attributes":[{"value":"/ Infinite precision unsigned integer for substrate runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":16283,"byte_end":16345,"line_start":18,"line_end":18,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":13},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":16726,"byte_end":16732,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Single","qualname":"::biguint::Single","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Representation of a single limb.\n","sig":null,"attributes":[{"value":"/ Representation of a single limb.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":16680,"byte_end":16716,"line_start":26,"line_end":26,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":16782,"byte_end":16788,"line_start":29,"line_end":29,"column_start":10,"column_end":16},"name":"Double","qualname":"::biguint::Double","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Representation of two limbs.\n","sig":null,"attributes":[{"value":"/ Representation of two limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":16740,"byte_end":16772,"line_start":28,"line_end":28,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17110,"byte_end":17115,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"split","qualname":"::biguint::split","value":"pub fn split(Double) -> (Single, Single)","parent":null,"children":[],"decl_id":null,"docs":" Splits a [`Double`] limb number into a tuple of two [`Single`] limb numbers.\n","sig":null,"attributes":[{"value":"/ Splits a [`Double`] limb number into a tuple of two [`Single`] limb numbers.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17022,"byte_end":17102,"line_start":35,"line_end":35,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17330,"byte_end":17340,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"mul_single","qualname":"::biguint::mul_single","value":"pub fn mul_single(Single, Single) -> Double","parent":null,"children":[],"decl_id":null,"docs":" Assumed as a given primitive.","sig":null,"attributes":[{"value":"/ Assumed as a given primitive.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17219,"byte_end":17252,"line_start":42,"line_end":42,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17253,"byte_end":17256,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Multiplication of two singles, which at most yields 1 double.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17257,"byte_end":17322,"line_start":44,"line_end":44,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17608,"byte_end":17618,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"add_single","qualname":"::biguint::add_single","value":"pub fn add_single(Single, Single) -> (Single, Single)","parent":null,"children":[],"decl_id":null,"docs":" Assumed as a given primitive.","sig":null,"attributes":[{"value":"/ Assumed as a given primitive.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17439,"byte_end":17472,"line_start":51,"line_end":51,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17473,"byte_end":17476,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Addition of two singles, which at most takes a single limb of result and a carry,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17477,"byte_end":17562,"line_start":53,"line_end":53,"column_start":1,"column_end":86}},{"value":"/ returned as a tuple respectively.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":17563,"byte_end":17600,"line_start":54,"line_end":54,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18239,"byte_end":18246,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"BigUint","qualname":"::biguint::BigUint","value":"BigUint {  }","parent":null,"children":[{"krate":0,"index":433}],"decl_id":null,"docs":" Simple wrapper around an infinitely large integer, represented as limbs of [`Single`].\n","sig":null,"attributes":[{"value":"/ Simple wrapper around an infinitely large integer, represented as limbs of [`Single`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18111,"byte_end":18201,"line_start":75,"line_end":75,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18539,"byte_end":18552,"line_start":87,"line_end":87,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BigUint>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance with `size` limbs. This prevents any number with zero limbs to be\n created.","sig":null,"attributes":[{"value":"/ Create a new instance with `size` limbs. This prevents any number with zero limbs to be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18360,"byte_end":18451,"line_start":83,"line_end":83,"column_start":2,"column_end":93}},{"value":"/ created.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18453,"byte_end":18465,"line_start":84,"line_end":84,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18467,"byte_end":18470,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ The behavior of the type is undefined with zero limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18472,"byte_end":18530,"line_start":86,"line_end":86,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18733,"byte_end":18743,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"name":"from_limbs","qualname":"<BigUint>::from_limbs","value":"pub fn from_limbs(&[Single]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raw constructor from custom limbs. If `limbs` is empty, `Zero::zero()` implementation is\n used.\n","sig":null,"attributes":[{"value":"/ Raw constructor from custom limbs. If `limbs` is empty, `Zero::zero()` implementation is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18621,"byte_end":18713,"line_start":91,"line_end":91,"column_start":2,"column_end":94}},{"value":"/ used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18715,"byte_end":18724,"line_start":92,"line_end":92,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18897,"byte_end":18900,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"name":"len","qualname":"<BigUint>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of limbs.\n","sig":null,"attributes":[{"value":"/ Number of limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18868,"byte_end":18888,"line_start":101,"line_end":101,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19094,"byte_end":19097,"line_start":109,"line_end":109,"column_start":9,"column_end":12},"name":"get","qualname":"<BigUint>::get","value":"pub fn get(&Self, usize) -> Single","parent":null,"children":[],"decl_id":null,"docs":" A naive getter for limb at `index`. Note that the order is lsb -> msb.","sig":null,"attributes":[{"value":"/ A naive getter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18941,"byte_end":19015,"line_start":104,"line_end":104,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19017,"byte_end":19020,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19022,"byte_end":19037,"line_start":106,"line_end":106,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19039,"byte_end":19042,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ This panics if index is out of range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19044,"byte_end":19085,"line_start":108,"line_end":108,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19257,"byte_end":19268,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"checked_get","qualname":"<BigUint>::checked_get","value":"pub fn checked_get(&Self, usize) -> Option<Single>","parent":null,"children":[],"decl_id":null,"docs":" A naive getter for limb at `index`. Note that the order is lsb -> msb.\n","sig":null,"attributes":[{"value":"/ A naive getter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19174,"byte_end":19248,"line_start":113,"line_end":113,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19569,"byte_end":19572,"line_start":125,"line_end":125,"column_start":9,"column_end":12},"name":"set","qualname":"<BigUint>::set","value":"pub fn set(&mut Self, usize, Single)","parent":null,"children":[],"decl_id":null,"docs":" A naive setter for limb at `index`. Note that the order is lsb -> msb.","sig":null,"attributes":[{"value":"/ A naive setter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19416,"byte_end":19490,"line_start":120,"line_end":120,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19492,"byte_end":19495,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19497,"byte_end":19512,"line_start":122,"line_end":122,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19514,"byte_end":19517,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ This panics if index is out of range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19519,"byte_end":19560,"line_start":124,"line_end":124,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19874,"byte_end":19877,"line_start":135,"line_end":135,"column_start":9,"column_end":12},"name":"lsb","qualname":"<BigUint>::lsb","value":"pub fn lsb(&Self) -> Single","parent":null,"children":[],"decl_id":null,"docs":" returns the least significant limb of the number.","sig":null,"attributes":[{"value":"/ returns the least significant limb of the number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19691,"byte_end":19744,"line_start":130,"line_end":130,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19746,"byte_end":19749,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19751,"byte_end":19766,"line_start":132,"line_end":132,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19768,"byte_end":19771,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ While the constructor of the type prevents this, this can panic if `self` has no digits.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19773,"byte_end":19865,"line_start":134,"line_end":134,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20114,"byte_end":20117,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"msb","qualname":"<BigUint>::msb","value":"pub fn msb(&Self) -> Single","parent":null,"children":[],"decl_id":null,"docs":" returns the most significant limb of the number.","sig":null,"attributes":[{"value":"/ returns the most significant limb of the number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19932,"byte_end":19984,"line_start":139,"line_end":139,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19986,"byte_end":19989,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":19991,"byte_end":20006,"line_start":141,"line_end":141,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20008,"byte_end":20011,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ While the constructor of the type prevents this, this can panic if `self` has no digits.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20013,"byte_end":20105,"line_start":143,"line_end":143,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20251,"byte_end":20257,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"lstrip","qualname":"<BigUint>::lstrip","value":"pub fn lstrip(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Strips zeros from the left side (the most significant limbs) of `self`, if any.\n","sig":null,"attributes":[{"value":"/ Strips zeros from the left side (the most significant limbs) of `self`, if any.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20159,"byte_end":20242,"line_start":148,"line_end":148,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20831,"byte_end":20835,"line_start":163,"line_end":163,"column_start":9,"column_end":13},"name":"lpad","qualname":"<BigUint>::lpad","value":"pub fn lpad(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Zero-pad `self` from left to reach `size` limbs. Will not make any difference if `self`\n is already bigger than `size` limbs.\n","sig":null,"attributes":[{"value":"/ Zero-pad `self` from left to reach `size` limbs. Will not make any difference if `self`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20689,"byte_end":20780,"line_start":161,"line_end":161,"column_start":2,"column_end":93}},{"value":"/ is already bigger than `size` limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":20782,"byte_end":20822,"line_start":162,"line_end":162,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21513,"byte_end":21516,"line_start":180,"line_end":180,"column_start":9,"column_end":12},"name":"add","qualname":"<BigUint>::add","value":"pub fn add(Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds `self` with `other`. self and other do not have to have any particular size. Given\n that the `n = max{size(self), size(other)}`, it will produce a number with `n + 1`\n limbs.","sig":null,"attributes":[{"value":"/ Adds `self` with `other`. self and other do not have to have any particular size. Given","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21076,"byte_end":21167,"line_start":172,"line_end":172,"column_start":2,"column_end":93}},{"value":"/ that the `n = max{size(self), size(other)}`, it will produce a number with `n + 1`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21169,"byte_end":21255,"line_start":173,"line_end":173,"column_start":2,"column_end":88}},{"value":"/ limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21257,"byte_end":21267,"line_start":174,"line_end":174,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21269,"byte_end":21272,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ This function does not strip the output and returns the original allocated `n + 1`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21274,"byte_end":21360,"line_start":176,"line_end":176,"column_start":2,"column_end":88}},{"value":"/ limbs. The caller may strip the output if desired.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21362,"byte_end":21416,"line_start":177,"line_end":177,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21418,"byte_end":21421,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21423,"byte_end":21504,"line_start":179,"line_end":179,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":22278,"byte_end":22281,"line_start":203,"line_end":203,"column_start":9,"column_end":12},"name":"sub","qualname":"<BigUint>::sub","value":"pub fn sub(Self, &Self) -> Result<Self, Self>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts `other` from `self`. self and other do not have to have any particular size.\n Given that the `n = max{size(self), size(other)}`, it will produce a number of size `n`.","sig":null,"attributes":[{"value":"/ Subtracts `other` from `self`. self and other do not have to have any particular size.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":21922,"byte_end":22012,"line_start":197,"line_end":197,"column_start":2,"column_end":92}},{"value":"/ Given that the `n = max{size(self), size(other)}`, it will produce a number of size `n`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":22014,"byte_end":22106,"line_start":198,"line_end":198,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":22108,"byte_end":22111,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ If `other` is bigger than `self`, `Err(B - borrow)` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":22113,"byte_end":22181,"line_start":200,"line_end":200,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":22183,"byte_end":22186,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":22188,"byte_end":22269,"line_start":202,"line_end":202,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23607,"byte_end":23610,"line_start":251,"line_end":251,"column_start":9,"column_end":12},"name":"mul","qualname":"<BigUint>::mul","value":"pub fn mul(Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies n-limb number `self` with m-limb number `other`.","sig":null,"attributes":[{"value":"/ Multiplies n-limb number `self` with m-limb number `other`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23235,"byte_end":23298,"line_start":243,"line_end":243,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23300,"byte_end":23303,"line_start":244,"line_end":244,"column_start":2,"column_end":5}},{"value":"/ The resulting number will always have `n + m` limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23305,"byte_end":23361,"line_start":245,"line_end":245,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23363,"byte_end":23366,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ This function does not strip the output and returns the original allocated `n + m`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23368,"byte_end":23454,"line_start":247,"line_end":247,"column_start":2,"column_end":88}},{"value":"/ limbs. The caller may strip the output if desired.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23456,"byte_end":23510,"line_start":248,"line_end":248,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23512,"byte_end":23515,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":23517,"byte_end":23598,"line_start":250,"line_end":250,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":24504,"byte_end":24512,"line_start":283,"line_end":283,"column_start":9,"column_end":17},"name":"div_unit","qualname":"<BigUint>::div_unit","value":"pub fn div_unit(Self, Single) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Divides `self` by a single limb `other`. This can be used in cases where the original\n division cannot work due to the divisor (`other`) being just one limb.","sig":null,"attributes":[{"value":"/ Divides `self` by a single limb `other`. This can be used in cases where the original","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":24285,"byte_end":24374,"line_start":279,"line_end":279,"column_start":2,"column_end":91}},{"value":"/ division cannot work due to the divisor (`other`) being just one limb.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":24376,"byte_end":24450,"line_start":280,"line_end":280,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":24452,"byte_end":24455,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ Invariant: `other` cannot be zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":24457,"byte_end":24495,"line_start":282,"line_end":282,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25633,"byte_end":25636,"line_start":311,"line_end":311,"column_start":9,"column_end":12},"name":"div","qualname":"<BigUint>::div","value":"pub fn div(Self, &Self, bool) -> Option<(Self, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Divides an `n + m` limb self by a `n` limb `other`. The result is a `m + 1` limb\n quotient and a `n` limb remainder, if enabled by passing `true` in `rem` argument, both\n in the form of an option's `Ok`.","sig":null,"attributes":[{"value":"/ Divides an `n + m` limb self by a `n` limb `other`. The result is a `m + 1` limb","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":24925,"byte_end":25009,"line_start":298,"line_end":298,"column_start":2,"column_end":86}},{"value":"/ quotient and a `n` limb remainder, if enabled by passing `true` in `rem` argument, both","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25011,"byte_end":25102,"line_start":299,"line_end":299,"column_start":2,"column_end":93}},{"value":"/ in the form of an option's `Ok`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25104,"byte_end":25140,"line_start":300,"line_end":300,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25142,"byte_end":25145,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ - requires `other` to be stripped and have no leading zeros.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25147,"byte_end":25211,"line_start":302,"line_end":302,"column_start":2,"column_end":66}},{"value":"/ - requires `self` to be stripped and have no leading zeros.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25213,"byte_end":25276,"line_start":303,"line_end":303,"column_start":2,"column_end":65}},{"value":"/ - requires `other` to have at least two limbs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25278,"byte_end":25328,"line_start":304,"line_end":304,"column_start":2,"column_end":52}},{"value":"/ - requires `self` to have a greater length compared to `other`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25330,"byte_end":25397,"line_start":305,"line_end":305,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25399,"byte_end":25402,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ All arguments are examined without being stripped for the above conditions. If any of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25404,"byte_end":25493,"line_start":307,"line_end":307,"column_start":2,"column_end":91}},{"value":"/ the above fails, `None` is returned.`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25495,"byte_end":25536,"line_start":308,"line_end":308,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25538,"byte_end":25541,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":25543,"byte_end":25624,"line_start":310,"line_end":310,"column_start":2,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":74},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"helpers_128bit","qualname":"::helpers_128bit","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" Some helper functions to work with 128bit numbers. Note that the functionality provided here is\n only sensible to use with 128bit numbers because for smaller sizes, you can always rely on\n assumptions of a bigger type (u128) being available, or simply create a per-thing and use the\n multiplication implementation provided there.\n","sig":null,"attributes":[{"value":"/ Some helper functions to work with 128bit numbers. Note that the functionality provided here is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":37596,"byte_end":37695,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ only sensible to use with 128bit numbers because for smaller sizes, you can always rely on","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":37696,"byte_end":37790,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ assumptions of a bigger type (u128) being available, or simply create a per-thing and use the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":37791,"byte_end":37888,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ multiplication implementation provided there.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":37889,"byte_end":37938,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38104,"byte_end":38107,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"gcd","qualname":"::helpers_128bit::gcd","value":"pub fn gcd(u128, u128) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Helper gcd function used in Rational128 implementation.\n","sig":null,"attributes":[{"value":"/ Helper gcd function used in Rational128 implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38037,"byte_end":38096,"line_start":27,"line_end":27,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38504,"byte_end":38509,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"split","qualname":"::helpers_128bit::split","value":"pub fn split(u128) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" split a u128 into two u64 limbs\n","sig":null,"attributes":[{"value":"/ split a u128 into two u64 limbs","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38461,"byte_end":38496,"line_start":42,"line_end":42,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38646,"byte_end":38657,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"to_big_uint","qualname":"::helpers_128bit::to_big_uint","value":"pub fn to_big_uint(u128) -> biguint::BigUint","parent":null,"children":[],"decl_id":null,"docs":" Convert a u128 to a u32 based biguint.\n","sig":null,"attributes":[{"value":"/ Convert a u128 to a u32 based biguint.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38596,"byte_end":38638,"line_start":49,"line_end":49,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":39175,"byte_end":39195,"line_start":65,"line_end":65,"column_start":8,"column_end":28},"name":"multiply_by_rational","qualname":"::helpers_128bit::multiply_by_rational","value":"pub fn multiply_by_rational(u128, u128, u128) -> Result<u128, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Safely and accurately compute `a * b / c`. The approach is:\n   - Simply try `a * b / c`.\n   - Else, convert them both into big numbers and re-try. `Err` is returned if the result\n     cannot be safely casted back to u128.","sig":null,"attributes":[{"value":"/ Safely and accurately compute `a * b / c`. The approach is:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38876,"byte_end":38939,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"/   - Simply try `a * b / c`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38940,"byte_end":38971,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/   - Else, convert them both into big numbers and re-try. `Err` is returned if the result","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":38972,"byte_end":39064,"line_start":61,"line_end":61,"column_start":1,"column_end":93}},{"value":"/     cannot be safely casted back to u128.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":39065,"byte_end":39110,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":39111,"byte_end":39114,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Invariant: c must be greater than or equal to 1.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/helpers_128bit.rs","byte_start":39115,"byte_end":39167,"line_start":64,"line_end":64,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":143},{"krate":0,"index":148},{"krate":0,"index":153},{"krate":0,"index":161},{"krate":0,"index":166}],"decl_id":null,"docs":" Primitive traits for the runtime arithmetic.\n","sig":null,"attributes":[{"value":"/ Primitive traits for the runtime arithmetic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41468,"byte_end":41516,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42004,"byte_end":42018,"line_start":33,"line_end":33,"column_start":11,"column_end":25},"name":"BaseArithmetic","qualname":"::traits::BaseArithmetic","value":"BaseArithmetic: From<u8> + Zero + One + IntegerSquareRoot + Add<Self, Output = Self> +\nAddAssign<Self> + Sub<Self, Output = Self> + SubAssign<Self> + Mul<Self,\nOutput = Self> + MulAssign<Self> + Div<Self, Output = Self> +\nDivAssign<Self> + Rem<Self, Output = Self> + RemAssign<Self> + Shl<u32, Output\n= Self> + Shr<u32, Output = Self> + CheckedShl + CheckedShr + CheckedAdd +\nCheckedSub + CheckedMul + CheckedDiv + Saturating + PartialOrd<Self> + Ord +\nBounded + HasCompact + Sized + TryFrom<u8> + TryInto<u8> + TryFrom<u16> +\nTryInto<u16> + TryFrom<u32> + TryInto<u32> + TryFrom<u64> + TryInto<u64> +\nTryFrom<u128> + TryInto<u128> + TryFrom<usize> + TryInto<usize> +\nUniqueSaturatedFrom<u8> + UniqueSaturatedInto<u8> + UniqueSaturatedFrom<u16> +\nUniqueSaturatedInto<u16> + UniqueSaturatedFrom<u32> +\nUniqueSaturatedInto<u32> + UniqueSaturatedFrom<u64> +\nUniqueSaturatedInto<u64> + UniqueSaturatedFrom<u128> +\nUniqueSaturatedInto<u128>","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic type operations, regardless of any limitation on size.\n","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic type operations, regardless of any limitation on size.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":41907,"byte_end":41993,"line_start":32,"line_end":32,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":126},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44234,"byte_end":44246,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"AtLeast32Bit","qualname":"::traits::AtLeast32Bit","value":"AtLeast32Bit: BaseArithmetic + From<u16> + From<u32>","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic.","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":43933,"byte_end":43965,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":43966,"byte_end":43969,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Arithmetic types do all the usual stuff you'd expect numbers to do. They are guaranteed to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":43970,"byte_end":44064,"line_start":75,"line_end":75,"column_start":1,"column_end":95}},{"value":"/ be able to represent at least `u32` values without loss, hence the trait implies `From<u32>`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44065,"byte_end":44161,"line_start":76,"line_end":76,"column_start":1,"column_end":97}},{"value":"/ and smaller integers. All other conversions are fallible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44162,"byte_end":44223,"line_start":77,"line_end":77,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":129},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44466,"byte_end":44486,"line_start":83,"line_end":83,"column_start":11,"column_end":31},"name":"AtLeast32BitUnsigned","qualname":"::traits::AtLeast32BitUnsigned","value":"AtLeast32BitUnsigned: AtLeast32Bit + Unsigned","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic.  Same as [`AtLeast32Bit `], but also bounded to be unsigned.\n","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic.  Same as [`AtLeast32Bit `], but also bounded to be unsigned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44362,"byte_end":44455,"line_start":82,"line_end":82,"column_start":1,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":132},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44728,"byte_end":44747,"line_start":89,"line_end":89,"column_start":11,"column_end":30},"name":"UniqueSaturatedFrom","qualname":"::traits::UniqueSaturatedFrom","value":"UniqueSaturatedFrom<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":134}],"decl_id":null,"docs":" Just like `From` except that if the source value is too big to fit into the destination type\n then it'll saturate the destination.\n","sig":null,"attributes":[{"value":"/ Just like `From` except that if the source value is too big to fit into the destination type","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44580,"byte_end":44676,"line_start":87,"line_end":87,"column_start":1,"column_end":97}},{"value":"/ then it'll saturate the destination.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44677,"byte_end":44717,"line_start":88,"line_end":88,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44843,"byte_end":44864,"line_start":91,"line_end":91,"column_start":5,"column_end":26},"name":"unique_saturated_from","qualname":"::traits::UniqueSaturatedFrom::unique_saturated_from","value":"pub fn unique_saturated_from(T) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":" Convert from a value of `T` into an equivalent instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Convert from a value of `T` into an equivalent instance of `Self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44768,"byte_end":44838,"line_start":90,"line_end":90,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":135},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45031,"byte_end":45050,"line_start":96,"line_end":96,"column_start":11,"column_end":30},"name":"UniqueSaturatedInto","qualname":"::traits::UniqueSaturatedInto","value":"UniqueSaturatedInto<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":137}],"decl_id":null,"docs":" Just like `Into` except that if the source value is too big to fit into the destination type\n then it'll saturate the destination.\n","sig":null,"attributes":[{"value":"/ Just like `Into` except that if the source value is too big to fit into the destination type","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44883,"byte_end":44979,"line_start":94,"line_end":94,"column_start":1,"column_end":97}},{"value":"/ then it'll saturate the destination.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44980,"byte_end":45020,"line_start":95,"line_end":95,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45130,"byte_end":45151,"line_start":98,"line_end":98,"column_start":5,"column_end":26},"name":"unique_saturated_into","qualname":"::traits::UniqueSaturatedInto::unique_saturated_into","value":"pub fn unique_saturated_into(Self) -> T","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" Consume self to return an equivalent value of `T`.\n","sig":null,"attributes":[{"value":"/ Consume self to return an equivalent value of `T`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45071,"byte_end":45125,"line_start":97,"line_end":97,"column_start":2,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45643,"byte_end":45653,"line_start":114,"line_end":114,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::traits::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Saturating arithmetic operations, returning maximum or minimum values instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating arithmetic operations, returning maximum or minimum values instead of overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45535,"byte_end":45632,"line_start":113,"line_end":113,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45770,"byte_end":45784,"line_start":117,"line_end":117,"column_start":5,"column_end":19},"name":"saturating_add","qualname":"::traits::Saturating::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Saturating addition. Compute `self + rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition. Compute `self + rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45657,"byte_end":45747,"line_start":115,"line_end":115,"column_start":2,"column_end":92}},{"value":"/ overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45749,"byte_end":45765,"line_start":116,"line_end":116,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45929,"byte_end":45943,"line_start":121,"line_end":121,"column_start":5,"column_end":19},"name":"saturating_sub","qualname":"::traits::Saturating::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Saturating subtraction. Compute `self - rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction. Compute `self - rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45813,"byte_end":45906,"line_start":119,"line_end":119,"column_start":2,"column_end":95}},{"value":"/ overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45908,"byte_end":45924,"line_start":120,"line_end":120,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46085,"byte_end":46099,"line_start":125,"line_end":125,"column_start":5,"column_end":19},"name":"saturating_mul","qualname":"::traits::Saturating::saturating_mul","value":"pub fn saturating_mul(Self, Self) -> Self","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Saturating multiply. Compute `self * rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating multiply. Compute `self * rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45972,"byte_end":46062,"line_start":123,"line_end":123,"column_start":2,"column_end":92}},{"value":"/ overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46064,"byte_end":46080,"line_start":124,"line_end":124,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46250,"byte_end":46264,"line_start":129,"line_end":129,"column_start":5,"column_end":19},"name":"saturating_pow","qualname":"::traits::Saturating::saturating_pow","value":"pub fn saturating_pow(Self, usize) -> Self","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Saturating exponentiation. Compute `self.pow(exp)`, saturating at the numeric bounds\n instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating exponentiation. Compute `self.pow(exp)`, saturating at the numeric bounds","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46128,"byte_end":46216,"line_start":127,"line_end":127,"column_start":2,"column_end":90}},{"value":"/ instead of overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46218,"byte_end":46245,"line_start":128,"line_end":128,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":161},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47265,"byte_end":47284,"line_start":168,"line_end":168,"column_start":11,"column_end":30},"name":"SaturatedConversion","qualname":"::traits::SaturatedConversion","value":"SaturatedConversion","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":164}],"decl_id":null,"docs":" Convenience type to work around the highly unergonomic syntax needed\n to invoke the functions of overloaded generic traits, in this case\n `SaturatedFrom` and `SaturatedInto`.\n","sig":null,"attributes":[{"value":"/ Convenience type to work around the highly unergonomic syntax needed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47070,"byte_end":47142,"line_start":165,"line_end":165,"column_start":1,"column_end":73}},{"value":"/ to invoke the functions of overloaded generic traits, in this case","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47143,"byte_end":47213,"line_start":166,"line_end":166,"column_start":1,"column_end":71}},{"value":"/ `SaturatedFrom` and `SaturatedInto`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47214,"byte_end":47254,"line_start":167,"line_end":167,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47566,"byte_end":47580,"line_start":174,"line_end":174,"column_start":5,"column_end":19},"name":"saturated_from","qualname":"::traits::SaturatedConversion::saturated_from","value":"pub fn saturated_from<T>(T) -> Self where Self: UniqueSaturatedFrom<T>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Convert from a value of `T` into an equivalent instance of `Self`.","sig":null,"attributes":[{"value":"/ Convert from a value of `T` into an equivalent instance of `Self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47288,"byte_end":47358,"line_start":169,"line_end":169,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47360,"byte_end":47363,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ This just uses `UniqueSaturatedFrom` internally but with this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47365,"byte_end":47430,"line_start":171,"line_end":171,"column_start":2,"column_end":67}},{"value":"/ variant you can provide the destination type using turbofish syntax","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47432,"byte_end":47503,"line_start":172,"line_end":172,"column_start":2,"column_end":73}},{"value":"/ in case Rust happens not to assume the correct type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47505,"byte_end":47561,"line_start":173,"line_end":173,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47963,"byte_end":47977,"line_start":183,"line_end":183,"column_start":5,"column_end":19},"name":"saturated_into","qualname":"::traits::SaturatedConversion::saturated_into","value":"pub fn saturated_into<T>(Self) -> T where Self: UniqueSaturatedInto<T>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":" Consume self to return an equivalent value of `T`.","sig":null,"attributes":[{"value":"/ Consume self to return an equivalent value of `T`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47701,"byte_end":47755,"line_start":178,"line_end":178,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47757,"byte_end":47760,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ This just uses `UniqueSaturatedInto` internally but with this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47762,"byte_end":47827,"line_start":180,"line_end":180,"column_start":2,"column_end":67}},{"value":"/ variant you can provide the destination type using turbofish syntax","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47829,"byte_end":47900,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"/ in case Rust happens not to assume the correct type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":47902,"byte_end":47958,"line_start":182,"line_end":182,"column_start":2,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49182,"byte_end":49189,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"InnerOf","qualname":"::per_things::InnerOf","value":"<P as PerThing>::Inner","parent":null,"children":[],"decl_id":null,"docs":" Get the inner type of a `PerThing`.\n","sig":null,"attributes":[{"value":"/ Get the inner type of a `PerThing`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49133,"byte_end":49172,"line_start":28,"line_end":28,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":191},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49269,"byte_end":49276,"line_start":32,"line_end":32,"column_start":10,"column_end":17},"name":"UpperOf","qualname":"::per_things::UpperOf","value":"<P as PerThing>::Upper","parent":null,"children":[],"decl_id":null,"docs":" Get the upper type of a `PerThing`.\n","sig":null,"attributes":[{"value":"/ Get the upper type of a `PerThing`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49220,"byte_end":49259,"line_start":31,"line_end":31,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":193},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49427,"byte_end":49435,"line_start":36,"line_end":36,"column_start":11,"column_end":19},"name":"PerThing","qualname":"::per_things::PerThing","value":"PerThing: Sized + Saturating + Copy + Default + Eq + PartialEq + Ord + PartialOrd +\nBounded + fmt::Debug","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"decl_id":null,"docs":" Something that implements a fixed point ration with an arbitrary granularity `X`, as _parts per\n `X`_.\n","sig":null,"attributes":[{"value":"/ Something that implements a fixed point ration with an arbitrary granularity `X`, as _parts per","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49307,"byte_end":49406,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"/ `X`_.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49407,"byte_end":49416,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":194},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49591,"byte_end":49596,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Inner","qualname":"::per_things::PerThing::Inner","value":"type Inner: BaseArithmetic + Unsigned + Copy + fmt::Debug;","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" The data type used to build this per-thingy.\n","sig":null,"attributes":[{"value":"/ The data type used to build this per-thingy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49536,"byte_end":49584,"line_start":39,"line_end":39,"column_start":2,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":195},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49787,"byte_end":49792,"line_start":44,"line_end":44,"column_start":7,"column_end":12},"name":"Upper","qualname":"::per_things::PerThing::Upper","value":"type Upper:\n\t\tBaseArithmetic + Copy + From<Self::Inner> + TryInto<Self::Inner> +\n\t\tUniqueSaturatedInto<Self::Inner> + Unsigned + fmt::Debug;","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" A data type larger than `Self::Inner`, used to avoid overflow in some computations.\n It must be able to compute `ACCURACY^2`.\n","sig":null,"attributes":[{"value":"/ A data type larger than `Self::Inner`, used to avoid overflow in some computations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49647,"byte_end":49734,"line_start":42,"line_end":42,"column_start":2,"column_end":89}},{"value":"/ It must be able to compute `ACCURACY^2`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49736,"byte_end":49780,"line_start":43,"line_end":43,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":196},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49963,"byte_end":49971,"line_start":49,"line_end":49,"column_start":8,"column_end":16},"name":"ACCURACY","qualname":"::per_things::PerThing::ACCURACY","value":"Self::Inner","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" The accuracy of this type.\n","sig":null,"attributes":[{"value":"/ The accuracy of this type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49925,"byte_end":49955,"line_start":48,"line_end":48,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50033,"byte_end":50037,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"zero","qualname":"::per_things::PerThing::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Equivalent to `Self::from_parts(0)`.\n","sig":null,"attributes":[{"value":"/ Equivalent to `Self::from_parts(0)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49988,"byte_end":50028,"line_start":51,"line_end":51,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50134,"byte_end":50141,"line_start":55,"line_end":55,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::per_things::PerThing::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Return `true` if this is nothing.\n","sig":null,"attributes":[{"value":"/ Return `true` if this is nothing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50092,"byte_end":50129,"line_start":54,"line_end":54,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50263,"byte_end":50266,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"one","qualname":"::per_things::PerThing::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Equivalent to `Self::from_parts(Self::ACCURACY)`.\n","sig":null,"attributes":[{"value":"/ Equivalent to `Self::from_parts(Self::ACCURACY)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50205,"byte_end":50258,"line_start":57,"line_end":57,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50354,"byte_end":50360,"line_start":61,"line_end":61,"column_start":5,"column_end":11},"name":"is_one","qualname":"::per_things::PerThing::is_one","value":"pub fn is_one(&Self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Return `true` if this is one.\n","sig":null,"attributes":[{"value":"/ Return `true` if this is one.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50316,"byte_end":50349,"line_start":60,"line_end":60,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50542,"byte_end":50554,"line_start":65,"line_end":65,"column_start":5,"column_end":17},"name":"from_percent","qualname":"::per_things::PerThing::from_percent","value":"pub fn from_percent(Self::Inner) -> Self","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Build this type from a percent. Equivalent to `Self::from_parts(x * Self::ACCURACY / 100)`\n but more accurate.\n","sig":null,"attributes":[{"value":"/ Build this type from a percent. Equivalent to `Self::from_parts(x * Self::ACCURACY / 100)`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50419,"byte_end":50513,"line_start":63,"line_end":63,"column_start":2,"column_end":96}},{"value":"/ but more accurate.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50515,"byte_end":50537,"line_start":64,"line_end":64,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50921,"byte_end":50927,"line_start":74,"line_end":74,"column_start":5,"column_end":11},"name":"square","qualname":"::per_things::PerThing::square","value":"pub fn square(Self) -> Self","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Return the product of multiplication of this value by itself.\n","sig":null,"attributes":[{"value":"/ Return the product of multiplication of this value by itself.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":50851,"byte_end":50916,"line_start":73,"line_end":73,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51609,"byte_end":51618,"line_start":95,"line_end":95,"column_start":5,"column_end":14},"name":"mul_floor","qualname":"::per_things::PerThing::mul_floor","value":"pub fn mul_floor<N>(Self, N) -> N where N: Clone + From<Self::Inner> +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Unsigned","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Multiplication that always rounds down to a whole number. The standard `Mul` rounds to the\n nearest whole number.","sig":null,"attributes":[{"value":"/ Multiplication that always rounds down to a whole number. The standard `Mul` rounds to the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51093,"byte_end":51187,"line_start":80,"line_end":80,"column_start":2,"column_end":96}},{"value":"/ nearest whole number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51189,"byte_end":51214,"line_start":81,"line_end":81,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51216,"byte_end":51219,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51221,"byte_end":51232,"line_start":83,"line_end":83,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51234,"byte_end":51279,"line_start":84,"line_end":84,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51281,"byte_end":51299,"line_start":85,"line_end":85,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51301,"byte_end":51324,"line_start":86,"line_end":86,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(34) * 10u64, 3);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51326,"byte_end":51379,"line_start":87,"line_end":87,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(Percent::from_percent(36) * 10u64, 4);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51381,"byte_end":51434,"line_start":88,"line_end":88,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51436,"byte_end":51439,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ // round down","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51441,"byte_end":51458,"line_start":90,"line_end":90,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(Percent::from_percent(34).mul_floor(10u64), 3);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51460,"byte_end":51522,"line_start":91,"line_end":91,"column_start":2,"column_end":64}},{"value":"/ assert_eq!(Percent::from_percent(36).mul_floor(10u64), 3);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51524,"byte_end":51586,"line_start":92,"line_end":92,"column_start":2,"column_end":64}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51588,"byte_end":51595,"line_start":93,"line_end":93,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51597,"byte_end":51604,"line_start":94,"line_end":94,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52419,"byte_end":52427,"line_start":117,"line_end":117,"column_start":5,"column_end":13},"name":"mul_ceil","qualname":"::per_things::PerThing::mul_ceil","value":"pub fn mul_ceil<N>(Self, N) -> N where N: Clone + From<Self::Inner> +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Unsigned","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Multiplication that always rounds the result up to a whole number. The standard `Mul`\n rounds to the nearest whole number.","sig":null,"attributes":[{"value":"/ Multiplication that always rounds the result up to a whole number. The standard `Mul`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51898,"byte_end":51987,"line_start":102,"line_end":102,"column_start":2,"column_end":91}},{"value":"/ rounds to the nearest whole number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":51989,"byte_end":52028,"line_start":103,"line_end":103,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52030,"byte_end":52033,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52035,"byte_end":52046,"line_start":105,"line_end":105,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52048,"byte_end":52093,"line_start":106,"line_end":106,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52095,"byte_end":52113,"line_start":107,"line_end":107,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52115,"byte_end":52138,"line_start":108,"line_end":108,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(34) * 10u64, 3);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52140,"byte_end":52193,"line_start":109,"line_end":109,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(Percent::from_percent(36) * 10u64, 4);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52195,"byte_end":52248,"line_start":110,"line_end":110,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52250,"byte_end":52253,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ // round up","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52255,"byte_end":52270,"line_start":112,"line_end":112,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(Percent::from_percent(34).mul_ceil(10u64), 4);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52272,"byte_end":52333,"line_start":113,"line_end":113,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(Percent::from_percent(36).mul_ceil(10u64), 4);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52335,"byte_end":52396,"line_start":114,"line_end":114,"column_start":2,"column_end":63}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52398,"byte_end":52405,"line_start":115,"line_end":115,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52407,"byte_end":52414,"line_start":116,"line_end":116,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53067,"byte_end":53092,"line_start":133,"line_end":133,"column_start":5,"column_end":30},"name":"saturating_reciprocal_mul","qualname":"::per_things::PerThing::saturating_reciprocal_mul","value":"pub fn saturating_reciprocal_mul<N>(Self, N) -> N where N: Clone +\nFrom<Self::Inner> + UniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output =\nN> + ops::Div<N, Output = N> + ops::Mul<N, Output = N> + ops::Add<N, Output =\nN> + Saturating + Unsigned","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded to the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52705,"byte_end":52792,"line_start":124,"line_end":124,"column_start":2,"column_end":89}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52794,"byte_end":52878,"line_start":125,"line_end":125,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52880,"byte_end":52883,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52885,"byte_end":52896,"line_start":127,"line_end":127,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52898,"byte_end":52943,"line_start":128,"line_end":128,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52945,"byte_end":52963,"line_start":129,"line_end":129,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(Percent::from_percent(50).saturating_reciprocal_mul(10u64), 20);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":52965,"byte_end":53044,"line_start":130,"line_end":130,"column_start":2,"column_end":81}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53046,"byte_end":53053,"line_start":131,"line_end":131,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53055,"byte_end":53062,"line_start":132,"line_end":132,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53895,"byte_end":53926,"line_start":153,"line_end":153,"column_start":5,"column_end":36},"name":"saturating_reciprocal_mul_floor","qualname":"::per_things::PerThing::saturating_reciprocal_mul_floor","value":"pub fn saturating_reciprocal_mul_floor<N>(Self, N) -> N where N: Clone +\nFrom<Self::Inner> + UniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output =\nN> + ops::Div<N, Output = N> + ops::Mul<N, Output = N> + ops::Add<N, Output =\nN> + Saturating + Unsigned","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded down to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded down to the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53397,"byte_end":53489,"line_start":141,"line_end":141,"column_start":2,"column_end":94}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53491,"byte_end":53575,"line_start":142,"line_end":142,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53577,"byte_end":53580,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53582,"byte_end":53593,"line_start":144,"line_end":144,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53595,"byte_end":53640,"line_start":145,"line_end":145,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53642,"byte_end":53660,"line_start":146,"line_end":146,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53662,"byte_end":53685,"line_start":147,"line_end":147,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(60).saturating_reciprocal_mul(10u64), 17);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53687,"byte_end":53766,"line_start":148,"line_end":148,"column_start":2,"column_end":81}},{"value":"/ // round down","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53768,"byte_end":53785,"line_start":149,"line_end":149,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(Percent::from_percent(60).saturating_reciprocal_mul_floor(10u64), 16);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53787,"byte_end":53872,"line_start":150,"line_end":150,"column_start":2,"column_end":87}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53874,"byte_end":53881,"line_start":151,"line_end":151,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":53883,"byte_end":53890,"line_start":152,"line_end":152,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54721,"byte_end":54751,"line_start":173,"line_end":173,"column_start":5,"column_end":35},"name":"saturating_reciprocal_mul_ceil","qualname":"::per_things::PerThing::saturating_reciprocal_mul_ceil","value":"pub fn saturating_reciprocal_mul_ceil<N>(Self, N) -> N where N: Clone +\nFrom<Self::Inner> + UniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output =\nN> + ops::Div<N, Output = N> + ops::Mul<N, Output = N> + ops::Add<N, Output =\nN> + Saturating + Unsigned","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded up to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded up to the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54228,"byte_end":54318,"line_start":161,"line_end":161,"column_start":2,"column_end":92}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54320,"byte_end":54404,"line_start":162,"line_end":162,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54406,"byte_end":54409,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54411,"byte_end":54422,"line_start":164,"line_end":164,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54424,"byte_end":54469,"line_start":165,"line_end":165,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54471,"byte_end":54489,"line_start":166,"line_end":166,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54491,"byte_end":54514,"line_start":167,"line_end":167,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(61).saturating_reciprocal_mul(10u64), 16);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54516,"byte_end":54595,"line_start":168,"line_end":168,"column_start":2,"column_end":81}},{"value":"/ // round up","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54597,"byte_end":54612,"line_start":169,"line_end":169,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(Percent::from_percent(61).saturating_reciprocal_mul_ceil(10u64), 17);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54614,"byte_end":54698,"line_start":170,"line_end":170,"column_start":2,"column_end":86}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54700,"byte_end":54707,"line_start":171,"line_end":171,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":54709,"byte_end":54716,"line_start":172,"line_end":172,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55114,"byte_end":55125,"line_start":182,"line_end":182,"column_start":5,"column_end":16},"name":"deconstruct","qualname":"::per_things::PerThing::deconstruct","value":"pub fn deconstruct(Self) -> Self::Inner","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Consume self and return the number of parts per thing.\n","sig":null,"attributes":[{"value":"/ Consume self and return the number of parts per thing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55051,"byte_end":55109,"line_start":181,"line_end":181,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55208,"byte_end":55218,"line_start":185,"line_end":185,"column_start":5,"column_end":15},"name":"from_parts","qualname":"::per_things::PerThing::from_parts","value":"pub fn from_parts(Self::Inner) -> Self","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Build this type from a number of parts per thing.\n","sig":null,"attributes":[{"value":"/ Build this type from a number of parts per thing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55150,"byte_end":55203,"line_start":184,"line_end":184,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55316,"byte_end":55329,"line_start":189,"line_end":189,"column_start":5,"column_end":18},"name":"from_fraction","qualname":"::per_things::PerThing::from_fraction","value":"pub fn from_fraction(f64) -> Self","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Converts a fraction into `Self`.\n","sig":null,"attributes":[{"value":"/ Converts a fraction into `Self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55250,"byte_end":55286,"line_start":187,"line_end":187,"column_start":2,"column_end":38}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55288,"byte_end":55311,"line_start":188,"line_end":188,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":56014,"byte_end":56041,"line_start":209,"line_end":209,"column_start":5,"column_end":32},"name":"from_rational_approximation","qualname":"::per_things::PerThing::from_rational_approximation","value":"pub fn from_rational_approximation<N>(N, N) -> Self where N: Clone + Ord +\nFrom<Self::Inner> + TryInto<Self::Inner> + TryInto<Self::Upper> + ops::Div<N,\nOutput = N> + ops::Rem<N, Output = N> + ops::Add<N, Output = N> + Unsigned","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Approximate the fraction `p/q` into a per-thing fraction. This will never overflow.","sig":null,"attributes":[{"value":"/ Approximate the fraction `p/q` into a per-thing fraction. This will never overflow.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55349,"byte_end":55436,"line_start":191,"line_end":191,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55438,"byte_end":55441,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ The computation of this approximation is performed in the generic type `N`. Given","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55443,"byte_end":55528,"line_start":193,"line_end":193,"column_start":2,"column_end":87}},{"value":"/ `M` as the data type that can hold the maximum value of this per-thing (e.g. u32 for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55530,"byte_end":55618,"line_start":194,"line_end":194,"column_start":2,"column_end":90}},{"value":"/ perbill), this can only work if `N == M` or `N: From<M> + TryInto<M>`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55620,"byte_end":55694,"line_start":195,"line_end":195,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55696,"byte_end":55699,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ Note that this always rounds _down_, i.e.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55701,"byte_end":55746,"line_start":197,"line_end":197,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55748,"byte_end":55751,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55753,"byte_end":55764,"line_start":199,"line_end":199,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55766,"byte_end":55811,"line_start":200,"line_end":200,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55813,"byte_end":55831,"line_start":201,"line_end":201,"column_start":2,"column_end":20}},{"value":"/ // 989/100 is technically closer to 99%.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55833,"byte_end":55877,"line_start":202,"line_end":202,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55879,"byte_end":55894,"line_start":203,"line_end":203,"column_start":2,"column_end":17}},{"value":"/\t\tPercent::from_rational_approximation(989u64, 1000),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55896,"byte_end":55952,"line_start":204,"line_end":204,"column_start":2,"column_end":58}},{"value":"/\t\tPercent::from_parts(98),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55954,"byte_end":55983,"line_start":205,"line_end":205,"column_start":2,"column_end":31}},{"value":"/\t);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55985,"byte_end":55991,"line_start":206,"line_end":206,"column_start":2,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":55993,"byte_end":56000,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":56002,"byte_end":56009,"line_start":208,"line_end":208,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":86999,"byte_end":87006,"line_start":1249,"line_end":1249,"column_start":2,"column_end":9},"name":"Percent","qualname":"::per_things::Percent","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59600,"byte_end":59665,"line_start":322,"line_end":322,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59668,"byte_end":59671,"line_start":323,"line_end":323,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":87119,"byte_end":87125,"line_start":1258,"line_end":1258,"column_start":2,"column_end":8},"name":"PerU16","qualname":"::per_things::PerU16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59600,"byte_end":59665,"line_start":322,"line_end":322,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59668,"byte_end":59671,"line_start":323,"line_end":323,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":87269,"byte_end":87276,"line_start":1268,"line_end":1268,"column_start":2,"column_end":9},"name":"Permill","qualname":"::per_things::Permill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59600,"byte_end":59665,"line_start":322,"line_end":322,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59668,"byte_end":59671,"line_start":323,"line_end":323,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":870},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":87427,"byte_end":87434,"line_start":1278,"line_end":1278,"column_start":2,"column_end":9},"name":"Perbill","qualname":"::per_things::Perbill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59600,"byte_end":59665,"line_start":322,"line_end":322,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59668,"byte_end":59671,"line_start":323,"line_end":323,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":990},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":87589,"byte_end":87600,"line_start":1288,"line_end":1288,"column_start":2,"column_end":13},"name":"Perquintill","qualname":"::per_things::Perquintill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59600,"byte_end":59665,"line_start":322,"line_end":322,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":59668,"byte_end":59671,"line_start":323,"line_end":323,"column_start":3,"column_end":6}}]},{"kind":"Trait","id":{"krate":0,"index":273},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89055,"byte_end":89072,"line_start":33,"line_end":33,"column_start":11,"column_end":28},"name":"FixedPointOperand","qualname":"::fixed_point::FixedPointOperand","value":"FixedPointOperand: Copy + Clone + Bounded + Zero + Saturating + PartialOrd +\nUniqueSaturatedInto<u128> + TryFrom<u128> + CheckedNeg","parent":null,"children":[],"decl_id":null,"docs":" Integer types that can be used to interact with `FixedPointNumber` implementations.\n","sig":null,"attributes":[{"value":"/ Integer types that can be used to interact with `FixedPointNumber` implementations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":88957,"byte_end":89044,"line_start":32,"line_end":32,"column_start":1,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":284},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89893,"byte_end":89909,"line_start":54,"line_end":54,"column_start":11,"column_end":27},"name":"FixedPointNumber","qualname":"::fixed_point::FixedPointNumber","value":"FixedPointNumber: Sized + Copy + Default + Debug + Saturating + Bounded + Eq + PartialEq + Ord +\nPartialOrd + CheckedSub + CheckedAdd + CheckedMul + CheckedDiv + Add + Sub +\nDiv + Mul","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" Something that implements a decimal fixed point number.","sig":null,"attributes":[{"value":"/ Something that implements a decimal fixed point number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89533,"byte_end":89592,"line_start":47,"line_end":47,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89593,"byte_end":89596,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The precision is given by `Self::DIV`, i.e. `1 / DIV` can be represented.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89597,"byte_end":89674,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89675,"byte_end":89678,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Each type can store numbers from `Self::Inner::min_value() / Self::DIV`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89679,"byte_end":89754,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ to `Self::Inner::max_value() / Self::DIV`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89755,"byte_end":89801,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/ This is also referred to as the _accuracy_ of the type in the documentation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89802,"byte_end":89882,"line_start":53,"line_end":53,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90154,"byte_end":90159,"line_start":62,"line_end":62,"column_start":7,"column_end":12},"name":"Inner","qualname":"::fixed_point::FixedPointNumber::Inner","value":"type Inner: Debug + One + CheckedMul + CheckedDiv + FixedPointOperand;","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" The underlying data type used for this fixed point number.\n","sig":null,"attributes":[{"value":"/ The underlying data type used for this fixed point number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90085,"byte_end":90147,"line_start":61,"line_end":61,"column_start":2,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":286},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90309,"byte_end":90312,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"DIV","qualname":"::fixed_point::FixedPointNumber::DIV","value":"Self::Inner","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Precision of this fixed point implementation. It should be a power of `10`.\n","sig":null,"attributes":[{"value":"/ Precision of this fixed point implementation. It should be a power of `10`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90222,"byte_end":90301,"line_start":64,"line_end":64,"column_start":2,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":287},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90403,"byte_end":90409,"line_start":68,"line_end":68,"column_start":8,"column_end":14},"name":"SIGNED","qualname":"::fixed_point::FixedPointNumber::SIGNED","value":"bool","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Indicates if this fixed point implementation is signed or not.\n","sig":null,"attributes":[{"value":"/ Indicates if this fixed point implementation is signed or not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90329,"byte_end":90395,"line_start":67,"line_end":67,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90473,"byte_end":90481,"line_start":71,"line_end":71,"column_start":5,"column_end":13},"name":"accuracy","qualname":"::fixed_point::FixedPointNumber::accuracy","value":"pub fn accuracy() -> Self::Inner","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Precision of this fixed point implementation.\n","sig":null,"attributes":[{"value":"/ Precision of this fixed point implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90419,"byte_end":90468,"line_start":70,"line_end":70,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90567,"byte_end":90577,"line_start":76,"line_end":76,"column_start":5,"column_end":15},"name":"from_inner","qualname":"::fixed_point::FixedPointNumber::from_inner","value":"pub fn from_inner(Self::Inner) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Builds this type from an integer number.\n","sig":null,"attributes":[{"value":"/ Builds this type from an integer number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90518,"byte_end":90562,"line_start":75,"line_end":75,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90664,"byte_end":90674,"line_start":79,"line_end":79,"column_start":5,"column_end":15},"name":"into_inner","qualname":"::fixed_point::FixedPointNumber::into_inner","value":"pub fn into_inner(Self) -> Self::Inner","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Consumes `self` and returns the inner raw value.\n","sig":null,"attributes":[{"value":"/ Consumes `self` and returns the inner raw value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90607,"byte_end":90659,"line_start":78,"line_end":78,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90822,"byte_end":90845,"line_start":84,"line_end":84,"column_start":5,"column_end":28},"name":"saturating_from_integer","qualname":"::fixed_point::FixedPointNumber::saturating_from_integer","value":"pub fn saturating_from_integer<N: FixedPointOperand>(N) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Creates self from an integer number `int`.","sig":null,"attributes":[{"value":"/ Creates self from an integer number `int`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90699,"byte_end":90745,"line_start":81,"line_end":81,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90747,"byte_end":90750,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ Returns `Self::max` or `Self::min` if `int` exceeds accuracy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90752,"byte_end":90817,"line_start":83,"line_end":83,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91161,"byte_end":91181,"line_start":93,"line_end":93,"column_start":5,"column_end":25},"name":"checked_from_integer","qualname":"::fixed_point::FixedPointNumber::checked_from_integer","value":"pub fn checked_from_integer(Self::Inner) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Creates `self` from an integer number `int`.","sig":null,"attributes":[{"value":"/ Creates `self` from an integer number `int`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91056,"byte_end":91104,"line_start":90,"line_end":90,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91106,"byte_end":91109,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `int` exceeds accuracy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91111,"byte_end":91156,"line_start":92,"line_end":92,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91448,"byte_end":91472,"line_start":100,"line_end":100,"column_start":5,"column_end":29},"name":"saturating_from_rational","qualname":"::fixed_point::FixedPointNumber::saturating_from_rational","value":"pub fn saturating_from_rational<N: FixedPointOperand,\n                                D: FixedPointOperand>(N, D) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Creates `self` from a rational number. Equal to `n / d`.","sig":null,"attributes":[{"value":"/ Creates `self` from a rational number. Equal to `n / d`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91290,"byte_end":91350,"line_start":97,"line_end":97,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91352,"byte_end":91355,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ Panics if `d = 0`. Returns `Self::max` or `Self::min` if `n / d` exceeds accuracy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91357,"byte_end":91443,"line_start":99,"line_end":99,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91810,"byte_end":91831,"line_start":110,"line_end":110,"column_start":5,"column_end":26},"name":"checked_from_rational","qualname":"::fixed_point::FixedPointNumber::checked_from_rational","value":"pub fn checked_from_rational<N: FixedPointOperand, D: FixedPointOperand>(N, D)\n-> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Creates `self` from a rational number. Equal to `n / d`.","sig":null,"attributes":[{"value":"/ Creates `self` from a rational number. Equal to `n / d`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91679,"byte_end":91739,"line_start":107,"line_end":107,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91741,"byte_end":91744,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `d == 0` or `n / d` exceeds accuracy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":91746,"byte_end":91805,"line_start":109,"line_end":109,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92363,"byte_end":92378,"line_start":127,"line_end":127,"column_start":5,"column_end":20},"name":"checked_mul_int","qualname":"::fixed_point::FixedPointNumber::checked_mul_int","value":"pub fn checked_mul_int<N: FixedPointOperand>(Self, N) -> Option<N>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Checked multiplication for integer type `N`. Equal to `self * n`.","sig":null,"attributes":[{"value":"/ Checked multiplication for integer type `N`. Equal to `self * n`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92229,"byte_end":92298,"line_start":124,"line_end":124,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92300,"byte_end":92303,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the result does not fit in `N`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92305,"byte_end":92358,"line_start":126,"line_end":126,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92847,"byte_end":92865,"line_start":139,"line_end":139,"column_start":5,"column_end":23},"name":"saturating_mul_int","qualname":"::fixed_point::FixedPointNumber::saturating_mul_int","value":"pub fn saturating_mul_int<N: FixedPointOperand>(Self, N) -> N","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Saturating multiplication for integer type `N`. Equal to `self * n`.","sig":null,"attributes":[{"value":"/ Saturating multiplication for integer type `N`. Equal to `self * n`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92696,"byte_end":92768,"line_start":136,"line_end":136,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92770,"byte_end":92773,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ Returns `N::min` or `N::max` if the result does not fit in `N`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92775,"byte_end":92842,"line_start":138,"line_end":138,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93128,"byte_end":93143,"line_start":146,"line_end":146,"column_start":5,"column_end":20},"name":"checked_div_int","qualname":"::fixed_point::FixedPointNumber::checked_div_int","value":"pub fn checked_div_int<N: FixedPointOperand>(Self, N) -> Option<N>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Checked division for integer type `N`. Equal to `self / d`.","sig":null,"attributes":[{"value":"/ Checked division for integer type `N`. Equal to `self / d`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":92988,"byte_end":93051,"line_start":143,"line_end":143,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93053,"byte_end":93056,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the result does not fit in `N` or `d == 0`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93058,"byte_end":93123,"line_start":145,"line_end":145,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93643,"byte_end":93661,"line_start":159,"line_end":159,"column_start":5,"column_end":23},"name":"saturating_div_int","qualname":"::fixed_point::FixedPointNumber::saturating_div_int","value":"pub fn saturating_div_int<N: FixedPointOperand>(Self, N) -> N","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Saturating division for integer type `N`. Equal to `self / d`.","sig":null,"attributes":[{"value":"/ Saturating division for integer type `N`. Equal to `self / d`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93478,"byte_end":93544,"line_start":156,"line_end":156,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93546,"byte_end":93549,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ Panics if `d == 0`. Returns `N::min` or `N::max` if the result does not fit in `N`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93551,"byte_end":93638,"line_start":158,"line_end":158,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94057,"byte_end":94079,"line_start":170,"line_end":170,"column_start":5,"column_end":27},"name":"saturating_mul_acc_int","qualname":"::fixed_point::FixedPointNumber::saturating_mul_acc_int","value":"pub fn saturating_mul_acc_int<N: FixedPointOperand>(Self, N) -> N","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Saturating multiplication for integer type `N`, adding the result back.\n Equal to `self * n + n`.","sig":null,"attributes":[{"value":"/ Saturating multiplication for integer type `N`, adding the result back.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93849,"byte_end":93924,"line_start":166,"line_end":166,"column_start":2,"column_end":77}},{"value":"/ Equal to `self * n + n`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93926,"byte_end":93954,"line_start":167,"line_end":167,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93956,"byte_end":93959,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ Returns `N::min` or `N::max` if the multiplication or final result does not fit in `N`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":93961,"byte_end":94052,"line_start":169,"line_end":169,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94398,"byte_end":94412,"line_start":181,"line_end":181,"column_start":5,"column_end":19},"name":"saturating_abs","qualname":"::fixed_point::FixedPointNumber::saturating_abs","value":"pub fn saturating_abs(Self) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Saturating absolute value.","sig":null,"attributes":[{"value":"/ Saturating absolute value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94309,"byte_end":94339,"line_start":178,"line_end":178,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94341,"byte_end":94344,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ Returns `Self::max` if `self == Self::min`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94346,"byte_end":94393,"line_start":180,"line_end":180,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94712,"byte_end":94722,"line_start":193,"line_end":193,"column_start":5,"column_end":15},"name":"reciprocal","qualname":"::fixed_point::FixedPointNumber::reciprocal","value":"pub fn reciprocal(Self) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Takes the reciprocal (inverse). Equal to `1 / self`.","sig":null,"attributes":[{"value":"/ Takes the reciprocal (inverse). Equal to `1 / self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94611,"byte_end":94667,"line_start":190,"line_end":190,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94669,"byte_end":94672,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `self = 0`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94674,"byte_end":94707,"line_start":192,"line_end":192,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94807,"byte_end":94811,"line_start":198,"line_end":198,"column_start":5,"column_end":9},"name":"zero","qualname":"::fixed_point::FixedPointNumber::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns zero.\n","sig":null,"attributes":[{"value":"/ Returns zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94785,"byte_end":94802,"line_start":197,"line_end":197,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94907,"byte_end":94914,"line_start":203,"line_end":203,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::fixed_point::FixedPointNumber::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Checks if the number is zero.\n","sig":null,"attributes":[{"value":"/ Checks if the number is zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94869,"byte_end":94902,"line_start":202,"line_end":202,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95001,"byte_end":95004,"line_start":208,"line_end":208,"column_start":5,"column_end":8},"name":"one","qualname":"::fixed_point::FixedPointNumber::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns one.\n","sig":null,"attributes":[{"value":"/ Returns one.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":94980,"byte_end":94996,"line_start":207,"line_end":207,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95089,"byte_end":95095,"line_start":213,"line_end":213,"column_start":5,"column_end":11},"name":"is_one","qualname":"::fixed_point::FixedPointNumber::is_one","value":"pub fn is_one(&Self) -> bool","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Checks if the number is one.\n","sig":null,"attributes":[{"value":"/ Checks if the number is one.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95052,"byte_end":95084,"line_start":212,"line_end":212,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95252,"byte_end":95263,"line_start":218,"line_end":218,"column_start":5,"column_end":16},"name":"is_positive","qualname":"::fixed_point::FixedPointNumber::is_positive","value":"pub fn is_positive(Self) -> bool","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive and `false` if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive and `false` if the number is zero or negative.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95160,"byte_end":95247,"line_start":217,"line_end":217,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95419,"byte_end":95430,"line_start":223,"line_end":223,"column_start":5,"column_end":16},"name":"is_negative","qualname":"::fixed_point::FixedPointNumber::is_negative","value":"pub fn is_negative(Self) -> bool","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative and `false` if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative and `false` if the number is zero or positive.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95327,"byte_end":95414,"line_start":222,"line_end":222,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95528,"byte_end":95533,"line_start":228,"line_end":228,"column_start":5,"column_end":10},"name":"trunc","qualname":"::fixed_point::FixedPointNumber::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns the integer part.\n","sig":null,"attributes":[{"value":"/ Returns the integer part.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95494,"byte_end":95523,"line_start":227,"line_end":227,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95974,"byte_end":95978,"line_start":240,"line_end":240,"column_start":5,"column_end":9},"name":"frac","qualname":"::fixed_point::FixedPointNumber::frac","value":"pub fn frac(Self) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns the fractional part.","sig":null,"attributes":[{"value":"/ Returns the fractional part.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95800,"byte_end":95832,"line_start":236,"line_end":236,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95834,"byte_end":95837,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ Note: the returned fraction will be non-negative for negative numbers,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95839,"byte_end":95913,"line_start":238,"line_end":238,"column_start":2,"column_end":76}},{"value":"/ except in the case where the integer part is zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":95915,"byte_end":95969,"line_start":239,"line_end":239,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96317,"byte_end":96321,"line_start":253,"line_end":253,"column_start":5,"column_end":9},"name":"ceil","qualname":"::fixed_point::FixedPointNumber::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96170,"byte_end":96237,"line_start":250,"line_end":250,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96239,"byte_end":96242,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::max` (truncated) if the result does not fit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96244,"byte_end":96312,"line_start":252,"line_end":252,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96650,"byte_end":96655,"line_start":268,"line_end":268,"column_start":5,"column_end":10},"name":"floor","qualname":"::fixed_point::FixedPointNumber::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96507,"byte_end":96570,"line_start":265,"line_end":265,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96572,"byte_end":96575,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::min` (truncated) if the result does not fit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96577,"byte_end":96645,"line_start":267,"line_end":267,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96964,"byte_end":96969,"line_start":279,"line_end":279,"column_start":5,"column_end":10},"name":"round","qualname":"::fixed_point::FixedPointNumber::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Returns the number rounded to the nearest integer. Rounds half-way cases away from 0.0.","sig":null,"attributes":[{"value":"/ Returns the number rounded to the nearest integer. Rounds half-way cases away from 0.0.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96778,"byte_end":96869,"line_start":276,"line_end":276,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96871,"byte_end":96874,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::min` or `Self::max` (truncated) if the result does not fit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":96876,"byte_end":96959,"line_start":278,"line_end":278,"column_start":2,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1120},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":138727,"byte_end":138735,"line_start":1596,"line_end":1596,"column_start":2,"column_end":10},"name":"FixedI64","qualname":"::fixed_point::FixedI64","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":98629,"byte_end":98682,"line_start":342,"line_end":342,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":98685,"byte_end":98688,"line_start":343,"line_end":343,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1230},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":138894,"byte_end":138903,"line_start":1605,"line_end":1605,"column_start":2,"column_end":11},"name":"FixedI128","qualname":"::fixed_point::FixedI128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":98629,"byte_end":98682,"line_start":342,"line_end":342,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":98685,"byte_end":98688,"line_start":343,"line_end":343,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":139121,"byte_end":139130,"line_start":1615,"line_end":1615,"column_start":2,"column_end":11},"name":"FixedU128","qualname":"::fixed_point::FixedU128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":98629,"byte_end":98682,"line_start":342,"line_end":342,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":98685,"byte_end":98688,"line_start":343,"line_end":343,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1378},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140264,"byte_end":140275,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"Rational128","qualname":"::rational128::Rational128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for any rational number with a 128 bit numerator and denominator.\n","sig":null,"attributes":[{"value":"/ A wrapper for any rational number with a 128 bit numerator and denominator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140123,"byte_end":140202,"line_start":23,"line_end":23,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140331,"byte_end":140335,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"name":"zero","qualname":"<Rational128>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Nothing.\n","sig":null,"attributes":[{"value":"/ Nothing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140310,"byte_end":140322,"line_start":28,"line_end":28,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140399,"byte_end":140406,"line_start":34,"line_end":34,"column_start":9,"column_end":16},"name":"is_zero","qualname":"<Rational128>::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If it is zero or not\n","sig":null,"attributes":[{"value":"/ If it is zero or not","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140366,"byte_end":140390,"line_start":33,"line_end":33,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140484,"byte_end":140488,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"from","qualname":"<Rational128>::from","value":"pub fn from(u128, u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140448,"byte_end":140475,"line_start":38,"line_end":38,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140626,"byte_end":140640,"line_start":44,"line_end":44,"column_start":9,"column_end":23},"name":"from_unchecked","qualname":"<Rational128>::from_unchecked","value":"pub fn from_unchecked(u128, u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`. This could lead to / 0 if not properly handled.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`. This could lead to / 0 if not properly handled.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140542,"byte_end":140617,"line_start":43,"line_end":43,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140721,"byte_end":140722,"line_start":49,"line_end":49,"column_start":9,"column_end":10},"name":"n","qualname":"<Rational128>::n","value":"pub fn n(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Return the numerator.\n","sig":null,"attributes":[{"value":"/ Return the numerator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140687,"byte_end":140712,"line_start":48,"line_end":48,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140790,"byte_end":140791,"line_start":54,"line_end":54,"column_start":9,"column_end":10},"name":"d","qualname":"<Rational128>::d","value":"pub fn d(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Return the denominator.\n","sig":null,"attributes":[{"value":"/ Return the denominator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140754,"byte_end":140781,"line_start":53,"line_end":53,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141041,"byte_end":141047,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"name":"to_den","qualname":"<Rational128>::to_den","value":"pub fn to_den(Self, u128) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a similar rational number where denominator is the given `den`.\n This only returns if the result is accurate. `Err` is returned if the result cannot be\n accurately calculated.\n","sig":null,"attributes":[{"value":"/ Convert `self` to a similar rational number where denominator is the given `den`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140823,"byte_end":140908,"line_start":58,"line_end":58,"column_start":2,"column_end":87}},{"value":"/ This only returns if the result is accurate. `Err` is returned if the result cannot be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140914,"byte_end":141004,"line_start":60,"line_end":60,"column_start":2,"column_end":92}},{"value":"/ accurately calculated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141006,"byte_end":141032,"line_start":61,"line_end":61,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141422,"byte_end":141425,"line_start":74,"line_end":74,"column_start":9,"column_end":12},"name":"lcm","qualname":"<Rational128>::lcm","value":"pub fn lcm(&Self, &Self) -> Result<u128, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Get the least common divisor of `self` and `other`.","sig":null,"attributes":[{"value":"/ Get the least common divisor of `self` and `other`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141233,"byte_end":141288,"line_start":70,"line_end":70,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141290,"byte_end":141293,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ This only returns if the result is accurate. `Err` is returned if the result cannot be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141295,"byte_end":141385,"line_start":72,"line_end":72,"column_start":2,"column_end":92}},{"value":"/ accurately calculated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141387,"byte_end":141413,"line_start":73,"line_end":73,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141804,"byte_end":141823,"line_start":82,"line_end":82,"column_start":9,"column_end":28},"name":"lazy_saturating_add","qualname":"<Rational128>::lazy_saturating_add","value":"pub fn lazy_saturating_add(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A saturating add that assumes `self` and `other` have the same denominator.\n","sig":null,"attributes":[{"value":"/ A saturating add that assumes `self` and `other` have the same denominator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141716,"byte_end":141795,"line_start":81,"line_end":81,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142048,"byte_end":142067,"line_start":91,"line_end":91,"column_start":9,"column_end":28},"name":"lazy_saturating_sub","qualname":"<Rational128>::lazy_saturating_sub","value":"pub fn lazy_saturating_sub(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A saturating subtraction that assumes `self` and `other` have the same denominator.\n","sig":null,"attributes":[{"value":"/ A saturating subtraction that assumes `self` and `other` have the same denominator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":141952,"byte_end":142039,"line_start":90,"line_end":90,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142371,"byte_end":142382,"line_start":102,"line_end":102,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<Rational128>::checked_add","value":"pub fn checked_add(Self, Self) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Addition. Simply tries to unify the denominators and add the numerators.","sig":null,"attributes":[{"value":"/ Addition. Simply tries to unify the denominators and add the numerators.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142196,"byte_end":142272,"line_start":99,"line_end":99,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142274,"byte_end":142277,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ Overflow might happen during any of the steps. Error is returned in such cases.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142279,"byte_end":142362,"line_start":101,"line_end":101,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142999,"byte_end":143010,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"checked_sub","qualname":"<Rational128>::checked_sub","value":"pub fn checked_sub(Self, Self) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Subtraction. Simply tries to unify the denominators and subtract the numerators.","sig":null,"attributes":[{"value":"/ Subtraction. Simply tries to unify the denominators and subtract the numerators.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142817,"byte_end":142901,"line_start":111,"line_end":111,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142903,"byte_end":142906,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ Overflow might happen during any of the steps. None is returned in such cases.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":142908,"byte_end":142990,"line_start":113,"line_end":113,"column_start":2,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":410},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1830,"byte_end":1842,"line_start":56,"line_end":56,"column_start":11,"column_end":23},"name":"ThresholdOrd","qualname":"::ThresholdOrd","value":"ThresholdOrd<T>","parent":null,"children":[{"krate":0,"index":412}],"decl_id":null,"docs":" Trait for comparing two numbers with an threshold.","sig":null,"attributes":[{"value":"/ Trait for comparing two numbers with an threshold.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1573,"byte_end":1627,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1628,"byte_end":1631,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Returns:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1632,"byte_end":1644,"line_start":52,"line_end":52,"column_start":1,"column_end":13}},{"value":"/ - `Ordering::Greater` if `self` is greater than `other + threshold`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1645,"byte_end":1717,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ - `Ordering::Less` if `self` is less than `other - threshold`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1718,"byte_end":1784,"line_start":54,"line_end":54,"column_start":1,"column_end":67}},{"value":"/ - `Ordering::Equal` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1785,"byte_end":1819,"line_start":55,"line_end":55,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1920,"byte_end":1924,"line_start":58,"line_end":58,"column_start":5,"column_end":9},"name":"tcmp","qualname":"::ThresholdOrd::tcmp","value":"pub fn tcmp(&Self, &T, T) -> Ordering","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Compare if `self` is `threshold` greater or less than `other`.\n","sig":null,"attributes":[{"value":"/ Compare if `self` is `threshold` greater or less than `other`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1849,"byte_end":1915,"line_start":57,"line_end":57,"column_start":2,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":416},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2929,"byte_end":2941,"line_start":93,"line_end":93,"column_start":11,"column_end":23},"name":"Normalizable","qualname":"::Normalizable","value":"Normalizable<T>","parent":null,"children":[{"krate":0,"index":418}],"decl_id":null,"docs":" A collection-like object that is made of values of type `T` and can normalize its individual\n values around a centric point.","sig":null,"attributes":[{"value":"/ A collection-like object that is made of values of type `T` and can normalize its individual","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2709,"byte_end":2805,"line_start":89,"line_end":89,"column_start":1,"column_end":97}},{"value":"/ values around a centric point.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2806,"byte_end":2840,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2841,"byte_end":2844,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Note that the order of items in the collection may affect the result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2845,"byte_end":2918,"line_start":92,"line_end":92,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":3156,"byte_end":3165,"line_start":98,"line_end":98,"column_start":5,"column_end":14},"name":"normalize","qualname":"::Normalizable::normalize","value":"pub fn normalize(&Self, T) -> Result<Vec<T>, &'static str>","parent":{"krate":0,"index":416},"children":[],"decl_id":null,"docs":" Normalize self around `targeted_sum`.","sig":null,"attributes":[{"value":"/ Normalize self around `targeted_sum`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2948,"byte_end":2989,"line_start":94,"line_end":94,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2991,"byte_end":2994,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ Only returns `Ok` if the new sum of results is guaranteed to be equal to `targeted_sum`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":2996,"byte_end":3088,"line_start":96,"line_end":96,"column_start":2,"column_end":94}},{"value":"/ Else, returns an error explaining why it failed to do so.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":3090,"byte_end":3151,"line_start":97,"line_end":97,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":425},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5790,"byte_end":5799,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"normalize","qualname":"::normalize","value":"pub fn normalize<T>(&[T], T) -> Result<Vec<T>, &'static str> where T: Clone +\nCopy + Ord + BaseArithmetic + Unsigned + Debug","parent":null,"children":[],"decl_id":null,"docs":" Normalize `input` so that the sum of all elements reaches `targeted_sum`.","sig":null,"attributes":[{"value":"/ Normalize `input` so that the sum of all elements reaches `targeted_sum`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":3951,"byte_end":4028,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4029,"byte_end":4032,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ This implementation is currently in a balanced position between being performant and accurate.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4033,"byte_end":4131,"line_start":126,"line_end":126,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4132,"byte_end":4135,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ 1. We prefer storing original indices, and sorting the `input` only once. This will save the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4136,"byte_end":4232,"line_start":128,"line_end":128,"column_start":1,"column_end":97}},{"value":"/    cost of sorting per round at the cost of a little bit of memory.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4233,"byte_end":4304,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/ 2. The granularity of increment/decrements is determined by the number of elements in `input`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4305,"byte_end":4402,"line_start":130,"line_end":130,"column_start":1,"column_end":98}},{"value":"/    and their sum difference with `targeted_sum`, namely `diff = diff(sum(input), target_sum)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4403,"byte_end":4501,"line_start":131,"line_end":131,"column_start":1,"column_end":99}},{"value":"/    This value is then distributed into `per_round = diff / input.len()` and `leftover = diff %","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4502,"byte_end":4600,"line_start":132,"line_end":132,"column_start":1,"column_end":99}},{"value":"/    round`. First, per_round is applied to all elements of input, and then we move to leftover,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4601,"byte_end":4699,"line_start":133,"line_end":133,"column_start":1,"column_end":99}},{"value":"/    in which case we add/subtract 1 by 1 until `leftover` is depleted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4700,"byte_end":4773,"line_start":134,"line_end":134,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4774,"byte_end":4777,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ When the sum is less than the target, the above approach always holds. In this case, then each","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4778,"byte_end":4876,"line_start":136,"line_end":136,"column_start":1,"column_end":99}},{"value":"/ individual element is also less than target. Thus, by adding `per_round` to each item, neither","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4877,"byte_end":4975,"line_start":137,"line_end":137,"column_start":1,"column_end":99}},{"value":"/ of them can overflow the numeric bound of `T`. In fact, neither of the can go beyond","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":4976,"byte_end":5064,"line_start":138,"line_end":138,"column_start":1,"column_end":89}},{"value":"/ `target_sum`*.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5065,"byte_end":5083,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5084,"byte_end":5087,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ If sum is more than target, there is small twist. The subtraction of `per_round`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5088,"byte_end":5172,"line_start":141,"line_end":141,"column_start":1,"column_end":85}},{"value":"/ form each element might go below zero. In this case, we saturate and add the error to the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5173,"byte_end":5266,"line_start":142,"line_end":142,"column_start":1,"column_end":94}},{"value":"/ `leftover` value. This ensures that the result will always stay accurate, yet it might cause the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5267,"byte_end":5367,"line_start":143,"line_end":143,"column_start":1,"column_end":101}},{"value":"/ execution to become increasingly slow, since leftovers are applied one by one.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5368,"byte_end":5450,"line_start":144,"line_end":144,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5451,"byte_end":5454,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ All in all, the complicated case above is rare to happen in all substrate use cases, hence we","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5455,"byte_end":5552,"line_start":146,"line_end":146,"column_start":1,"column_end":98}},{"value":"/ opt for it due to its simplicity.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5553,"byte_end":5590,"line_start":147,"line_end":147,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5591,"byte_end":5594,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This function will return an error is if length of `input` cannot fit in `T`, or if `sum(input)`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5595,"byte_end":5695,"line_start":149,"line_end":149,"column_start":1,"column_end":101}},{"value":"/ cannot fit inside `T`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5696,"byte_end":5722,"line_start":150,"line_end":150,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5723,"byte_end":5726,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * This proof is used in the implementation as well.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":5727,"byte_end":5782,"line_start":152,"line_end":152,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18349,"byte_end":18356,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29111,"byte_end":29118,"line_start":431,"line_end":431,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29480,"byte_end":29487,"line_start":449,"line_end":449,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29583,"byte_end":29590,"line_start":455,"line_end":455,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29608,"byte_end":29615,"line_start":457,"line_end":457,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30308,"byte_end":30315,"line_start":481,"line_end":481,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30425,"byte_end":30432,"line_start":487,"line_end":487,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30540,"byte_end":30547,"line_start":494,"line_end":494,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30677,"byte_end":30684,"line_start":501,"line_end":501,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30788,"byte_end":30795,"line_start":508,"line_end":508,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":31931,"byte_end":31938,"line_start":555,"line_end":555,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":43927,"byte_end":43928,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44356,"byte_end":44357,"line_start":80,"line_end":80,"column_start":66,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44574,"byte_end":44575,"line_start":85,"line_end":85,"column_start":59,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45242,"byte_end":45243,"line_start":101,"line_end":101,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45427,"byte_end":45428,"line_start":107,"line_end":107,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46399,"byte_end":46400,"line_start":132,"line_end":132,"column_start":105,"column_end":106},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":48137,"byte_end":48138,"line_start":187,"line_end":187,"column_start":40,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":97444,"byte_end":97448,"line_start":299,"line_end":299,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140295,"byte_end":140306,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":143472,"byte_end":143483,"line_start":125,"line_end":125,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":143588,"byte_end":143599,"line_start":131,"line_end":131,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":144104,"byte_end":144115,"line_start":149,"line_end":149,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1999,"byte_end":2000,"line_start":61,"line_end":61,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":3598,"byte_end":3601,"line_start":115,"line_end":115,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1104,"byte_end":1111,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1121,"byte_end":1135,"line_start":37,"line_end":37,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":74}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1145,"byte_end":1151,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":88}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":18349,"byte_end":18356,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29111,"byte_end":29118,"line_start":431,"line_end":431,"column_start":29,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29480,"byte_end":29487,"line_start":449,"line_end":449,"column_start":20,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":1764}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29583,"byte_end":29590,"line_start":455,"line_end":455,"column_start":13,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":29608,"byte_end":29615,"line_start":457,"line_end":457,"column_start":14,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30308,"byte_end":30315,"line_start":481,"line_end":481,"column_start":21,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":1801}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30425,"byte_end":30432,"line_start":487,"line_end":487,"column_start":19,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30540,"byte_end":30547,"line_start":494,"line_end":494,"column_start":19,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":2108}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30677,"byte_end":30684,"line_start":501,"line_end":501,"column_start":19,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":2113}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":30788,"byte_end":30795,"line_start":508,"line_end":508,"column_start":15,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":432},"to":{"krate":18,"index":301}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/biguint.rs","byte_start":31931,"byte_end":31938,"line_start":555,"line_end":555,"column_start":23,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42021,"byte_end":42025,"line_start":34,"line_end":34,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42033,"byte_end":42037,"line_start":35,"line_end":35,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":18,"index":301},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42040,"byte_end":42043,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"kind":"SuperTrait","from":{"krate":18,"index":311},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42046,"byte_end":42063,"line_start":35,"line_end":35,"column_start":15,"column_end":32},"kind":"SuperTrait","from":{"krate":26,"index":4},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42067,"byte_end":42070,"line_start":36,"line_end":36,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2103},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42094,"byte_end":42103,"line_start":36,"line_end":36,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2134},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42113,"byte_end":42116,"line_start":37,"line_end":37,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2108},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42140,"byte_end":42149,"line_start":37,"line_end":37,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2138},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42159,"byte_end":42162,"line_start":38,"line_end":38,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2113},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42186,"byte_end":42195,"line_start":38,"line_end":38,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2142},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42205,"byte_end":42208,"line_start":39,"line_end":39,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2118},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42232,"byte_end":42241,"line_start":39,"line_end":39,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2146},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42251,"byte_end":42254,"line_start":40,"line_end":40,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2124},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42278,"byte_end":42287,"line_start":40,"line_end":40,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2150},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42297,"byte_end":42300,"line_start":41,"line_end":41,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2174},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42323,"byte_end":42326,"line_start":41,"line_end":41,"column_start":28,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2180},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42350,"byte_end":42360,"line_start":42,"line_end":42,"column_start":2,"column_end":12},"kind":"SuperTrait","from":{"krate":18,"index":380},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42363,"byte_end":42373,"line_start":42,"line_end":42,"column_start":15,"column_end":25},"kind":"SuperTrait","from":{"krate":18,"index":383},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42376,"byte_end":42386,"line_start":42,"line_end":42,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":18,"index":366},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42389,"byte_end":42399,"line_start":42,"line_end":42,"column_start":41,"column_end":51},"kind":"SuperTrait","from":{"krate":18,"index":369},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42402,"byte_end":42412,"line_start":42,"line_end":42,"column_start":54,"column_end":64},"kind":"SuperTrait","from":{"krate":18,"index":371},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42415,"byte_end":42425,"line_start":42,"line_end":42,"column_start":67,"column_end":77},"kind":"SuperTrait","from":{"krate":18,"index":373},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42428,"byte_end":42438,"line_start":42,"line_end":42,"column_start":80,"column_end":90},"kind":"SuperTrait","from":{"krate":0,"index":148},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42442,"byte_end":42452,"line_start":43,"line_end":43,"column_start":2,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":1801},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42461,"byte_end":42464,"line_start":43,"line_end":43,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42467,"byte_end":42474,"line_start":43,"line_end":43,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42477,"byte_end":42487,"line_start":43,"line_end":43,"column_start":37,"column_end":47},"kind":"SuperTrait","from":{"krate":20,"index":494},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42490,"byte_end":42495,"line_start":43,"line_end":43,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42499,"byte_end":42506,"line_start":44,"line_end":44,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42513,"byte_end":42520,"line_start":44,"line_end":44,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42527,"byte_end":42534,"line_start":44,"line_end":44,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42542,"byte_end":42549,"line_start":44,"line_end":44,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42557,"byte_end":42564,"line_start":44,"line_end":44,"column_start":60,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42572,"byte_end":42579,"line_start":44,"line_end":44,"column_start":75,"column_end":82},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42588,"byte_end":42595,"line_start":45,"line_end":45,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42603,"byte_end":42610,"line_start":45,"line_end":45,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42618,"byte_end":42625,"line_start":45,"line_end":45,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42634,"byte_end":42641,"line_start":45,"line_end":45,"column_start":48,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42650,"byte_end":42657,"line_start":45,"line_end":45,"column_start":64,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42667,"byte_end":42674,"line_start":45,"line_end":45,"column_start":81,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42685,"byte_end":42704,"line_start":46,"line_end":46,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42711,"byte_end":42730,"line_start":46,"line_end":46,"column_start":28,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":135},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42738,"byte_end":42757,"line_start":47,"line_end":47,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42765,"byte_end":42784,"line_start":47,"line_end":47,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":135},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42793,"byte_end":42812,"line_start":48,"line_end":48,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42820,"byte_end":42839,"line_start":48,"line_end":48,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":135},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42848,"byte_end":42867,"line_start":49,"line_end":49,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42875,"byte_end":42894,"line_start":49,"line_end":49,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":135},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42903,"byte_end":42922,"line_start":50,"line_end":50,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":42931,"byte_end":42950,"line_start":50,"line_end":50,"column_start":30,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":135},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":43927,"byte_end":43928,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":125},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44248,"byte_end":44262,"line_start":78,"line_end":78,"column_start":25,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":123},"to":{"krate":0,"index":126}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44265,"byte_end":44269,"line_start":78,"line_end":78,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":126}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44277,"byte_end":44281,"line_start":78,"line_end":78,"column_start":54,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":126}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44356,"byte_end":44357,"line_start":80,"line_end":80,"column_start":66,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":128},"to":{"krate":0,"index":126}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44488,"byte_end":44500,"line_start":83,"line_end":83,"column_start":33,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":126},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44503,"byte_end":44511,"line_start":83,"line_end":83,"column_start":48,"column_end":56},"kind":"SuperTrait","from":{"krate":18,"index":611},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44574,"byte_end":44575,"line_start":85,"line_end":85,"column_start":59,"column_end":60},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":131},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":44759,"byte_end":44764,"line_start":89,"line_end":89,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45062,"byte_end":45067,"line_start":96,"line_end":96,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":135}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45242,"byte_end":45243,"line_start":101,"line_end":101,"column_start":76,"column_end":77},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":45427,"byte_end":45428,"line_start":107,"line_end":107,"column_start":76,"column_end":77},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":135}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":46399,"byte_end":46400,"line_start":132,"line_end":132,"column_start":105,"column_end":106},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":154},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/traits.rs","byte_start":48137,"byte_end":48138,"line_start":187,"line_end":187,"column_start":40,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":167},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49438,"byte_end":49443,"line_start":37,"line_end":37,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49446,"byte_end":49456,"line_start":37,"line_end":37,"column_start":10,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":148},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49459,"byte_end":49463,"line_start":37,"line_end":37,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2048},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49466,"byte_end":49473,"line_start":37,"line_end":37,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2026},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49476,"byte_end":49478,"line_start":37,"line_end":37,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1769},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49481,"byte_end":49490,"line_start":37,"line_end":37,"column_start":45,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":1764},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49493,"byte_end":49496,"line_start":37,"line_end":37,"column_start":57,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49499,"byte_end":49509,"line_start":37,"line_end":37,"column_start":63,"column_end":73},"kind":"SuperTrait","from":{"krate":2,"index":1801},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49512,"byte_end":49519,"line_start":37,"line_end":37,"column_start":76,"column_end":83},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/per_things.rs","byte_start":49527,"byte_end":49532,"line_start":37,"line_end":37,"column_start":91,"column_end":96},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":193}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89074,"byte_end":89078,"line_start":33,"line_end":33,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2048},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89081,"byte_end":89086,"line_start":33,"line_end":33,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1736},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89089,"byte_end":89096,"line_start":33,"line_end":33,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89099,"byte_end":89103,"line_start":33,"line_end":33,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":18,"index":301},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89106,"byte_end":89116,"line_start":33,"line_end":33,"column_start":62,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":148},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89120,"byte_end":89130,"line_start":34,"line_end":34,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":1801},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89133,"byte_end":89152,"line_start":34,"line_end":34,"column_start":17,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":135},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89161,"byte_end":89168,"line_start":34,"line_end":34,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1963},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89177,"byte_end":89187,"line_start":34,"line_end":34,"column_start":61,"column_end":71},"kind":"SuperTrait","from":{"krate":18,"index":378},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89912,"byte_end":89917,"line_start":55,"line_end":55,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89920,"byte_end":89924,"line_start":55,"line_end":55,"column_start":10,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2048},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89927,"byte_end":89934,"line_start":55,"line_end":55,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2026},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89937,"byte_end":89942,"line_start":55,"line_end":55,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89946,"byte_end":89956,"line_start":56,"line_end":56,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":148},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89959,"byte_end":89966,"line_start":56,"line_end":56,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89970,"byte_end":89972,"line_start":57,"line_end":57,"column_start":4,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1769},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89975,"byte_end":89984,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":1764},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89987,"byte_end":89990,"line_start":57,"line_end":57,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":89993,"byte_end":90003,"line_start":57,"line_end":57,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1801},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90007,"byte_end":90017,"line_start":58,"line_end":58,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":18,"index":369},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90020,"byte_end":90030,"line_start":58,"line_end":58,"column_start":17,"column_end":27},"kind":"SuperTrait","from":{"krate":18,"index":366},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90033,"byte_end":90043,"line_start":58,"line_end":58,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":18,"index":371},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90046,"byte_end":90056,"line_start":58,"line_end":58,"column_start":43,"column_end":53},"kind":"SuperTrait","from":{"krate":18,"index":373},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90060,"byte_end":90063,"line_start":59,"line_end":59,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":2103},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90066,"byte_end":90069,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2108},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90072,"byte_end":90075,"line_start":59,"line_end":59,"column_start":16,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2118},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":90078,"byte_end":90081,"line_start":59,"line_end":59,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2113},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/fixed_point.rs","byte_start":97444,"byte_end":97448,"line_start":299,"line_end":299,"column_start":40,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":140295,"byte_end":140306,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":143472,"byte_end":143483,"line_start":125,"line_end":125,"column_start":21,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1378},"to":{"krate":2,"index":1801}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":143588,"byte_end":143599,"line_start":131,"line_end":131,"column_start":14,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1378},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/rational128.rs","byte_start":144104,"byte_end":144115,"line_start":149,"line_end":149,"column_start":20,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1378},"to":{"krate":2,"index":1764}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":1999,"byte_end":2000,"line_start":61,"line_end":61,"column_start":29,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":410}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.1/src/lib.rs","byte_start":3598,"byte_end":3601,"line_start":115,"line_end":115,"column_start":39,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":416}}]}