{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","atomic","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=1cb9333bbb52fca8","-C","extra-filename=-1cb9333bbb52fca8","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libatomic-1cb9333bbb52fca8.rmeta"},"prelude":{"crate_id":{"name":"atomic","disambiguator":[6329451411369668982,17089647864464400419]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":333,"byte_end":26451,"line_start":8,"line_end":735,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":6282},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1751,"byte_end":1756,"line_start":44,"line_end":44,"column_start":30,"column_end":35},"alias_span":null,"name":"fence","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":32090},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1758,"byte_end":1766,"line_start":44,"line_end":44,"column_start":37,"column_end":45},"alias_span":null,"name":"Ordering","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":333,"byte_end":26451,"line_start":8,"line_end":735,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":58},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":123},{"krate":0,"index":148},{"krate":0,"index":154},{"krate":0,"index":160},{"krate":0,"index":166},{"krate":0,"index":172},{"krate":0,"index":178},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":214},{"krate":0,"index":220},{"krate":0,"index":226},{"krate":0,"index":232},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199}],"decl_id":null,"docs":" Generic `Atomic<T>` wrapper type","sig":null,"attributes":[{"value":"/ Generic `Atomic<T>` wrapper type","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":333,"byte_end":369,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":370,"byte_end":373,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Atomic types provide primitive shared-memory communication between","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":374,"byte_end":444,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ threads, and are the building blocks of other concurrent types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":445,"byte_end":512,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":513,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This library defines a generic atomic wrapper type `Atomic<T>` for all","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":517,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ `T: Copy` types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":592,"byte_end":612,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ Atomic types present operations that, when used correctly, synchronize","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":613,"byte_end":687,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ updates between threads.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":688,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":717,"byte_end":720,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Each method takes an `Ordering` which represents the strength of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":721,"byte_end":789,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ the memory barrier for that operation. These orderings are the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":790,"byte_end":856,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/ same as [LLVM atomic orderings][1].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":857,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":901,"byte_end":982,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":983,"byte_end":986,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Atomic variables are safe to share between threads (they implement `Sync`)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":987,"byte_end":1065,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ but they do not themselves provide the mechanism for sharing. The most","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1066,"byte_end":1140,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ common way to share an atomic variable is to put it into an `Arc` (an","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1141,"byte_end":1214,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ atomically-reference-counted shared pointer).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1215,"byte_end":1264,"line_start":27,"line_end":27,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1265,"byte_end":1268,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Most atomic types may be stored in static variables, initialized using","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1269,"byte_end":1343,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ the `const fn` constructors (only available on nightly). Atomic statics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1344,"byte_end":1419,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ are often used for lazy global initialization.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1420,"byte_end":1470,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"warn(missing_docs)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1472,"byte_end":1494,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1495,"byte_end":1505,"line_start":34,"line_end":34,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2003,"byte_end":2009,"line_start":57,"line_end":57,"column_start":12,"column_end":18},"name":"Atomic","qualname":"::Atomic","value":"Atomic {  }","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" A generic atomic wrapper type which allows an object to be safely shared\n between threads.\n","sig":null,"attributes":[{"value":"/ A generic atomic wrapper type which allows an object to be safely shared","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1894,"byte_end":1970,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/ between threads.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":1971,"byte_end":1991,"line_start":56,"line_end":56,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3229,"byte_end":3232,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Atomic<T>>::new","value":"pub fn new(T) -> Atomic<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Atomic`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Atomic`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3139,"byte_end":3166,"line_start":98,"line_end":98,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3171,"byte_end":3180,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3185,"byte_end":3217,"line_start":100,"line_end":100,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4062,"byte_end":4074,"line_start":125,"line_end":125,"column_start":12,"column_end":24},"name":"is_lock_free","qualname":"<Atomic<T>>::is_lock_free","value":"pub fn is_lock_free() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if `Atomic` objects of this type are lock-free.","sig":null,"attributes":[{"value":"/ Checks if `Atomic` objects of this type are lock-free.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3733,"byte_end":3791,"line_start":118,"line_end":118,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3796,"byte_end":3799,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If an `Atomic` is not lock-free then it may be implemented using locks","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3804,"byte_end":3878,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ internally, which makes it unsuitable for some situations (such as","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3883,"byte_end":3953,"line_start":121,"line_end":121,"column_start":5,"column_end":75}},{"value":"/ communicating with a signal handler).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":3958,"byte_end":3999,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4004,"byte_end":4013,"line_start":123,"line_end":123,"column_start":5,"column_end":14}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4018,"byte_end":4050,"line_start":124,"line_end":124,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4363,"byte_end":4370,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Atomic<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying type.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4138,"byte_end":4193,"line_start":129,"line_end":129,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4198,"byte_end":4201,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This is safe because the mutable reference guarantees that no other threads are","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4206,"byte_end":4289,"line_start":131,"line_end":131,"column_start":5,"column_end":88}},{"value":"/ concurrently accessing the atomic data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4294,"byte_end":4337,"line_start":132,"line_end":132,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4342,"byte_end":4351,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4671,"byte_end":4681,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Atomic<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the atomic and returns the contained value.","sig":null,"attributes":[{"value":"/ Consumes the atomic and returns the contained value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4443,"byte_end":4499,"line_start":138,"line_end":138,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4504,"byte_end":4507,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This is safe because passing `self` by value guarantees that no other threads are","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4512,"byte_end":4597,"line_start":140,"line_end":140,"column_start":5,"column_end":90}},{"value":"/ concurrently accessing the atomic data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4602,"byte_end":4645,"line_start":141,"line_end":141,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4650,"byte_end":4659,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4996,"byte_end":5000,"line_start":156,"line_end":156,"column_start":12,"column_end":16},"name":"load","qualname":"<Atomic<T>>::load","value":"pub fn load(&Self, Ordering) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads a value from the `Atomic`.","sig":null,"attributes":[{"value":"/ Loads a value from the `Atomic`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4734,"byte_end":4770,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4775,"byte_end":4778,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ `load` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4783,"byte_end":4858,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/ of this operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4863,"byte_end":4885,"line_start":150,"line_end":150,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4890,"byte_end":4893,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4898,"byte_end":4910,"line_start":152,"line_end":152,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4915,"byte_end":4918,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Panics if `order` is `Release` or `AcqRel`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4923,"byte_end":4970,"line_start":154,"line_end":154,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":4975,"byte_end":4984,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5364,"byte_end":5369,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"store","qualname":"<Atomic<T>>::store","value":"pub fn store(&Self, T, Ordering)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic`.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5100,"byte_end":5137,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5142,"byte_end":5145,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ `store` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5150,"byte_end":5226,"line_start":162,"line_end":162,"column_start":5,"column_end":81}},{"value":"/ of this operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5231,"byte_end":5253,"line_start":163,"line_end":163,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5258,"byte_end":5261,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5266,"byte_end":5278,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5283,"byte_end":5286,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Panics if `order` is `Acquire` or `AcqRel`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5291,"byte_end":5338,"line_start":167,"line_end":167,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5343,"byte_end":5352,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5702,"byte_end":5706,"line_start":180,"line_end":180,"column_start":12,"column_end":16},"name":"swap","qualname":"<Atomic<T>>::swap","value":"pub fn swap(&Self, T, Ordering) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic`, returning the old value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic`, returning the old value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5499,"byte_end":5561,"line_start":175,"line_end":175,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5566,"byte_end":5569,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ `swap` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5574,"byte_end":5649,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ of this operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5654,"byte_end":5676,"line_start":178,"line_end":178,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5681,"byte_end":5690,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6549,"byte_end":6565,"line_start":197,"line_end":197,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<Atomic<T>>::compare_exchange","value":"pub fn compare_exchange(&Self, T, T, Ordering, Ordering) -> Result<T, T>","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic` if the current value is the same as the\n `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic` if the current value is the same as the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5819,"byte_end":5895,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/ `current` value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5900,"byte_end":5920,"line_start":185,"line_end":185,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5925,"byte_end":5928,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ The return value is a result indicating whether the new value was","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":5933,"byte_end":6002,"line_start":187,"line_end":187,"column_start":5,"column_end":74}},{"value":"/ written and containing the previous value. On success this value is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6007,"byte_end":6078,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/ guaranteed to be equal to `new`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6083,"byte_end":6119,"line_start":189,"line_end":189,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6124,"byte_end":6127,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the memory","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6132,"byte_end":6208,"line_start":191,"line_end":191,"column_start":5,"column_end":81}},{"value":"/ ordering of this operation. The first describes the required ordering if","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6213,"byte_end":6289,"line_start":192,"line_end":192,"column_start":5,"column_end":81}},{"value":"/ the operation succeeds while the second describes the required ordering","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6294,"byte_end":6369,"line_start":193,"line_end":193,"column_start":5,"column_end":80}},{"value":"/ when the operation fails. The failure ordering can't be `Acquire` or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6374,"byte_end":6446,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ `AcqRel` and must be equivalent or weaker than the success ordering.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6451,"byte_end":6523,"line_start":195,"line_end":195,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6528,"byte_end":6537,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7672,"byte_end":7693,"line_start":222,"line_end":222,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<Atomic<T>>::compare_exchange_weak","value":"pub fn compare_exchange_weak(&Self, T, T, Ordering, Ordering) -> Result<T, T>","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic` if the current value is the same as the\n `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic` if the current value is the same as the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6801,"byte_end":6877,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ `current` value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6882,"byte_end":6902,"line_start":208,"line_end":208,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6907,"byte_end":6910,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Unlike `compare_exchange`, this function is allowed to spuriously fail","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6915,"byte_end":6989,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ even when the comparison succeeds, which can result in more efficient","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":6994,"byte_end":7067,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ code on some platforms. The return value is a result indicating whether","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7072,"byte_end":7147,"line_start":212,"line_end":212,"column_start":5,"column_end":80}},{"value":"/ the new value was written and containing the previous value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7152,"byte_end":7216,"line_start":213,"line_end":213,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7221,"byte_end":7224,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the memory","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7229,"byte_end":7305,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ ordering of this operation. The first describes the required ordering if","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7310,"byte_end":7386,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ the operation succeeds while the second describes the required ordering","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7391,"byte_end":7466,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ when the operation fails. The failure ordering can't be `Acquire` or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7471,"byte_end":7543,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ `AcqRel` and must be equivalent or weaker than the success ordering.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7548,"byte_end":7620,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ success ordering.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7625,"byte_end":7646,"line_start":220,"line_end":220,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7651,"byte_end":7660,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8207,"byte_end":8216,"line_start":241,"line_end":241,"column_start":12,"column_end":21},"name":"fetch_and","qualname":"<Atomic<bool>>::fetch_and","value":"pub fn fetch_and(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"and\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"and\" with a boolean value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7956,"byte_end":7995,"line_start":234,"line_end":234,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8000,"byte_end":8003,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"and\" operation on the current value and the argument","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8008,"byte_end":8084,"line_start":236,"line_end":236,"column_start":5,"column_end":81}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8089,"byte_end":8137,"line_start":237,"line_end":237,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8142,"byte_end":8145,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8150,"byte_end":8181,"line_start":239,"line_end":239,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8186,"byte_end":8195,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8583,"byte_end":8591,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"name":"fetch_or","qualname":"<Atomic<bool>>::fetch_or","value":"pub fn fetch_or(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"or\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"or\" with a boolean value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8334,"byte_end":8372,"line_start":245,"line_end":245,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8377,"byte_end":8380,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"or\" operation on the current value and the argument","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8385,"byte_end":8460,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8465,"byte_end":8513,"line_start":248,"line_end":248,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8518,"byte_end":8521,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8526,"byte_end":8557,"line_start":250,"line_end":250,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8562,"byte_end":8571,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8959,"byte_end":8968,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"name":"fetch_xor","qualname":"<Atomic<bool>>::fetch_xor","value":"pub fn fetch_xor(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"xor\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"xor\" with a boolean value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8708,"byte_end":8747,"line_start":256,"line_end":256,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8752,"byte_end":8755,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"xor\" operation on the current value and the argument","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8760,"byte_end":8836,"line_start":258,"line_end":258,"column_start":5,"column_end":81}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8841,"byte_end":8889,"line_start":259,"line_end":259,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8894,"byte_end":8897,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8902,"byte_end":8933,"line_start":261,"line_end":261,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":8938,"byte_end":8947,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/fallback.rs","byte_start":27203,"byte_end":27211,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/fallback.rs","byte_start":29774,"byte_end":29783,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2122,"byte_end":2128,"line_start":62,"line_end":62,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2595,"byte_end":2601,"line_start":73,"line_end":73,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2737,"byte_end":2743,"line_start":80,"line_end":80,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2934,"byte_end":2940,"line_start":88,"line_end":88,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7937,"byte_end":7943,"line_start":233,"line_end":233,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/fallback.rs","byte_start":27203,"byte_end":27211,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/fallback.rs","byte_start":29774,"byte_end":29783,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":31},"to":{"krate":1,"index":2257}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2122,"byte_end":2128,"line_start":62,"line_end":62,"column_start":38,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":101},"to":{"krate":1,"index":2050}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2595,"byte_end":2601,"line_start":73,"line_end":73,"column_start":37,"column_end":43},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":101},"to":{"krate":1,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2737,"byte_end":2743,"line_start":80,"line_end":80,"column_start":43,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":101},"to":{"krate":1,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":2934,"byte_end":2940,"line_start":88,"line_end":88,"column_start":15,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.4.6/src/lib.rs","byte_start":7937,"byte_end":7943,"line_start":233,"line_end":233,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}}]}