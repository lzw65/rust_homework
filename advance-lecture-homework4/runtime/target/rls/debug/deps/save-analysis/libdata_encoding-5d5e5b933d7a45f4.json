{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","data_encoding","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=5d5e5b933d7a45f4","-C","extra-filename=-5d5e5b933d7a45f4","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libdata_encoding-5d5e5b933d7a45f4.rmeta"},"prelude":{"crate_id":{"name":"data_encoding","disambiguator":[15555597864979115537,2334091982028367454]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":0,"byte_end":106788,"line_start":1,"line_end":2397,"column_start":1,"column_end":3}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":0,"byte_end":106788,"line_start":1,"line_end":2397,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":425},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":213},{"krate":0,"index":209},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":220},{"krate":0,"index":216},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":227},{"krate":0,"index":223},{"krate":0,"index":232},{"krate":0,"index":236},{"krate":0,"index":234},{"krate":0,"index":230},{"krate":0,"index":239},{"krate":0,"index":243},{"krate":0,"index":241},{"krate":0,"index":237},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":248},{"krate":0,"index":244},{"krate":0,"index":253},{"krate":0,"index":257},{"krate":0,"index":255},{"krate":0,"index":251},{"krate":0,"index":260},{"krate":0,"index":264},{"krate":0,"index":262},{"krate":0,"index":258},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":267},{"krate":0,"index":17},{"krate":0,"index":270},{"krate":0,"index":277},{"krate":0,"index":274},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":279},{"krate":0,"index":297},{"krate":0,"index":296},{"krate":0,"index":294},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":33},{"krate":0,"index":299},{"krate":0,"index":312},{"krate":0,"index":311},{"krate":0,"index":309},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":314},{"krate":0,"index":328},{"krate":0,"index":327},{"krate":0,"index":325},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":87},{"krate":0,"index":92},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":114},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":132},{"krate":0,"index":330},{"krate":0,"index":344},{"krate":0,"index":343},{"krate":0,"index":341},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":346},{"krate":0,"index":358},{"krate":0,"index":356},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":360},{"krate":0,"index":365},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":372},{"krate":0,"index":370},{"krate":0,"index":374},{"krate":0,"index":384},{"krate":0,"index":382},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":386},{"krate":0,"index":409},{"krate":0,"index":408},{"krate":0,"index":406},{"krate":0,"index":167},{"krate":0,"index":411},{"krate":0,"index":417},{"krate":0,"index":416},{"krate":0,"index":414},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"decl_id":null,"docs":" Efficient and customizable data-encoding functions like base64, base32, and hex","sig":null,"attributes":[{"value":"/ Efficient and customizable data-encoding functions like base64, base32, and hex","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":0,"byte_end":83,"line_start":1,"line_end":1,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":84,"byte_end":87,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This [crate] provides little-endian ASCII base-conversion encodings for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88,"byte_end":163,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ bases of size 2, 4, 8, 16, 32, and 64. It supports:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":164,"byte_end":219,"line_start":4,"line_end":4,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":220,"byte_end":223,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ - [padding] for streaming","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":224,"byte_end":253,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/ - canonical encodings (e.g. [trailing bits] are checked)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":254,"byte_end":314,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ - in-place [encoding] and [decoding] functions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":315,"byte_end":365,"line_start":8,"line_end":8,"column_start":1,"column_end":51}},{"value":"/ - partial [decoding] functions (e.g. for error recovery)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":366,"byte_end":426,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ - character [translation] (e.g. for case-insensitivity)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":427,"byte_end":486,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ - most and least significant [bit-order]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":487,"byte_end":531,"line_start":11,"line_end":11,"column_start":1,"column_end":45}},{"value":"/ - [ignoring] characters when decoding (e.g. for skipping newlines)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":532,"byte_end":602,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/ - [wrapping] the output when encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":603,"byte_end":644,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/ - no-std environments with `default-features = false, features = [\"alloc\"]`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":645,"byte_end":724,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ - no-alloc environments with `default-features = false`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":725,"byte_end":784,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":785,"byte_end":788,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ You may use the [binary] or the [website] to play around.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":789,"byte_end":850,"line_start":17,"line_end":17,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":851,"byte_end":854,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":855,"byte_end":869,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":870,"byte_end":873,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This crate provides predefined encodings as [constants]. These constants are of type","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":874,"byte_end":962,"line_start":21,"line_end":21,"column_start":1,"column_end":89}},{"value":"/ [`Encoding`]. This type provides encoding and decoding functions with in-place or allocating","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":963,"byte_end":1059,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ variants. Here is an example using the allocating encoding function of [`BASE64`]:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1060,"byte_end":1146,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1147,"byte_end":1150,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1151,"byte_end":1162,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1163,"byte_end":1193,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(BASE64.encode(b\"Hello world\"), \"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1194,"byte_end":1260,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1261,"byte_end":1268,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1269,"byte_end":1272,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Here is an example using the in-place decoding function of [`BASE32`]:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1273,"byte_end":1347,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1348,"byte_end":1351,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1352,"byte_end":1363,"line_start":32,"line_end":32,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::BASE32;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1364,"byte_end":1394,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let input = b\"JBSWY3DPEB3W64TMMQ======\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1395,"byte_end":1439,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/ let mut output = vec![0; BASE32.decode_len(input.len()).unwrap()];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1440,"byte_end":1510,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/ let len = BASE32.decode_mut(input, &mut output).unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1511,"byte_end":1572,"line_start":36,"line_end":36,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(&output[0 .. len], b\"Hello world\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1573,"byte_end":1623,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1624,"byte_end":1631,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1632,"byte_end":1635,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ You are not limited to the predefined encodings. You may define your own encodings (with the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1636,"byte_end":1732,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/ same correctness and performance properties as the predefined ones) using the [`Specification`]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1733,"byte_end":1832,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"/ type:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1833,"byte_end":1842,"line_start":42,"line_end":42,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1847,"byte_end":1858,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::Specification;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1859,"byte_end":1896,"line_start":45,"line_end":45,"column_start":1,"column_end":38}},{"value":"/ let hex = {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1897,"byte_end":1912,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1913,"byte_end":1957,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":1958,"byte_end":2008,"line_start":48,"line_end":48,"column_start":1,"column_end":51}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2009,"byte_end":2041,"line_start":49,"line_end":49,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2042,"byte_end":2048,"line_start":50,"line_end":50,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(hex.encode(b\"hello\"), \"68656c6c6f\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2049,"byte_end":2100,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2101,"byte_end":2108,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2109,"byte_end":2112,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ You may use the [macro] library to define a compile-time custom encoding:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2113,"byte_end":2190,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2191,"byte_end":2194,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2195,"byte_end":2213,"line_start":56,"line_end":56,"column_start":1,"column_end":19}},{"value":"/ use data_encoding::Encoding;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2214,"byte_end":2246,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ use data_encoding_macro::new_encoding;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2247,"byte_end":2289,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/ const HEX: Encoding = new_encoding!{","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2290,"byte_end":2330,"line_start":59,"line_end":59,"column_start":1,"column_end":41}},{"value":"/     symbols: \"0123456789abcdef\",","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2331,"byte_end":2367,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/     translate_from: \"ABCDEF\",","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2368,"byte_end":2401,"line_start":61,"line_end":61,"column_start":1,"column_end":34}},{"value":"/     translate_to: \"abcdef\",","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2402,"byte_end":2433,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2434,"byte_end":2440,"line_start":63,"line_end":63,"column_start":1,"column_end":7}},{"value":"/ const BASE64: Encoding = new_encoding!{","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2441,"byte_end":2484,"line_start":64,"line_end":64,"column_start":1,"column_end":44}},{"value":"/     symbols: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2485,"byte_end":2569,"line_start":65,"line_end":65,"column_start":1,"column_end":85}},{"value":"/     padding: '=',","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2570,"byte_end":2591,"line_start":66,"line_end":66,"column_start":1,"column_end":22}},{"value":"/ };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2592,"byte_end":2598,"line_start":67,"line_end":67,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2599,"byte_end":2606,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2607,"byte_end":2610,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # Properties","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2611,"byte_end":2627,"line_start":70,"line_end":70,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2628,"byte_end":2631,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ The [`HEXUPPER`], [`BASE32`], [`BASE32HEX`], [`BASE64`], and [`BASE64URL`] predefined encodings","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2632,"byte_end":2731,"line_start":72,"line_end":72,"column_start":1,"column_end":100}},{"value":"/ are conform to [RFC4648].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2732,"byte_end":2761,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2762,"byte_end":2765,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ In general, the encoding and decoding functions satisfy the following properties:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2766,"byte_end":2851,"line_start":75,"line_end":75,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2852,"byte_end":2855,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ - They are deterministic: their output only depends on their input","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2856,"byte_end":2926,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ - They have no side-effects: they do not modify a hidden mutable state","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":2927,"byte_end":3001,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/ - They are correct: encoding then decoding gives the initial data","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3002,"byte_end":3071,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/ - They are canonical (unless [`is_canonical`] returns false): decoding then encoding gives the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3072,"byte_end":3170,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"/   initial data","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3171,"byte_end":3189,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3190,"byte_end":3193,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This last property is usually not satisfied by base64 implementations. This is a matter of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3194,"byte_end":3288,"line_start":83,"line_end":83,"column_start":1,"column_end":95}},{"value":"/ choice and this crate has made the choice to let the user choose. Support for canonical encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3289,"byte_end":3389,"line_start":84,"line_end":84,"column_start":1,"column_end":101}},{"value":"/ as described by the [RFC][canonical] is provided. But it is also possible to disable checking","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3390,"byte_end":3487,"line_start":85,"line_end":85,"column_start":1,"column_end":98}},{"value":"/ trailing bits, to add characters translation, to decode concatenated padded inputs, and to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3488,"byte_end":3582,"line_start":86,"line_end":86,"column_start":1,"column_end":95}},{"value":"/ ignore some characters.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3583,"byte_end":3610,"line_start":87,"line_end":87,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3611,"byte_end":3614,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Since the RFC specifies the encoding function on all inputs and the decoding function on all","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3615,"byte_end":3711,"line_start":89,"line_end":89,"column_start":1,"column_end":97}},{"value":"/ possible encoded outputs, the differences between implementations come from the decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3712,"byte_end":3804,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ function which may be more or less permissive. In this crate, the decoding function of canonical","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3805,"byte_end":3905,"line_start":91,"line_end":91,"column_start":1,"column_end":101}},{"value":"/ encodings rejects all inputs that are not a possible output of the encoding function. Here are","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":3906,"byte_end":4004,"line_start":92,"line_end":92,"column_start":1,"column_end":99}},{"value":"/ some concrete examples of decoding differences between this crate, the `base64` crate, and the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4005,"byte_end":4103,"line_start":93,"line_end":93,"column_start":1,"column_end":99}},{"value":"/ `base64` GNU program:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4104,"byte_end":4129,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4130,"byte_end":4133,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ | Input      | `data-encoding` | `base64`  | GNU `base64`  |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4134,"byte_end":4198,"line_start":96,"line_end":96,"column_start":1,"column_end":65}},{"value":"/ | ---------- | --------------- | --------- | ------------- |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4199,"byte_end":4263,"line_start":97,"line_end":97,"column_start":1,"column_end":65}},{"value":"/ | `AAB=`     | `Trailing(2)`   | `Last(2)` | `\\x00\\x00`    |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4264,"byte_end":4328,"line_start":98,"line_end":98,"column_start":1,"column_end":65}},{"value":"/ | `AA\\nB=`   | `Length(4)`     | `Length`  | `\\x00\\x00`    |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4329,"byte_end":4393,"line_start":99,"line_end":99,"column_start":1,"column_end":65}},{"value":"/ | `AAB`      | `Length(0)`     | `Last(2)` | Invalid input |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4394,"byte_end":4458,"line_start":100,"line_end":100,"column_start":1,"column_end":65}},{"value":"/ | `AAA`      | `Length(0)`     | `[0, 0]`  | Invalid input |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4459,"byte_end":4523,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/ | `A\\rA\\nB=` | `Length(4)`     | `Byte(1)` | Invalid input |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4524,"byte_end":4588,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ | `-_\\r\\n`   | `Symbol(0)`     | `Byte(0)` | Invalid input |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4589,"byte_end":4653,"line_start":103,"line_end":103,"column_start":1,"column_end":65}},{"value":"/ | `AA==AA==` | `[0, 0]`        | `Byte(2)` | `\\x00\\x00`    |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4654,"byte_end":4718,"line_start":104,"line_end":104,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4719,"byte_end":4722,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ We can summarize these discrepancies as follows:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4723,"byte_end":4775,"line_start":106,"line_end":106,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4776,"byte_end":4779,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ | Discrepancy                | `data-encoding` | `base64` | GNU `base64` |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4780,"byte_end":4858,"line_start":108,"line_end":108,"column_start":1,"column_end":79}},{"value":"/ | -------------------------- | --------------- | -------- | ------------ |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4859,"byte_end":4937,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ | Check trailing bits        | Yes             | Yes      | No           |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":4938,"byte_end":5016,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/ | Ignored characters         | None            | None     | `\\n`         |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5017,"byte_end":5095,"line_start":111,"line_end":111,"column_start":1,"column_end":79}},{"value":"/ | Translated characters      | None            | None     | None         |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5096,"byte_end":5174,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/ | Check padding              | Yes             | No       | Yes          |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5175,"byte_end":5253,"line_start":113,"line_end":113,"column_start":1,"column_end":79}},{"value":"/ | Support concatenated input | Yes             | No       | Yes          |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5254,"byte_end":5332,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5333,"byte_end":5336,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ This crate permits to disable checking trailing bits. It permits to ignore some characters. It","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5337,"byte_end":5435,"line_start":116,"line_end":116,"column_start":1,"column_end":99}},{"value":"/ permits to translate characters. It permits to use unpadded encodings. However, for padded","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5436,"byte_end":5530,"line_start":117,"line_end":117,"column_start":1,"column_end":95}},{"value":"/ encodings, support for concatenated inputs cannot be disabled. This is simply because it doesn't","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5531,"byte_end":5631,"line_start":118,"line_end":118,"column_start":1,"column_end":101}},{"value":"/ make sense to use padding if it is not to support concatenated inputs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5632,"byte_end":5706,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5707,"byte_end":5710,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5711,"byte_end":5761,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/ [`BASE32HEX`]: constant.BASE32HEX.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5762,"byte_end":5804,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/ [`BASE32`]: constant.BASE32.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5805,"byte_end":5841,"line_start":123,"line_end":123,"column_start":1,"column_end":37}},{"value":"/ [`BASE64URL`]: constant.BASE64URL.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5842,"byte_end":5884,"line_start":124,"line_end":124,"column_start":1,"column_end":43}},{"value":"/ [`BASE64`]: constant.BASE64.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5885,"byte_end":5921,"line_start":125,"line_end":125,"column_start":1,"column_end":37}},{"value":"/ [`Encoding`]: struct.Encoding.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5922,"byte_end":5960,"line_start":126,"line_end":126,"column_start":1,"column_end":39}},{"value":"/ [`HEXUPPER`]: constant.HEXUPPER.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":5961,"byte_end":6001,"line_start":127,"line_end":127,"column_start":1,"column_end":41}},{"value":"/ [`Specification`]: struct.Specification.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6002,"byte_end":6050,"line_start":128,"line_end":128,"column_start":1,"column_end":49}},{"value":"/ [`is_canonical`]: struct.Encoding.html#method.is_canonical","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6051,"byte_end":6113,"line_start":129,"line_end":129,"column_start":1,"column_end":63}},{"value":"/ [binary]: https://crates.io/crates/data-encoding-bin","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6114,"byte_end":6170,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ [bit-order]: struct.Specification.html#structfield.bit_order","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6171,"byte_end":6235,"line_start":131,"line_end":131,"column_start":1,"column_end":65}},{"value":"/ [canonical]: https://tools.ietf.org/html/rfc4648#section-3.5","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6236,"byte_end":6300,"line_start":132,"line_end":132,"column_start":1,"column_end":65}},{"value":"/ [constants]: index.html#constants","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6301,"byte_end":6338,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/ [crate]: https://crates.io/crates/data-encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6339,"byte_end":6390,"line_start":134,"line_end":134,"column_start":1,"column_end":52}},{"value":"/ [decoding]: struct.Encoding.html#method.decode_mut","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6391,"byte_end":6445,"line_start":135,"line_end":135,"column_start":1,"column_end":55}},{"value":"/ [encoding]: struct.Encoding.html#method.encode_mut","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6446,"byte_end":6500,"line_start":136,"line_end":136,"column_start":1,"column_end":55}},{"value":"/ [ignoring]: struct.Specification.html#structfield.ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6501,"byte_end":6561,"line_start":137,"line_end":137,"column_start":1,"column_end":61}},{"value":"/ [macro]: https://crates.io/crates/data-encoding-macro","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6562,"byte_end":6619,"line_start":138,"line_end":138,"column_start":1,"column_end":58}},{"value":"/ [padding]: struct.Specification.html#structfield.padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6620,"byte_end":6680,"line_start":139,"line_end":139,"column_start":1,"column_end":61}},{"value":"/ [trailing bits]: struct.Specification.html#structfield.check_trailing_bits","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6681,"byte_end":6759,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ [translation]: struct.Specification.html#structfield.translate","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6760,"byte_end":6826,"line_start":141,"line_end":141,"column_start":1,"column_end":67}},{"value":"/ [website]: https://data-encoding.rs","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6827,"byte_end":6866,"line_start":142,"line_end":142,"column_start":1,"column_end":40}},{"value":"/ [wrapping]: struct.Specification.html#structfield.wrap","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6867,"byte_end":6925,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"no_std","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6927,"byte_end":6937,"line_start":145,"line_end":145,"column_start":1,"column_end":11}},{"value":"warn(unused_results, missing_docs)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":6938,"byte_end":6976,"line_start":146,"line_end":146,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":280},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10140,"byte_end":10146,"line_start":281,"line_end":281,"column_start":5,"column_end":11},"name":"Length","qualname":"::DecodeKind::Length","value":"DecodeKind::Length","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Invalid length\n","sig":null,"attributes":[{"value":"/ Invalid length","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10117,"byte_end":10135,"line_start":280,"line_end":280,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":282},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10176,"byte_end":10182,"line_start":284,"line_end":284,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::DecodeKind::Symbol","value":"DecodeKind::Symbol","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Invalid symbol\n","sig":null,"attributes":[{"value":"/ Invalid symbol","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10153,"byte_end":10171,"line_start":283,"line_end":283,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":284},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10220,"byte_end":10228,"line_start":287,"line_end":287,"column_start":5,"column_end":13},"name":"Trailing","qualname":"::DecodeKind::Trailing","value":"DecodeKind::Trailing","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Non-zero trailing bits\n","sig":null,"attributes":[{"value":"/ Non-zero trailing bits","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10189,"byte_end":10215,"line_start":286,"line_end":286,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":286},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10266,"byte_end":10273,"line_start":290,"line_end":290,"column_start":5,"column_end":12},"name":"Padding","qualname":"::DecodeKind::Padding","value":"DecodeKind::Padding","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Invalid padding length\n","sig":null,"attributes":[{"value":"/ Invalid padding length","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10235,"byte_end":10261,"line_start":289,"line_end":289,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":279},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10100,"byte_end":10110,"line_start":279,"line_end":279,"column_start":10,"column_end":20},"name":"DecodeKind","qualname":"::DecodeKind","value":"pub enum DecodeKind {\n\n    /// Invalid length\n    Length,\n\n    /// Invalid symbol\n    Symbol,\n\n    /// Non-zero trailing bits\n    Trailing,\n\n    /// Invalid padding length\n    Padding,\n}","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286}],"decl_id":null,"docs":" Decoding error kind\n","sig":null,"attributes":[{"value":"/ Decoding error kind","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10022,"byte_end":10045,"line_start":277,"line_end":277,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":299},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10809,"byte_end":10820,"line_start":308,"line_end":308,"column_start":12,"column_end":23},"name":"DecodeError","qualname":"::DecodeError","value":"DecodeError { position, kind }","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301}],"decl_id":null,"docs":" Decoding error\n","sig":null,"attributes":[{"value":"/ Decoding error","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10734,"byte_end":10752,"line_start":306,"line_end":306,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":300},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10961,"byte_end":10969,"line_start":312,"line_end":312,"column_start":9,"column_end":17},"name":"position","qualname":"::DecodeError::position","value":"usize","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Error position","sig":null,"attributes":[{"value":"/ Error position","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10827,"byte_end":10845,"line_start":309,"line_end":309,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10850,"byte_end":10853,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ This position is always a valid input position and represents the first encountered error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10858,"byte_end":10952,"line_start":311,"line_end":311,"column_start":5,"column_end":99}}]},{"kind":"Field","id":{"krate":0,"index":301},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11006,"byte_end":11010,"line_start":315,"line_end":315,"column_start":9,"column_end":13},"name":"kind","qualname":"::DecodeError::kind","value":"DecodeKind","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Error kind\n","sig":null,"attributes":[{"value":"/ Error kind","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10983,"byte_end":10997,"line_start":314,"line_end":314,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11388,"byte_end":11401,"line_start":330,"line_end":330,"column_start":12,"column_end":25},"name":"DecodePartial","qualname":"::DecodePartial","value":"DecodePartial { read, written, error }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"decl_id":null,"docs":" Decoding error with partial result\n","sig":null,"attributes":[{"value":"/ Decoding error with partial result","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11293,"byte_end":11331,"line_start":328,"line_end":328,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":315},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11542,"byte_end":11546,"line_start":334,"line_end":334,"column_start":9,"column_end":13},"name":"read","qualname":"::DecodePartial::read","value":"usize","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Number of bytes read from input","sig":null,"attributes":[{"value":"/ Number of bytes read from input","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11408,"byte_end":11443,"line_start":331,"line_end":331,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11448,"byte_end":11451,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This number does not exceed the error position: `read <= error.position`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11456,"byte_end":11533,"line_start":333,"line_end":333,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":316},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11701,"byte_end":11708,"line_start":339,"line_end":339,"column_start":9,"column_end":16},"name":"written","qualname":"::DecodePartial::written","value":"usize","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Number of bytes written to output","sig":null,"attributes":[{"value":"/ Number of bytes written to output","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11560,"byte_end":11597,"line_start":336,"line_end":336,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11602,"byte_end":11605,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This number does not exceed the decoded length: `written <= decode_len(read)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11610,"byte_end":11692,"line_start":338,"line_end":338,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":317},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11749,"byte_end":11754,"line_start":342,"line_end":342,"column_start":9,"column_end":14},"name":"error","qualname":"::DecodePartial::error","value":"DecodeError","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Decoding error\n","sig":null,"attributes":[{"value":"/ Decoding error","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11722,"byte_end":11740,"line_start":341,"line_end":341,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29069,"byte_end":29089,"line_start":829,"line_end":829,"column_start":5,"column_end":25},"name":"MostSignificantFirst","qualname":"::BitOrder::MostSignificantFirst","value":"BitOrder::MostSignificantFirst","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Most significant bit first","sig":null,"attributes":[{"value":"/ Most significant bit first","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28655,"byte_end":28685,"line_start":821,"line_end":821,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28690,"byte_end":28693,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ This is the most common and most intuitive bit-order. In particular, this is the bit-order","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28698,"byte_end":28792,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ used by [RFC4648] and thus the usual hexadecimal, base64, base32, base64url, and base32hex","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28797,"byte_end":28891,"line_start":824,"line_end":824,"column_start":5,"column_end":99}},{"value":"/ encodings. This is the default bit-order when [specifying](struct.Specification.html) a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28896,"byte_end":28987,"line_start":825,"line_end":825,"column_start":5,"column_end":96}},{"value":"/ base.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28992,"byte_end":29001,"line_start":826,"line_end":826,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29006,"byte_end":29009,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29014,"byte_end":29064,"line_start":828,"line_end":828,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":333},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29510,"byte_end":29531,"line_start":844,"line_end":844,"column_start":5,"column_end":26},"name":"LeastSignificantFirst","qualname":"::BitOrder::LeastSignificantFirst","value":"BitOrder::LeastSignificantFirst","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Least significant bit first","sig":null,"attributes":[{"value":"/ Least significant bit first","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29096,"byte_end":29127,"line_start":831,"line_end":831,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29132,"byte_end":29135,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29140,"byte_end":29154,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29159,"byte_end":29162,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ DNSCurve [base32] uses least significant bit first:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29167,"byte_end":29222,"line_start":835,"line_end":835,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29227,"byte_end":29230,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29235,"byte_end":29246,"line_start":837,"line_end":837,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE32_DNSCURVE;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29251,"byte_end":29290,"line_start":838,"line_end":838,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(BASE32_DNSCURVE.encode(&[0x64, 0x88]), \"4321\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29295,"byte_end":29357,"line_start":839,"line_end":839,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(BASE32_DNSCURVE.decode(b\"4321\").unwrap(), vec![0x64, 0x88]);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29362,"byte_end":29437,"line_start":840,"line_end":840,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29442,"byte_end":29449,"line_start":841,"line_end":841,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29454,"byte_end":29457,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ [base32]: constant.BASE32_DNSCURVE.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29462,"byte_end":29505,"line_start":843,"line_end":843,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":330},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28640,"byte_end":28648,"line_start":820,"line_end":820,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"pub enum BitOrder {\n\n    /// Most significant bit first\n    ///\n    /// This is the most common and most intuitive bit-order. In particular, this is the bit-order\n    /// used by [RFC4648] and thus the usual hexadecimal, base64, base32, base64url, and base32hex\n    /// encodings. This is the default bit-order when [specifying](struct.Specification.html) a\n    /// base.\n    ///\n    /// [RFC4648]: https://tools.ietf.org/html/rfc4648\n    MostSignificantFirst,\n\n    /// Least significant bit first\n    ///\n    /// # Examples\n    ///\n    /// DNSCurve [base32] uses least significant bit first:\n    ///\n    /// ```rust\n    /// use data_encoding::BASE32_DNSCURVE;\n    /// assert_eq!(BASE32_DNSCURVE.encode(&[0x64, 0x88]), \"4321\");\n    /// assert_eq!(BASE32_DNSCURVE.decode(b\"4321\").unwrap(), vec![0x64, 0x88]);\n    /// ```\n    ///\n    /// [base32]: constant.BASE32_DNSCURVE.html\n    LeastSignificantFirst,\n}","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":333}],"decl_id":null,"docs":" Order in which bits are read from a byte","sig":null,"attributes":[{"value":"/ Order in which bits are read from a byte","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27219,"byte_end":27263,"line_start":789,"line_end":789,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27264,"byte_end":27267,"line_start":790,"line_end":790,"column_start":1,"column_end":4}},{"value":"/ The base-conversion encoding is always little-endian. This means that the least significant","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27268,"byte_end":27363,"line_start":791,"line_end":791,"column_start":1,"column_end":96}},{"value":"/ **byte** is always first. However, we can still choose whether, within a byte, this is the most","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27364,"byte_end":27463,"line_start":792,"line_end":792,"column_start":1,"column_end":100}},{"value":"/ significant or the least significant **bit** that is first. If the terminology is confusing,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27464,"byte_end":27560,"line_start":793,"line_end":793,"column_start":1,"column_end":97}},{"value":"/ testing on an asymmetrical example should be enough to choose the correct value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27561,"byte_end":27645,"line_start":794,"line_end":794,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27646,"byte_end":27649,"line_start":795,"line_end":795,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27650,"byte_end":27664,"line_start":796,"line_end":796,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27665,"byte_end":27668,"line_start":797,"line_end":797,"column_start":1,"column_end":4}},{"value":"/ In the following example, we can see that a base with the `MostSignificantFirst` bit-order has","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27669,"byte_end":27767,"line_start":798,"line_end":798,"column_start":1,"column_end":99}},{"value":"/ the most significant bit first in the encoded output. In particular, the output is in the same","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27768,"byte_end":27866,"line_start":799,"line_end":799,"column_start":1,"column_end":99}},{"value":"/ order as the bits in the byte. The opposite happens with the `LeastSignificantFirst` bit-order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27867,"byte_end":27966,"line_start":800,"line_end":800,"column_start":1,"column_end":100}},{"value":"/ The least significant bit is first and the output is in the reverse order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":27967,"byte_end":28045,"line_start":801,"line_end":801,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28046,"byte_end":28049,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28050,"byte_end":28061,"line_start":803,"line_end":803,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{BitOrder, Specification};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28062,"byte_end":28111,"line_start":804,"line_end":804,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28112,"byte_end":28152,"line_start":805,"line_end":805,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"01\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28153,"byte_end":28185,"line_start":806,"line_end":806,"column_start":1,"column_end":33}},{"value":"/ spec.bit_order = BitOrder::MostSignificantFirst;  // default","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28186,"byte_end":28250,"line_start":807,"line_end":807,"column_start":1,"column_end":65}},{"value":"/ let msb = spec.encoding().unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28251,"byte_end":28290,"line_start":808,"line_end":808,"column_start":1,"column_end":40}},{"value":"/ spec.bit_order = BitOrder::LeastSignificantFirst;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28291,"byte_end":28344,"line_start":809,"line_end":809,"column_start":1,"column_end":54}},{"value":"/ let lsb = spec.encoding().unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28345,"byte_end":28384,"line_start":810,"line_end":810,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(msb.encode(&[0b01010011]), \"01010011\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28385,"byte_end":28439,"line_start":811,"line_end":811,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(lsb.encode(&[0b01010011]), \"11001010\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28440,"byte_end":28494,"line_start":812,"line_end":812,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28495,"byte_end":28502,"line_start":813,"line_end":813,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28503,"byte_end":28506,"line_start":814,"line_end":814,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28507,"byte_end":28521,"line_start":815,"line_end":815,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28522,"byte_end":28525,"line_start":816,"line_end":816,"column_start":1,"column_end":4}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28526,"byte_end":28559,"line_start":817,"line_end":817,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":28605,"byte_end":28630,"line_start":819,"line_end":819,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":140},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29636,"byte_end":29652,"line_start":851,"line_end":851,"column_start":10,"column_end":26},"name":"InternalEncoding","qualname":"::InternalEncoding","value":"Cow","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29601,"byte_end":29626,"line_start":850,"line_end":850,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":346},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30657,"byte_end":30665,"line_start":880,"line_end":880,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Base-conversion encoding","sig":null,"attributes":[{"value":"/ Base-conversion encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29766,"byte_end":29794,"line_start":857,"line_end":857,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29795,"byte_end":29798,"line_start":858,"line_end":858,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for technical details or how to define a new one.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":29799,"byte_end":29899,"line_start":859,"line_end":859,"column_start":1,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":348},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30666,"byte_end":30686,"line_start":880,"line_end":880,"column_start":21,"column_end":41},"name":"0","qualname":"::Encoding::0","value":"alloc::borrow::Cow<'static, [u8]>","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":360},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31089,"byte_end":31098,"line_start":894,"line_end":894,"column_start":12,"column_end":21},"name":"Translate","qualname":"::Translate","value":"Translate { from, to }","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"decl_id":null,"docs":" How to translate characters when decoding","sig":null,"attributes":[{"value":"/ How to translate characters when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30690,"byte_end":30735,"line_start":882,"line_end":882,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30736,"byte_end":30739,"line_start":883,"line_end":883,"column_start":1,"column_end":4}},{"value":"/ The order matters. The first character of the `from` field is translated to the first character","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30740,"byte_end":30839,"line_start":884,"line_end":884,"column_start":1,"column_end":100}},{"value":"/ of the `to` field. The second to the second. Etc.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30840,"byte_end":30893,"line_start":885,"line_end":885,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30894,"byte_end":30897,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for more information.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30898,"byte_end":30970,"line_start":887,"line_end":887,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30971,"byte_end":30974,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30975,"byte_end":30989,"line_start":889,"line_end":889,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30990,"byte_end":30993,"line_start":890,"line_end":890,"column_start":1,"column_end":4}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":30994,"byte_end":31027,"line_start":891,"line_end":891,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31052,"byte_end":31077,"line_start":893,"line_end":893,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":361},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31146,"byte_end":31150,"line_start":896,"line_end":896,"column_start":9,"column_end":13},"name":"from","qualname":"::Translate::from","value":"alloc::string::String","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Characters to translate from\n","sig":null,"attributes":[{"value":"/ Characters to translate from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31105,"byte_end":31137,"line_start":895,"line_end":895,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":362},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31204,"byte_end":31206,"line_start":899,"line_end":899,"column_start":9,"column_end":11},"name":"to","qualname":"::Translate::to","value":"alloc::string::String","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Characters to translate to\n","sig":null,"attributes":[{"value":"/ Characters to translate to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31165,"byte_end":31195,"line_start":898,"line_end":898,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":367},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31455,"byte_end":31459,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"Wrap","qualname":"::Wrap","value":"Wrap { width, separator }","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"decl_id":null,"docs":" How to wrap the output when encoding","sig":null,"attributes":[{"value":"/ How to wrap the output when encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31219,"byte_end":31259,"line_start":902,"line_end":902,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31260,"byte_end":31263,"line_start":903,"line_end":903,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for more information.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31264,"byte_end":31336,"line_start":904,"line_end":904,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31337,"byte_end":31340,"line_start":905,"line_end":905,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31341,"byte_end":31355,"line_start":906,"line_end":906,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31356,"byte_end":31359,"line_start":907,"line_end":907,"column_start":1,"column_end":4}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31360,"byte_end":31393,"line_start":908,"line_end":908,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31418,"byte_end":31443,"line_start":910,"line_end":910,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":368},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31758,"byte_end":31763,"line_start":921,"line_end":921,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrap::width","value":"usize","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Wrapping width","sig":null,"attributes":[{"value":"/ Wrapping width","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31466,"byte_end":31484,"line_start":912,"line_end":912,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31489,"byte_end":31492,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31497,"byte_end":31523,"line_start":914,"line_end":914,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31528,"byte_end":31531,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ - 8 for a bit-width of 1 (binary), 3 (octal), and 5 (base32)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31536,"byte_end":31600,"line_start":916,"line_end":916,"column_start":5,"column_end":69}},{"value":"/ - 4 for a bit-width of 2 (base4) and 6 (base64)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31605,"byte_end":31656,"line_start":917,"line_end":917,"column_start":5,"column_end":56}},{"value":"/ - 2 for a bit-width of 4 (hexadecimal)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31661,"byte_end":31703,"line_start":918,"line_end":918,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31708,"byte_end":31711,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Wrapping is disabled if null.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31716,"byte_end":31749,"line_start":920,"line_end":920,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31856,"byte_end":31865,"line_start":926,"line_end":926,"column_start":9,"column_end":18},"name":"separator","qualname":"::Wrap::separator","value":"alloc::string::String","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Wrapping characters","sig":null,"attributes":[{"value":"/ Wrapping characters","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31777,"byte_end":31800,"line_start":923,"line_end":923,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31805,"byte_end":31808,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ Wrapping is disabled if empty.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31813,"byte_end":31847,"line_start":925,"line_end":925,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":374},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42289,"byte_end":42302,"line_start":1171,"line_end":1171,"column_start":12,"column_end":25},"name":"Specification","qualname":"::Specification","value":"Specification { symbols, bit_order, check_trailing_bits, padding, ignore, wrap, translate }","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381}],"decl_id":null,"docs":" Base-conversion specification","sig":null,"attributes":[{"value":"/ Base-conversion specification","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31878,"byte_end":31911,"line_start":929,"line_end":929,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31912,"byte_end":31915,"line_start":930,"line_end":930,"column_start":1,"column_end":4}},{"value":"/ It is possible to define custom encodings given a specification. To do so, it is important to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":31916,"byte_end":32013,"line_start":931,"line_end":931,"column_start":1,"column_end":98}},{"value":"/ understand the theory first.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32014,"byte_end":32046,"line_start":932,"line_end":932,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32047,"byte_end":32050,"line_start":933,"line_end":933,"column_start":1,"column_end":4}},{"value":"/ # Theory","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32051,"byte_end":32063,"line_start":934,"line_end":934,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32064,"byte_end":32067,"line_start":935,"line_end":935,"column_start":1,"column_end":4}},{"value":"/ Each subsection has an equivalent subsection in the [Practice](#practice) section.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32068,"byte_end":32154,"line_start":936,"line_end":936,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32155,"byte_end":32158,"line_start":937,"line_end":937,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32159,"byte_end":32172,"line_start":938,"line_end":938,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32173,"byte_end":32176,"line_start":939,"line_end":939,"column_start":1,"column_end":4}},{"value":"/ The main idea of a [base-conversion] encoding is to see `[u8]` as numbers written in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32177,"byte_end":32265,"line_start":940,"line_end":940,"column_start":1,"column_end":89}},{"value":"/ little-endian base256 and convert them in another little-endian base. For performance reasons,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32266,"byte_end":32364,"line_start":941,"line_end":941,"column_start":1,"column_end":99}},{"value":"/ this crate restricts this other base to be of size 2 (binary), 4 (base4), 8 (octal), 16","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32365,"byte_end":32456,"line_start":942,"line_end":942,"column_start":1,"column_end":92}},{"value":"/ (hexadecimal), 32 (base32), or 64 (base64). The converted number is written as `[u8]` although","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32457,"byte_end":32555,"line_start":943,"line_end":943,"column_start":1,"column_end":99}},{"value":"/ it doesn't use all the 256 possible values of `u8`. This crate encodes to ASCII, so only values","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32556,"byte_end":32655,"line_start":944,"line_end":944,"column_start":1,"column_end":100}},{"value":"/ smaller than 128 are allowed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32656,"byte_end":32689,"line_start":945,"line_end":945,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32690,"byte_end":32693,"line_start":946,"line_end":946,"column_start":1,"column_end":4}},{"value":"/ More precisely, we need the following elements:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32694,"byte_end":32745,"line_start":947,"line_end":947,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32746,"byte_end":32749,"line_start":948,"line_end":948,"column_start":1,"column_end":4}},{"value":"/ - The bit-width N: 1 for binary, 2 for base4, 3 for octal, 4 for hexadecimal, 5 for base32, and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32750,"byte_end":32849,"line_start":949,"line_end":949,"column_start":1,"column_end":100}},{"value":"/   6 for base64","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32850,"byte_end":32868,"line_start":950,"line_end":950,"column_start":1,"column_end":19}},{"value":"/ - The [bit-order](enum.BitOrder.html): most or least significant bit first","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32869,"byte_end":32947,"line_start":951,"line_end":951,"column_start":1,"column_end":79}},{"value":"/ - The symbols function S from [0, 2<sup>N</sup>) (called values and written `uN`) to symbols","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":32948,"byte_end":33044,"line_start":952,"line_end":952,"column_start":1,"column_end":97}},{"value":"/   (represented as `u8` although only ASCII symbols are allowed, i.e. smaller than 128)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33045,"byte_end":33135,"line_start":953,"line_end":953,"column_start":1,"column_end":91}},{"value":"/ - The values partial function V from ASCII to [0, 2<sup>N</sup>), i.e. from `u8` to `uN`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33136,"byte_end":33228,"line_start":954,"line_end":954,"column_start":1,"column_end":93}},{"value":"/ - Whether trailing bits are checked: trailing bits are leading zeros in theory, but since","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33229,"byte_end":33322,"line_start":955,"line_end":955,"column_start":1,"column_end":94}},{"value":"/   numbers are little-endian they come last","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33323,"byte_end":33369,"line_start":956,"line_end":956,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33370,"byte_end":33373,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ For the encoding to be correct (i.e. encoding then decoding gives back the initial input),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33374,"byte_end":33468,"line_start":958,"line_end":958,"column_start":1,"column_end":95}},{"value":"/ V(S(i)) must be defined and equal to i for all i in [0, 2<sup>N</sup>). For the encoding to be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33469,"byte_end":33567,"line_start":959,"line_end":959,"column_start":1,"column_end":99}},{"value":"/ [canonical][canonical] (i.e. different inputs decode to different outputs, or equivalently,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33568,"byte_end":33663,"line_start":960,"line_end":960,"column_start":1,"column_end":96}},{"value":"/ decoding then encoding gives back the initial input), trailing bits must be checked and if V(i)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33664,"byte_end":33763,"line_start":961,"line_end":961,"column_start":1,"column_end":100}},{"value":"/ is defined then S(V(i)) is equal to i for all i.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33764,"byte_end":33816,"line_start":962,"line_end":962,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33817,"byte_end":33820,"line_start":963,"line_end":963,"column_start":1,"column_end":4}},{"value":"/ Encoding and decoding are given by the following pipeline:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33821,"byte_end":33883,"line_start":964,"line_end":964,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33884,"byte_end":33887,"line_start":965,"line_end":965,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33888,"byte_end":33899,"line_start":966,"line_end":966,"column_start":1,"column_end":12}},{"value":"/ [u8] <--1--> [[bit; 8]] <--2--> [[bit; N]] <--3--> [uN] <--4--> [u8]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33900,"byte_end":33972,"line_start":967,"line_end":967,"column_start":1,"column_end":73}},{"value":"/ 1: Map bit-order between each u8 and [bit; 8]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":33973,"byte_end":34022,"line_start":968,"line_end":968,"column_start":1,"column_end":50}},{"value":"/ 2: Base conversion between base 2^8 and base 2^N (check trailing bits)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34023,"byte_end":34097,"line_start":969,"line_end":969,"column_start":1,"column_end":75}},{"value":"/ 3: Map bit-order between each [bit; N] and uN","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34098,"byte_end":34147,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ 4: Map symbols/values between each uN and u8 (values must be defined)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34148,"byte_end":34221,"line_start":971,"line_end":971,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34222,"byte_end":34229,"line_start":972,"line_end":972,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34230,"byte_end":34233,"line_start":973,"line_end":973,"column_start":1,"column_end":4}},{"value":"/ ## Extensions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34234,"byte_end":34251,"line_start":974,"line_end":974,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34252,"byte_end":34255,"line_start":975,"line_end":975,"column_start":1,"column_end":4}},{"value":"/ All these extensions make the encoding not canonical.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34256,"byte_end":34313,"line_start":976,"line_end":976,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34314,"byte_end":34317,"line_start":977,"line_end":977,"column_start":1,"column_end":4}},{"value":"/ ### Padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34318,"byte_end":34333,"line_start":978,"line_end":978,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34334,"byte_end":34337,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ Padding is useful if the following conditions are met:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34338,"byte_end":34396,"line_start":980,"line_end":980,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34397,"byte_end":34400,"line_start":981,"line_end":981,"column_start":1,"column_end":4}},{"value":"/ - the bit-width is 3 (octal), 5 (base32), or 6 (base64)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34401,"byte_end":34460,"line_start":982,"line_end":982,"column_start":1,"column_end":60}},{"value":"/ - the length of the data to encode is not known in advance","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34461,"byte_end":34523,"line_start":983,"line_end":983,"column_start":1,"column_end":63}},{"value":"/ - the data must be sent without buffering","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34524,"byte_end":34569,"line_start":984,"line_end":984,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34570,"byte_end":34573,"line_start":985,"line_end":985,"column_start":1,"column_end":4}},{"value":"/ Bases for which the bit-width N does not divide 8 may not concatenate encoded data. This comes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34574,"byte_end":34672,"line_start":986,"line_end":986,"column_start":1,"column_end":99}},{"value":"/ from the fact that it is not possible to make the difference between trailing bits and encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34673,"byte_end":34772,"line_start":987,"line_end":987,"column_start":1,"column_end":100}},{"value":"/ bits. Padding solves this issue by adding a new character to discriminate between trailing bits","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34773,"byte_end":34872,"line_start":988,"line_end":988,"column_start":1,"column_end":100}},{"value":"/ and encoding bits. The idea is to work by blocks of lcm(8, N) bits, where lcm(8, N) is the least","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34873,"byte_end":34973,"line_start":989,"line_end":989,"column_start":1,"column_end":101}},{"value":"/ common multiple of 8 and N. When such block is not complete, it is padded.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":34974,"byte_end":35052,"line_start":990,"line_end":990,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35053,"byte_end":35056,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the padding character must not be a symbol.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35057,"byte_end":35129,"line_start":992,"line_end":992,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35130,"byte_end":35133,"line_start":993,"line_end":993,"column_start":1,"column_end":4}},{"value":"/ ### Ignore characters when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35134,"byte_end":35173,"line_start":994,"line_end":994,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35174,"byte_end":35177,"line_start":995,"line_end":995,"column_start":1,"column_end":4}},{"value":"/ Ignoring characters when decoding is useful if after encoding some characters are added for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35178,"byte_end":35273,"line_start":996,"line_end":996,"column_start":1,"column_end":96}},{"value":"/ convenience or any other reason (like wrapping). In that case we want to first ignore thoses","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35274,"byte_end":35370,"line_start":997,"line_end":997,"column_start":1,"column_end":97}},{"value":"/ characters before decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35371,"byte_end":35402,"line_start":998,"line_end":998,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35403,"byte_end":35406,"line_start":999,"line_end":999,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, ignored characters must not contain symbols or the padding character.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35407,"byte_end":35505,"line_start":1000,"line_end":1000,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35506,"byte_end":35509,"line_start":1001,"line_end":1001,"column_start":1,"column_end":4}},{"value":"/ ### Wrap output when encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35510,"byte_end":35543,"line_start":1002,"line_end":1002,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35544,"byte_end":35547,"line_start":1003,"line_end":1003,"column_start":1,"column_end":4}},{"value":"/ Wrapping output when encoding is useful if the output is meant to be printed in a document where","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35548,"byte_end":35648,"line_start":1004,"line_end":1004,"column_start":1,"column_end":101}},{"value":"/ width is limited (typically 80-columns documents). In that case, the wrapping width and the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35649,"byte_end":35744,"line_start":1005,"line_end":1005,"column_start":1,"column_end":96}},{"value":"/ wrapping separator have to be defined.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35745,"byte_end":35787,"line_start":1006,"line_end":1006,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35788,"byte_end":35791,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the wrapping separator characters must be ignored (see previous","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35792,"byte_end":35884,"line_start":1008,"line_end":1008,"column_start":1,"column_end":93}},{"value":"/ subsection). As such, wrapping separator characters must also not contain symbols or the padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35885,"byte_end":35985,"line_start":1009,"line_end":1009,"column_start":1,"column_end":101}},{"value":"/ character.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":35986,"byte_end":36000,"line_start":1010,"line_end":1010,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36001,"byte_end":36004,"line_start":1011,"line_end":1011,"column_start":1,"column_end":4}},{"value":"/ ### Translate characters when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36005,"byte_end":36047,"line_start":1012,"line_end":1012,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36048,"byte_end":36051,"line_start":1013,"line_end":1013,"column_start":1,"column_end":4}},{"value":"/ Translating characters when decoding is useful when encoded data may be copied by a humain","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36052,"byte_end":36146,"line_start":1014,"line_end":1014,"column_start":1,"column_end":95}},{"value":"/ instead of a machine. Humans tend to confuse some characters for others. In that case we want to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36147,"byte_end":36247,"line_start":1015,"line_end":1015,"column_start":1,"column_end":101}},{"value":"/ translate those characters before decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36248,"byte_end":36295,"line_start":1016,"line_end":1016,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36296,"byte_end":36299,"line_start":1017,"line_end":1017,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the characters we translate _from_ must not contain symbols or the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36300,"byte_end":36395,"line_start":1018,"line_end":1018,"column_start":1,"column_end":96}},{"value":"/ padding character, and the characters we translate _to_ must only contain symbols or the padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36396,"byte_end":36496,"line_start":1019,"line_end":1019,"column_start":1,"column_end":101}},{"value":"/ character.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36497,"byte_end":36511,"line_start":1020,"line_end":1020,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36512,"byte_end":36515,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ # Practice","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36516,"byte_end":36530,"line_start":1022,"line_end":1022,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36531,"byte_end":36534,"line_start":1023,"line_end":1023,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36535,"byte_end":36548,"line_start":1024,"line_end":1024,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36549,"byte_end":36552,"line_start":1025,"line_end":1025,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36553,"byte_end":36564,"line_start":1026,"line_end":1026,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Encoding, Specification};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36565,"byte_end":36614,"line_start":1027,"line_end":1027,"column_start":1,"column_end":50}},{"value":"/ fn make_encoding(symbols: &str) -> Encoding {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36615,"byte_end":36664,"line_start":1028,"line_end":1028,"column_start":1,"column_end":50}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36665,"byte_end":36709,"line_start":1029,"line_end":1029,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(symbols);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36710,"byte_end":36749,"line_start":1030,"line_end":1030,"column_start":1,"column_end":40}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36750,"byte_end":36782,"line_start":1031,"line_end":1031,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36783,"byte_end":36788,"line_start":1032,"line_end":1032,"column_start":1,"column_end":6}},{"value":"/ let binary = make_encoding(\"01\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36789,"byte_end":36826,"line_start":1033,"line_end":1033,"column_start":1,"column_end":38}},{"value":"/ let octal = make_encoding(\"01234567\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36827,"byte_end":36869,"line_start":1034,"line_end":1034,"column_start":1,"column_end":43}},{"value":"/ let hexadecimal = make_encoding(\"0123456789abcdef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36870,"byte_end":36926,"line_start":1035,"line_end":1035,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(binary.encode(b\"Bit\"), \"010000100110100101110100\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36927,"byte_end":36993,"line_start":1036,"line_end":1036,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(octal.encode(b\"Bit\"), \"20464564\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":36994,"byte_end":37043,"line_start":1037,"line_end":1037,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(hexadecimal.encode(b\"Bit\"), \"426974\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37044,"byte_end":37097,"line_start":1038,"line_end":1038,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37098,"byte_end":37105,"line_start":1039,"line_end":1039,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37106,"byte_end":37109,"line_start":1040,"line_end":1040,"column_start":1,"column_end":4}},{"value":"/ The `binary` base has 2 symbols `0` and `1` with value 0 and 1 respectively. The `octal` base","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37110,"byte_end":37207,"line_start":1041,"line_end":1041,"column_start":1,"column_end":98}},{"value":"/ has 8 symbols `0` to `7` with value 0 to 7. The `hexadecimal` base has 16 symbols `0` to `9` and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37208,"byte_end":37308,"line_start":1042,"line_end":1042,"column_start":1,"column_end":101}},{"value":"/ `a` to `f` with value 0 to 15. The following diagram gives the idea of how encoding works in the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37309,"byte_end":37409,"line_start":1043,"line_end":1043,"column_start":1,"column_end":101}},{"value":"/ previous example (note that we can actually write such diagram only because the bit-order is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37410,"byte_end":37506,"line_start":1044,"line_end":1044,"column_start":1,"column_end":97}},{"value":"/ most significant first):","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37507,"byte_end":37535,"line_start":1045,"line_end":1045,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37536,"byte_end":37539,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37540,"byte_end":37551,"line_start":1047,"line_end":1047,"column_start":1,"column_end":12}},{"value":"/ [      octal] |  2  :  0  :  4  :  6  :  4  :  5  :  6  :  4  |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37552,"byte_end":37619,"line_start":1048,"line_end":1048,"column_start":1,"column_end":68}},{"value":"/ [     binary] |0 1 0 0 0 0 1 0|0 1 1 0 1 0 0 1|0 1 1 1 0 1 0 0|","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37620,"byte_end":37687,"line_start":1049,"line_end":1049,"column_start":1,"column_end":68}},{"value":"/ [hexadecimal] |   4   :   2   |   6   :   9   |   7   :   4   |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37688,"byte_end":37755,"line_start":1050,"line_end":1050,"column_start":1,"column_end":68}},{"value":"/                ^-- LSB                                       ^-- MSB","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37756,"byte_end":37828,"line_start":1051,"line_end":1051,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37829,"byte_end":37836,"line_start":1052,"line_end":1052,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37837,"byte_end":37840,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ Note that in theory, these little-endian numbers are read from right to left (the most","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37841,"byte_end":37931,"line_start":1054,"line_end":1054,"column_start":1,"column_end":91}},{"value":"/ significant bit is at the right). Since leading zeros are meaningless (in our usual decimal","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":37932,"byte_end":38027,"line_start":1055,"line_end":1055,"column_start":1,"column_end":96}},{"value":"/ notation 0123 is the same as 123), it explains why trailing bits must be zero. Trailing bits may","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38028,"byte_end":38128,"line_start":1056,"line_end":1056,"column_start":1,"column_end":101}},{"value":"/ occur when the bit-width of a base does not divide 8. Only binary, base4, and hexadecimal don't","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38129,"byte_end":38228,"line_start":1057,"line_end":1057,"column_start":1,"column_end":100}},{"value":"/ have trailing bits issues. So let's consider octal and base64, which have trailing bits in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38229,"byte_end":38323,"line_start":1058,"line_end":1058,"column_start":1,"column_end":95}},{"value":"/ similar circumstances:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38324,"byte_end":38350,"line_start":1059,"line_end":1059,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38351,"byte_end":38354,"line_start":1060,"line_end":1060,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38355,"byte_end":38366,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Specification, BASE64_NOPAD};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38367,"byte_end":38420,"line_start":1062,"line_end":1062,"column_start":1,"column_end":54}},{"value":"/ let octal = {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38421,"byte_end":38438,"line_start":1063,"line_end":1063,"column_start":1,"column_end":18}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38439,"byte_end":38483,"line_start":1064,"line_end":1064,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"01234567\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38484,"byte_end":38526,"line_start":1065,"line_end":1065,"column_start":1,"column_end":43}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38527,"byte_end":38559,"line_start":1066,"line_end":1066,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38560,"byte_end":38566,"line_start":1067,"line_end":1067,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(BASE64_NOPAD.encode(b\"B\"), \"Qg\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38567,"byte_end":38615,"line_start":1068,"line_end":1068,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(octal.encode(b\"B\"), \"204\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38616,"byte_end":38658,"line_start":1069,"line_end":1069,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38659,"byte_end":38666,"line_start":1070,"line_end":1070,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38667,"byte_end":38670,"line_start":1071,"line_end":1071,"column_start":1,"column_end":4}},{"value":"/ We have the following diagram, where the base64 values are written between parentheses:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38671,"byte_end":38762,"line_start":1072,"line_end":1072,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38763,"byte_end":38766,"line_start":1073,"line_end":1073,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38767,"byte_end":38778,"line_start":1074,"line_end":1074,"column_start":1,"column_end":12}},{"value":"/ [base64] |   Q(16)   :   g(32)   : [has 4 zero trailing bits]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38779,"byte_end":38844,"line_start":1075,"line_end":1075,"column_start":1,"column_end":66}},{"value":"/ [ octal] |  2  :  0  :  4  :       [has 1 zero trailing bit ]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38845,"byte_end":38910,"line_start":1076,"line_end":1076,"column_start":1,"column_end":66}},{"value":"/          |0 1 0 0 0 0 1 0|0 0 0 0","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38911,"byte_end":38948,"line_start":1077,"line_end":1077,"column_start":1,"column_end":38}},{"value":"/ [ ascii] |       B       |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38949,"byte_end":38979,"line_start":1078,"line_end":1078,"column_start":1,"column_end":31}},{"value":"/                           ^-^-^-^-- leading zeros / trailing bits","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":38980,"byte_end":39049,"line_start":1079,"line_end":1079,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39050,"byte_end":39057,"line_start":1080,"line_end":1080,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39058,"byte_end":39061,"line_start":1081,"line_end":1081,"column_start":1,"column_end":4}},{"value":"/ ## Extensions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39062,"byte_end":39079,"line_start":1082,"line_end":1082,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39080,"byte_end":39083,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ ### Padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39084,"byte_end":39099,"line_start":1084,"line_end":1084,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39100,"byte_end":39103,"line_start":1085,"line_end":1085,"column_start":1,"column_end":4}},{"value":"/ For octal and base64, lcm(8, 3) == lcm(8, 6) == 24 bits or 3 bytes. For base32, lcm(8, 5) is 40","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39104,"byte_end":39203,"line_start":1086,"line_end":1086,"column_start":1,"column_end":100}},{"value":"/ bits or 5 bytes. Let's consider octal and base64:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39204,"byte_end":39257,"line_start":1087,"line_end":1087,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39258,"byte_end":39261,"line_start":1088,"line_end":1088,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39262,"byte_end":39273,"line_start":1089,"line_end":1089,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Specification, BASE64};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39274,"byte_end":39321,"line_start":1090,"line_end":1090,"column_start":1,"column_end":48}},{"value":"/ let octal = {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39322,"byte_end":39339,"line_start":1091,"line_end":1091,"column_start":1,"column_end":18}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39340,"byte_end":39384,"line_start":1092,"line_end":1092,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"01234567\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39385,"byte_end":39427,"line_start":1093,"line_end":1093,"column_start":1,"column_end":43}},{"value":"/     spec.padding = Some('=');","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39428,"byte_end":39461,"line_start":1094,"line_end":1094,"column_start":1,"column_end":34}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39462,"byte_end":39494,"line_start":1095,"line_end":1095,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39495,"byte_end":39501,"line_start":1096,"line_end":1096,"column_start":1,"column_end":7}},{"value":"/ // We start encoding but we only have \"B\" for now.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39502,"byte_end":39556,"line_start":1097,"line_end":1097,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(BASE64.encode(b\"B\"), \"Qg==\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39557,"byte_end":39601,"line_start":1098,"line_end":1098,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(octal.encode(b\"B\"), \"204=====\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39602,"byte_end":39649,"line_start":1099,"line_end":1099,"column_start":1,"column_end":48}},{"value":"/ // Now we have \"it\".","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39650,"byte_end":39674,"line_start":1100,"line_end":1100,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(BASE64.encode(b\"it\"), \"aXQ=\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39675,"byte_end":39720,"line_start":1101,"line_end":1101,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(octal.encode(b\"it\"), \"322720==\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39721,"byte_end":39769,"line_start":1102,"line_end":1102,"column_start":1,"column_end":49}},{"value":"/ // By concatenating everything, we may decode the original data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39770,"byte_end":39838,"line_start":1103,"line_end":1103,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(BASE64.decode(b\"Qg==aXQ=\").unwrap(), b\"Bit\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39839,"byte_end":39899,"line_start":1104,"line_end":1104,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(octal.decode(b\"204=====322720==\").unwrap(), b\"Bit\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39900,"byte_end":39967,"line_start":1105,"line_end":1105,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39968,"byte_end":39975,"line_start":1106,"line_end":1106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39976,"byte_end":39979,"line_start":1107,"line_end":1107,"column_start":1,"column_end":4}},{"value":"/ We have the following diagrams:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":39980,"byte_end":40015,"line_start":1108,"line_end":1108,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40016,"byte_end":40019,"line_start":1109,"line_end":1109,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40020,"byte_end":40031,"line_start":1110,"line_end":1110,"column_start":1,"column_end":12}},{"value":"/ [base64] |   Q(16)   :   g(32)   :     =     :     =     |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40032,"byte_end":40094,"line_start":1111,"line_end":1111,"column_start":1,"column_end":63}},{"value":"/ [ octal] |  2  :  0  :  4  :  =  :  =  :  =  :  =  :  =  |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40095,"byte_end":40157,"line_start":1112,"line_end":1112,"column_start":1,"column_end":63}},{"value":"/          |0 1 0 0 0 0 1 0|. . . . . . . .|. . . . . . . .|","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40158,"byte_end":40220,"line_start":1113,"line_end":1113,"column_start":1,"column_end":63}},{"value":"/ [ ascii] |       B       |        end of block aligned --^","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40221,"byte_end":40283,"line_start":1114,"line_end":1114,"column_start":1,"column_end":63}},{"value":"/          ^-- beginning of block aligned","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40284,"byte_end":40327,"line_start":1115,"line_end":1115,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40328,"byte_end":40331,"line_start":1116,"line_end":1116,"column_start":1,"column_end":4}},{"value":"/ [base64] |   a(26)   :   X(23)   :   Q(16)   :     =     |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40332,"byte_end":40394,"line_start":1117,"line_end":1117,"column_start":1,"column_end":63}},{"value":"/ [ octal] |  3  :  2  :  2  :  7  :  2  :  0  :  =  :  =  |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40395,"byte_end":40457,"line_start":1118,"line_end":1118,"column_start":1,"column_end":63}},{"value":"/          |0 1 1 0 1 0 0 1|0 1 1 1 0 1 0 0|. . . . . . . .|","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40458,"byte_end":40520,"line_start":1119,"line_end":1119,"column_start":1,"column_end":63}},{"value":"/ [ ascii] |       i       |       t       |","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40521,"byte_end":40567,"line_start":1120,"line_end":1120,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40568,"byte_end":40575,"line_start":1121,"line_end":1121,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40576,"byte_end":40579,"line_start":1122,"line_end":1122,"column_start":1,"column_end":4}},{"value":"/ ### Ignore characters when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40580,"byte_end":40619,"line_start":1123,"line_end":1123,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40620,"byte_end":40623,"line_start":1124,"line_end":1124,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to ignore newlines (`\\r` and `\\n`). But to keep the example small, we","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40624,"byte_end":40721,"line_start":1125,"line_end":1125,"column_start":1,"column_end":98}},{"value":"/ will ignore spaces.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40722,"byte_end":40745,"line_start":1126,"line_end":1126,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40746,"byte_end":40749,"line_start":1127,"line_end":1127,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40750,"byte_end":40761,"line_start":1128,"line_end":1128,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::HEXLOWER.specification();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40762,"byte_end":40821,"line_start":1129,"line_end":1129,"column_start":1,"column_end":60}},{"value":"/ spec.ignore.push_str(\" \\t\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40822,"byte_end":40854,"line_start":1130,"line_end":1130,"column_start":1,"column_end":33}},{"value":"/ let base = spec.encoding().unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40855,"byte_end":40895,"line_start":1131,"line_end":1131,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(base.decode(b\"42 69 74\"), base.decode(b\"426974\"));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40896,"byte_end":40961,"line_start":1132,"line_end":1132,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40962,"byte_end":40969,"line_start":1133,"line_end":1133,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40970,"byte_end":40973,"line_start":1134,"line_end":1134,"column_start":1,"column_end":4}},{"value":"/ ### Wrap output when encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":40974,"byte_end":41007,"line_start":1135,"line_end":1135,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41008,"byte_end":41011,"line_start":1136,"line_end":1136,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to wrap after 64 or 76 characters with a newline (`\\r\\n` or `\\n`). But","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41012,"byte_end":41110,"line_start":1137,"line_end":1137,"column_start":1,"column_end":99}},{"value":"/ to keep the example small, we will wrap after 8 characters with a space.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41111,"byte_end":41187,"line_start":1138,"line_end":1138,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41188,"byte_end":41191,"line_start":1139,"line_end":1139,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41192,"byte_end":41203,"line_start":1140,"line_end":1140,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::BASE64.specification();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41204,"byte_end":41261,"line_start":1141,"line_end":1141,"column_start":1,"column_end":58}},{"value":"/ spec.wrap.width = 8;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41262,"byte_end":41286,"line_start":1142,"line_end":1142,"column_start":1,"column_end":25}},{"value":"/ spec.wrap.separator.push_str(\" \");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41287,"byte_end":41325,"line_start":1143,"line_end":1143,"column_start":1,"column_end":39}},{"value":"/ let base64 = spec.encoding().unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41326,"byte_end":41368,"line_start":1144,"line_end":1144,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(base64.encode(b\"Hey you\"), \"SGV5IHlv dQ== \");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41369,"byte_end":41429,"line_start":1145,"line_end":1145,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41430,"byte_end":41437,"line_start":1146,"line_end":1146,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41438,"byte_end":41441,"line_start":1147,"line_end":1147,"column_start":1,"column_end":4}},{"value":"/ Note that the output always ends with the separator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41442,"byte_end":41498,"line_start":1148,"line_end":1148,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41499,"byte_end":41502,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ ### Translate characters when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41503,"byte_end":41545,"line_start":1150,"line_end":1150,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41546,"byte_end":41549,"line_start":1151,"line_end":1151,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to translate lowercase to uppercase or reciprocally, but it is also used","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41550,"byte_end":41650,"line_start":1152,"line_end":1152,"column_start":1,"column_end":101}},{"value":"/ for letters that look alike, like `O0` or `Il1`. Let's illustrate both examples.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41651,"byte_end":41735,"line_start":1153,"line_end":1153,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41736,"byte_end":41739,"line_start":1154,"line_end":1154,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41740,"byte_end":41751,"line_start":1155,"line_end":1155,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::HEXLOWER.specification();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41752,"byte_end":41811,"line_start":1156,"line_end":1156,"column_start":1,"column_end":60}},{"value":"/ spec.translate.from.push_str(\"ABCDEFOIl\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41812,"byte_end":41858,"line_start":1157,"line_end":1157,"column_start":1,"column_end":47}},{"value":"/ spec.translate.to.push_str(\"abcdef011\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41859,"byte_end":41903,"line_start":1158,"line_end":1158,"column_start":1,"column_end":45}},{"value":"/ let base = spec.encoding().unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41904,"byte_end":41944,"line_start":1159,"line_end":1159,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(base.decode(b\"BOIl\"), base.decode(b\"b011\"));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":41945,"byte_end":42004,"line_start":1160,"line_end":1160,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42005,"byte_end":42012,"line_start":1161,"line_end":1161,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42013,"byte_end":42016,"line_start":1162,"line_end":1162,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42017,"byte_end":42031,"line_start":1163,"line_end":1163,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42032,"byte_end":42035,"line_start":1164,"line_end":1164,"column_start":1,"column_end":4}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42036,"byte_end":42069,"line_start":1165,"line_end":1165,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42070,"byte_end":42073,"line_start":1166,"line_end":1166,"column_start":1,"column_end":4}},{"value":"/ [base-conversion]: https://en.wikipedia.org/wiki/Positional_notation#Base_conversion","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42074,"byte_end":42162,"line_start":1167,"line_end":1167,"column_start":1,"column_end":89}},{"value":"/ [canonical]: https://tools.ietf.org/html/rfc4648#section-3.5","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42163,"byte_end":42227,"line_start":1168,"line_end":1168,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42252,"byte_end":42277,"line_start":1170,"line_end":1170,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":375},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42484,"byte_end":42491,"line_start":1176,"line_end":1176,"column_start":9,"column_end":16},"name":"symbols","qualname":"::Specification::symbols","value":"alloc::string::String","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Symbols","sig":null,"attributes":[{"value":"/ Symbols","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42309,"byte_end":42320,"line_start":1172,"line_end":1172,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42325,"byte_end":42328,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ The number of symbols must be 2, 4, 8, 16, 32, or 64. Symbols must be ASCII characters","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42333,"byte_end":42423,"line_start":1174,"line_end":1174,"column_start":5,"column_end":95}},{"value":"/ (smaller than 128) and they must be unique.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42428,"byte_end":42475,"line_start":1175,"line_end":1175,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":376},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42622,"byte_end":42631,"line_start":1181,"line_end":1181,"column_start":9,"column_end":18},"name":"bit_order","qualname":"::Specification::bit_order","value":"BitOrder","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Bit-order","sig":null,"attributes":[{"value":"/ Bit-order","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42506,"byte_end":42519,"line_start":1178,"line_end":1178,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42524,"byte_end":42527,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ The default is to use most significant bit first since it is the most common.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42532,"byte_end":42613,"line_start":1180,"line_end":1180,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":377},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42819,"byte_end":42838,"line_start":1187,"line_end":1187,"column_start":9,"column_end":28},"name":"check_trailing_bits","qualname":"::Specification::check_trailing_bits","value":"bool","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Check trailing bits","sig":null,"attributes":[{"value":"/ Check trailing bits","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42648,"byte_end":42671,"line_start":1183,"line_end":1183,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42676,"byte_end":42679,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ The default is to check trailing bits. This field is ignored when unnecessary (i.e. for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42684,"byte_end":42775,"line_start":1185,"line_end":1185,"column_start":5,"column_end":96}},{"value":"/ base2, base4, and base16).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42780,"byte_end":42810,"line_start":1186,"line_end":1186,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":378},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42992,"byte_end":42999,"line_start":1193,"line_end":1193,"column_start":9,"column_end":16},"name":"padding","qualname":"::Specification::padding","value":"core::option::Option<char>","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Padding","sig":null,"attributes":[{"value":"/ Padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42851,"byte_end":42862,"line_start":1189,"line_end":1189,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42867,"byte_end":42870,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ The default is to not use padding. The padding character must be ASCII and must not be a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42875,"byte_end":42967,"line_start":1191,"line_end":1191,"column_start":5,"column_end":97}},{"value":"/ symbol.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":42972,"byte_end":42983,"line_start":1192,"line_end":1192,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":379},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43235,"byte_end":43241,"line_start":1199,"line_end":1199,"column_start":9,"column_end":15},"name":"ignore","qualname":"::Specification::ignore","value":"alloc::string::String","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Characters to ignore when decoding","sig":null,"attributes":[{"value":"/ Characters to ignore when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43020,"byte_end":43058,"line_start":1195,"line_end":1195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43063,"byte_end":43066,"line_start":1196,"line_end":1196,"column_start":5,"column_end":8}},{"value":"/ The default is to not ignore characters when decoding. The characters to ignore must be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43071,"byte_end":43162,"line_start":1197,"line_end":1197,"column_start":5,"column_end":96}},{"value":"/ ASCII and must not be symbols or the padding character.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43167,"byte_end":43226,"line_start":1198,"line_end":1198,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":380},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43470,"byte_end":43474,"line_start":1205,"line_end":1205,"column_start":9,"column_end":13},"name":"wrap","qualname":"::Specification::wrap","value":"Wrap","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" How to wrap the output when encoding","sig":null,"attributes":[{"value":"/ How to wrap the output when encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43256,"byte_end":43296,"line_start":1201,"line_end":1201,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43301,"byte_end":43304,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ The default is to not wrap the output when encoding. The wrapping characters must be ASCII","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43309,"byte_end":43403,"line_start":1203,"line_end":1203,"column_start":5,"column_end":99}},{"value":"/ and must not be symbols or the padding character.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43408,"byte_end":43461,"line_start":1204,"line_end":1204,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":381},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43875,"byte_end":43884,"line_start":1213,"line_end":1213,"column_start":9,"column_end":18},"name":"translate","qualname":"::Specification::translate","value":"Translate","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" How to translate characters when decoding","sig":null,"attributes":[{"value":"/ How to translate characters when decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43487,"byte_end":43532,"line_start":1207,"line_end":1207,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43537,"byte_end":43540,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ The default is to not translate characters when decoding. The characters to translate from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43545,"byte_end":43639,"line_start":1209,"line_end":1209,"column_start":5,"column_end":99}},{"value":"/ must be ASCII and must not have already been assigned a semantics. The characters to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43644,"byte_end":43732,"line_start":1210,"line_end":1210,"column_start":5,"column_end":93}},{"value":"/ translate to must be ASCII and must have been assigned a semantics (symbol, padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43737,"byte_end":43824,"line_start":1211,"line_end":1211,"column_start":5,"column_end":92}},{"value":"/ character, or ignored character).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43829,"byte_end":43866,"line_start":1212,"line_end":1212,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45007,"byte_end":45017,"line_start":1268,"line_end":1268,"column_start":12,"column_end":22},"name":"encode_len","qualname":"<Encoding>::encode_len","value":"pub fn encode_len(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of an input of length `len`","sig":null,"attributes":[{"value":"/ Returns the encoded length of an input of length `len`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44811,"byte_end":44869,"line_start":1263,"line_end":1263,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44874,"byte_end":44877,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ See [`encode_mut`] for when to use it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44882,"byte_end":44924,"line_start":1265,"line_end":1265,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44929,"byte_end":44932,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ [`encode_mut`]: struct.Encoding.html#method.encode_mut","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44937,"byte_end":44995,"line_start":1267,"line_end":1267,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45926,"byte_end":45936,"line_start":1297,"line_end":1297,"column_start":12,"column_end":22},"name":"encode_mut","qualname":"<Encoding>::encode_mut","value":"pub fn encode_mut(&Self, &[u8], &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Encodes `input` in `output`","sig":null,"attributes":[{"value":"/ Encodes `input` in `output`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45285,"byte_end":45316,"line_start":1277,"line_end":1277,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45321,"byte_end":45324,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45329,"byte_end":45341,"line_start":1279,"line_end":1279,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45346,"byte_end":45349,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ Panics if the `output` length does not match the result of [`encode_len`] for the `input`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45354,"byte_end":45447,"line_start":1281,"line_end":1281,"column_start":5,"column_end":98}},{"value":"/ length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45452,"byte_end":45463,"line_start":1282,"line_end":1282,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45468,"byte_end":45471,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45476,"byte_end":45490,"line_start":1284,"line_end":1284,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45495,"byte_end":45498,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45503,"byte_end":45514,"line_start":1286,"line_end":1286,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45519,"byte_end":45549,"line_start":1287,"line_end":1287,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45554,"byte_end":45590,"line_start":1288,"line_end":1288,"column_start":5,"column_end":41}},{"value":"/ let input = b\"Hello world\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45595,"byte_end":45626,"line_start":1289,"line_end":1289,"column_start":5,"column_end":36}},{"value":"/ let output = &mut buffer[0 .. BASE64.encode_len(input.len())];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45631,"byte_end":45697,"line_start":1290,"line_end":1290,"column_start":5,"column_end":71}},{"value":"/ BASE64.encode_mut(input, output);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45702,"byte_end":45739,"line_start":1291,"line_end":1291,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(output, b\"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45744,"byte_end":45788,"line_start":1292,"line_end":1292,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45793,"byte_end":45800,"line_start":1293,"line_end":1293,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45805,"byte_end":45808,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ [`encode_len`]: struct.Encoding.html#method.encode_len","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45813,"byte_end":45871,"line_start":1295,"line_end":1295,"column_start":5,"column_end":63}},{"value":"allow(clippy :: cognitive_complexity)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":45876,"byte_end":45914,"line_start":1296,"line_end":1296,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46839,"byte_end":46852,"line_start":1325,"line_end":1325,"column_start":12,"column_end":25},"name":"encode_append","qualname":"<Encoding>::encode_append","value":"pub fn encode_append(&Self, &[u8], &mut String)","parent":null,"children":[],"decl_id":null,"docs":" Appends the encoding of `input` to `output`","sig":null,"attributes":[{"value":"/ Appends the encoding of `input` to `output`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46347,"byte_end":46394,"line_start":1308,"line_end":1308,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46399,"byte_end":46402,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46407,"byte_end":46421,"line_start":1310,"line_end":1310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46426,"byte_end":46429,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46434,"byte_end":46445,"line_start":1312,"line_end":1312,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46450,"byte_end":46480,"line_start":1313,"line_end":1313,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46485,"byte_end":46521,"line_start":1314,"line_end":1314,"column_start":5,"column_end":41}},{"value":"/ let input = b\"Hello world\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46526,"byte_end":46557,"line_start":1315,"line_end":1315,"column_start":5,"column_end":36}},{"value":"/ let mut output = \"Result: \".to_string();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46562,"byte_end":46606,"line_start":1316,"line_end":1316,"column_start":5,"column_end":49}},{"value":"/ BASE64.encode_append(input, &mut output);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46611,"byte_end":46656,"line_start":1317,"line_end":1317,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(output, \"Result: SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46661,"byte_end":46712,"line_start":1318,"line_end":1318,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46717,"byte_end":46724,"line_start":1319,"line_end":1319,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46729,"byte_end":46732,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46737,"byte_end":46751,"line_start":1321,"line_end":1321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46756,"byte_end":46759,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46764,"byte_end":46797,"line_start":1323,"line_end":1323,"column_start":5,"column_end":38}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":46802,"byte_end":46827,"line_start":1324,"line_end":1324,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47442,"byte_end":47448,"line_start":1345,"line_end":1345,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoding>::encode","value":"pub fn encode(&Self, &[u8]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns encoded `input`","sig":null,"attributes":[{"value":"/ Returns encoded `input`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47131,"byte_end":47158,"line_start":1332,"line_end":1332,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47163,"byte_end":47166,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47171,"byte_end":47185,"line_start":1334,"line_end":1334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47190,"byte_end":47193,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47198,"byte_end":47209,"line_start":1336,"line_end":1336,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47214,"byte_end":47244,"line_start":1337,"line_end":1337,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(BASE64.encode(b\"Hello world\"), \"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47249,"byte_end":47315,"line_start":1338,"line_end":1338,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47320,"byte_end":47327,"line_start":1339,"line_end":1339,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47332,"byte_end":47335,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47340,"byte_end":47354,"line_start":1341,"line_end":1341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47359,"byte_end":47362,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47367,"byte_end":47400,"line_start":1343,"line_end":1343,"column_start":5,"column_end":38}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47405,"byte_end":47430,"line_start":1344,"line_end":1344,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48147,"byte_end":48157,"line_start":1363,"line_end":1363,"column_start":12,"column_end":22},"name":"decode_len","qualname":"<Encoding>::decode_len","value":"pub fn decode_len(&Self, usize) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the decoded length of an input of length `len`","sig":null,"attributes":[{"value":"/ Returns the decoded length of an input of length `len`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47659,"byte_end":47717,"line_start":1351,"line_end":1351,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47722,"byte_end":47725,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ See [`decode_mut`] for when to use it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47730,"byte_end":47772,"line_start":1353,"line_end":1353,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47777,"byte_end":47780,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47785,"byte_end":47797,"line_start":1355,"line_end":1355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47802,"byte_end":47805,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `len` is invalid. The error kind is [`Length`] and the [position] is the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47810,"byte_end":47906,"line_start":1357,"line_end":1357,"column_start":5,"column_end":101}},{"value":"/ greatest valid input length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47911,"byte_end":47943,"line_start":1358,"line_end":1358,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47948,"byte_end":47951,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ [`decode_mut`]: struct.Encoding.html#method.decode_mut","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":47956,"byte_end":48014,"line_start":1360,"line_end":1360,"column_start":5,"column_end":63}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48019,"byte_end":48070,"line_start":1361,"line_end":1361,"column_start":5,"column_end":56}},{"value":"/ [position]: struct.DecodeError.html#structfield.position","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48075,"byte_end":48135,"line_start":1362,"line_end":1362,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50262,"byte_end":50272,"line_start":1414,"line_end":1414,"column_start":12,"column_end":22},"name":"decode_mut","qualname":"<Encoding>::decode_mut","value":"pub fn decode_mut(&Self, &[u8], &mut [u8]) -> Result<usize, DecodePartial>","parent":null,"children":[],"decl_id":null,"docs":" Decodes `input` in `output`","sig":null,"attributes":[{"value":"/ Decodes `input` in `output`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48563,"byte_end":48594,"line_start":1376,"line_end":1376,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48599,"byte_end":48602,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ Returns the length of the decoded output. This length may be smaller than the output length","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48607,"byte_end":48702,"line_start":1378,"line_end":1378,"column_start":5,"column_end":100}},{"value":"/ if the input contained padding or ignored characters. The output bytes after the returned","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48707,"byte_end":48800,"line_start":1379,"line_end":1379,"column_start":5,"column_end":98}},{"value":"/ length are not initialized and should not be read.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48805,"byte_end":48859,"line_start":1380,"line_end":1380,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48864,"byte_end":48867,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48872,"byte_end":48884,"line_start":1382,"line_end":1382,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48889,"byte_end":48892,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ Panics if the `output` length does not match the result of [`decode_len`] for the `input`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48897,"byte_end":48990,"line_start":1384,"line_end":1384,"column_start":5,"column_end":98}},{"value":"/ length. Also panics if `decode_len` fails for the `input` length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":48995,"byte_end":49064,"line_start":1385,"line_end":1385,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49069,"byte_end":49072,"line_start":1386,"line_end":1386,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49077,"byte_end":49089,"line_start":1387,"line_end":1387,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49094,"byte_end":49097,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` is invalid. See [`decode`] for more details. The are two","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49102,"byte_end":49190,"line_start":1389,"line_end":1389,"column_start":5,"column_end":93}},{"value":"/ differences though:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49195,"byte_end":49218,"line_start":1390,"line_end":1390,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49223,"byte_end":49226,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ - [`Length`] may be returned only if the encoding allows ignored characters, because","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49231,"byte_end":49319,"line_start":1392,"line_end":1392,"column_start":5,"column_end":93}},{"value":"/   otherwise this is already checked by [`decode_len`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49324,"byte_end":49382,"line_start":1393,"line_end":1393,"column_start":5,"column_end":63}},{"value":"/ - The [`read`] first bytes of the input have been successfully decoded to the [`written`]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49387,"byte_end":49480,"line_start":1394,"line_end":1394,"column_start":5,"column_end":98}},{"value":"/   first bytes of the output.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49485,"byte_end":49517,"line_start":1395,"line_end":1395,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49522,"byte_end":49525,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49530,"byte_end":49544,"line_start":1397,"line_end":1397,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49549,"byte_end":49552,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49557,"byte_end":49568,"line_start":1399,"line_end":1399,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49573,"byte_end":49603,"line_start":1400,"line_end":1400,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49608,"byte_end":49644,"line_start":1401,"line_end":1401,"column_start":5,"column_end":41}},{"value":"/ let input = b\"SGVsbA==byB3b3JsZA==\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49649,"byte_end":49689,"line_start":1402,"line_end":1402,"column_start":5,"column_end":45}},{"value":"/ let output = &mut buffer[0 .. BASE64.decode_len(input.len()).unwrap()];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49694,"byte_end":49769,"line_start":1403,"line_end":1403,"column_start":5,"column_end":80}},{"value":"/ let len = BASE64.decode_mut(input, output).unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49774,"byte_end":49830,"line_start":1404,"line_end":1404,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(&output[0 .. len], b\"Hello world\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49835,"byte_end":49885,"line_start":1405,"line_end":1405,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49890,"byte_end":49897,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49902,"byte_end":49905,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ [`decode_len`]: struct.Encoding.html#method.decode_len","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49910,"byte_end":49968,"line_start":1408,"line_end":1408,"column_start":5,"column_end":63}},{"value":"/ [`decode`]: struct.Encoding.html#method.decode","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":49973,"byte_end":50023,"line_start":1409,"line_end":1409,"column_start":5,"column_end":55}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50028,"byte_end":50079,"line_start":1410,"line_end":1410,"column_start":5,"column_end":56}},{"value":"/ [`read`]: struct.DecodePartial.html#structfield.read","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50084,"byte_end":50140,"line_start":1411,"line_end":1411,"column_start":5,"column_end":61}},{"value":"/ [`written`]: struct.DecodePartial.html#structfield.written","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50145,"byte_end":50207,"line_start":1412,"line_end":1412,"column_start":5,"column_end":67}},{"value":"allow(clippy :: cognitive_complexity)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50212,"byte_end":50250,"line_start":1413,"line_end":1413,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52180,"byte_end":52186,"line_start":1460,"line_end":1460,"column_start":12,"column_end":18},"name":"decode","qualname":"<Encoding>::decode","value":"pub fn decode(&Self, &[u8]) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns decoded `input`","sig":null,"attributes":[{"value":"/ Returns decoded `input`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50763,"byte_end":50790,"line_start":1426,"line_end":1426,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50795,"byte_end":50798,"line_start":1427,"line_end":1427,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50803,"byte_end":50815,"line_start":1428,"line_end":1428,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50820,"byte_end":50823,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` is invalid. The error kind can be:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50828,"byte_end":50894,"line_start":1430,"line_end":1430,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50899,"byte_end":50902,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ - [`Length`] if the input length is invalid. The [position] is the greatest valid input","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":50907,"byte_end":50998,"line_start":1432,"line_end":1432,"column_start":5,"column_end":96}},{"value":"/   length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51003,"byte_end":51016,"line_start":1433,"line_end":1433,"column_start":5,"column_end":18}},{"value":"/ - [`Symbol`] if the input contains an invalid character. The [position] is the first invalid","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51021,"byte_end":51117,"line_start":1434,"line_end":1434,"column_start":5,"column_end":101}},{"value":"/   character.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51122,"byte_end":51138,"line_start":1435,"line_end":1435,"column_start":5,"column_end":21}},{"value":"/ - [`Trailing`] if the input has non-zero trailing bits. This is only possible if the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51143,"byte_end":51231,"line_start":1436,"line_end":1436,"column_start":5,"column_end":93}},{"value":"/   encoding checks trailing bits. The [position] is the first character containing non-zero","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51236,"byte_end":51330,"line_start":1437,"line_end":1437,"column_start":5,"column_end":99}},{"value":"/   trailing bits.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51335,"byte_end":51355,"line_start":1438,"line_end":1438,"column_start":5,"column_end":25}},{"value":"/ - [`Padding`] if the input has an invalid padding length. This is only possible if the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51360,"byte_end":51450,"line_start":1439,"line_end":1439,"column_start":5,"column_end":95}},{"value":"/   encoding uses padding. The [position] is the first padding character of the first padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51455,"byte_end":51550,"line_start":1440,"line_end":1440,"column_start":5,"column_end":100}},{"value":"/   of invalid length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51555,"byte_end":51579,"line_start":1441,"line_end":1441,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51584,"byte_end":51587,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51592,"byte_end":51606,"line_start":1443,"line_end":1443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51611,"byte_end":51614,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51619,"byte_end":51630,"line_start":1445,"line_end":1445,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51635,"byte_end":51665,"line_start":1446,"line_end":1446,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(BASE64.decode(b\"SGVsbA==byB3b3JsZA==\").unwrap(), b\"Hello world\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51670,"byte_end":51750,"line_start":1447,"line_end":1447,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51755,"byte_end":51762,"line_start":1448,"line_end":1448,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51767,"byte_end":51770,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51775,"byte_end":51789,"line_start":1450,"line_end":1450,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51794,"byte_end":51797,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51802,"byte_end":51835,"line_start":1452,"line_end":1452,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51840,"byte_end":51843,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51848,"byte_end":51899,"line_start":1454,"line_end":1454,"column_start":5,"column_end":56}},{"value":"/ [`Symbol`]: enum.DecodeKind.html#variant.Symbol","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51904,"byte_end":51955,"line_start":1455,"line_end":1455,"column_start":5,"column_end":56}},{"value":"/ [`Trailing`]: enum.DecodeKind.html#variant.Trailing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":51960,"byte_end":52015,"line_start":1456,"line_end":1456,"column_start":5,"column_end":60}},{"value":"/ [`Padding`]: enum.DecodeKind.html#variant.Padding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52020,"byte_end":52073,"line_start":1457,"line_end":1457,"column_start":5,"column_end":58}},{"value":"/ [position]: struct.DecodeError.html#structfield.position","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52078,"byte_end":52138,"line_start":1458,"line_end":1458,"column_start":5,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52143,"byte_end":52168,"line_start":1459,"line_end":1459,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52495,"byte_end":52504,"line_start":1468,"line_end":1468,"column_start":12,"column_end":21},"name":"bit_width","qualname":"<Encoding>::bit_width","value":"pub fn bit_width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the bit-width\n","sig":null,"attributes":[{"value":"/ Returns the bit-width","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52458,"byte_end":52483,"line_start":1467,"line_end":1467,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52840,"byte_end":52852,"line_start":1480,"line_end":1480,"column_start":12,"column_end":24},"name":"is_canonical","qualname":"<Encoding>::is_canonical","value":"pub fn is_canonical(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the encoding is canonical","sig":null,"attributes":[{"value":"/ Returns whether the encoding is canonical","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52553,"byte_end":52598,"line_start":1472,"line_end":1472,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52603,"byte_end":52606,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ An encoding is not canonical if one of the following conditions holds:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52611,"byte_end":52685,"line_start":1474,"line_end":1474,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52690,"byte_end":52693,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ - trailing bits are not checked","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52698,"byte_end":52733,"line_start":1476,"line_end":1476,"column_start":5,"column_end":40}},{"value":"/ - padding is used","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52738,"byte_end":52759,"line_start":1477,"line_end":1477,"column_start":5,"column_end":26}},{"value":"/ - characters are ignored","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52764,"byte_end":52792,"line_start":1478,"line_end":1478,"column_start":5,"column_end":33}},{"value":"/ - characters are translated","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":52797,"byte_end":52828,"line_start":1479,"line_end":1479,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53484,"byte_end":53497,"line_start":1507,"line_end":1507,"column_start":12,"column_end":25},"name":"specification","qualname":"<Encoding>::specification","value":"pub fn specification(&Self) -> Specification","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoding specification","sig":null,"attributes":[{"value":"/ Returns the encoding specification","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53331,"byte_end":53369,"line_start":1501,"line_end":1501,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53374,"byte_end":53377,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53382,"byte_end":53396,"line_start":1503,"line_end":1503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53401,"byte_end":53404,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53409,"byte_end":53442,"line_start":1505,"line_end":1505,"column_start":5,"column_end":38}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":53447,"byte_end":53472,"line_start":1506,"line_end":1506,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":54949,"byte_end":54961,"line_start":1546,"line_end":1546,"column_start":18,"column_end":30},"name":"internal_new","qualname":"<Encoding>::internal_new","value":"pub const fn internal_new(&'static [u8]) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55247,"byte_end":55270,"line_start":1555,"line_end":1555,"column_start":12,"column_end":35},"name":"internal_implementation","qualname":"<Encoding>::internal_implementation","value":"pub fn internal_implementation(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55745,"byte_end":55763,"line_start":1582,"line_end":1582,"column_start":12,"column_end":30},"name":"SpecificationError","qualname":"::SpecificationError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Specification error","sig":null,"attributes":[{"value":"/ Specification error","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55597,"byte_end":55620,"line_start":1575,"line_end":1575,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55621,"byte_end":55624,"line_start":1576,"line_end":1576,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55625,"byte_end":55639,"line_start":1577,"line_end":1577,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55640,"byte_end":55643,"line_start":1578,"line_end":1578,"column_start":1,"column_end":4}},{"value":"/ Requires the `alloc` feature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55644,"byte_end":55677,"line_start":1579,"line_end":1579,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55708,"byte_end":55733,"line_start":1581,"line_end":1581,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57232,"byte_end":57235,"line_start":1619,"line_end":1619,"column_start":12,"column_end":15},"name":"new","qualname":"<Specification>::new","value":"pub fn new() -> Specification","parent":null,"children":[],"decl_id":null,"docs":" Returns a default specification\n","sig":null,"attributes":[{"value":"/ Returns a default specification","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57185,"byte_end":57220,"line_start":1618,"line_end":1618,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57761,"byte_end":57769,"line_start":1636,"line_end":1636,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Specification>::encoding","value":"pub fn encoding(&Self) -> Result<Encoding, SpecificationError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the specified encoding","sig":null,"attributes":[{"value":"/ Returns the specified encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57624,"byte_end":57658,"line_start":1631,"line_end":1631,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57663,"byte_end":57666,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57671,"byte_end":57683,"line_start":1633,"line_end":1633,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57688,"byte_end":57691,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the specification is invalid.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57696,"byte_end":57749,"line_start":1635,"line_end":1635,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":179},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61430,"byte_end":61438,"line_start":1741,"line_end":1741,"column_start":11,"column_end":19},"name":"HEXLOWER","qualname":"::HEXLOWER","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Lowercase hexadecimal encoding","sig":null,"attributes":[{"value":"/ Lowercase hexadecimal encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":60877,"byte_end":60911,"line_start":1722,"line_end":1722,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":60912,"byte_end":60915,"line_start":1723,"line_end":1723,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":60916,"byte_end":60957,"line_start":1724,"line_end":1724,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":60958,"byte_end":60961,"line_start":1725,"line_end":1725,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":60962,"byte_end":60973,"line_start":1726,"line_end":1726,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXLOWER};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":60974,"byte_end":61025,"line_start":1727,"line_end":1727,"column_start":1,"column_end":52}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61026,"byte_end":61066,"line_start":1728,"line_end":1728,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61067,"byte_end":61113,"line_start":1729,"line_end":1729,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(HEXLOWER, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61114,"byte_end":61165,"line_start":1730,"line_end":1730,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61166,"byte_end":61173,"line_start":1731,"line_end":1731,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61174,"byte_end":61177,"line_start":1732,"line_end":1732,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61178,"byte_end":61192,"line_start":1733,"line_end":1733,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61193,"byte_end":61196,"line_start":1734,"line_end":1734,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61197,"byte_end":61208,"line_start":1735,"line_end":1735,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXLOWER;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61209,"byte_end":61241,"line_start":1736,"line_end":1736,"column_start":1,"column_end":33}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61242,"byte_end":61290,"line_start":1737,"line_end":1737,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXLOWER.decode(b\"deadbeef\").unwrap(), deadbeef);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61291,"byte_end":61355,"line_start":1738,"line_end":1738,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(HEXLOWER.encode(&deadbeef), \"deadbeef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61356,"byte_end":61411,"line_start":1739,"line_end":1739,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":61412,"byte_end":61419,"line_start":1740,"line_end":1740,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":181},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64857,"byte_end":64876,"line_start":1798,"line_end":1798,"column_start":11,"column_end":30},"name":"HEXLOWER_PERMISSIVE","qualname":"::HEXLOWER_PERMISSIVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Lowercase hexadecimal encoding with case-insensitive decoding","sig":null,"attributes":[{"value":"/ Lowercase hexadecimal encoding with case-insensitive decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":63961,"byte_end":64026,"line_start":1770,"line_end":1770,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64027,"byte_end":64030,"line_start":1771,"line_end":1771,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64031,"byte_end":64072,"line_start":1772,"line_end":1772,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64073,"byte_end":64076,"line_start":1773,"line_end":1773,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64077,"byte_end":64088,"line_start":1774,"line_end":1774,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXLOWER_PERMISSIVE};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64089,"byte_end":64151,"line_start":1775,"line_end":1775,"column_start":1,"column_end":63}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64152,"byte_end":64192,"line_start":1776,"line_end":1776,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64193,"byte_end":64239,"line_start":1777,"line_end":1777,"column_start":1,"column_end":47}},{"value":"/ spec.translate.from.push_str(\"ABCDEF\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64240,"byte_end":64283,"line_start":1778,"line_end":1778,"column_start":1,"column_end":44}},{"value":"/ spec.translate.to.push_str(\"abcdef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64284,"byte_end":64325,"line_start":1779,"line_end":1779,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64326,"byte_end":64388,"line_start":1780,"line_end":1780,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64389,"byte_end":64396,"line_start":1781,"line_end":1781,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64397,"byte_end":64400,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64401,"byte_end":64415,"line_start":1783,"line_end":1783,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64416,"byte_end":64419,"line_start":1784,"line_end":1784,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64420,"byte_end":64431,"line_start":1785,"line_end":1785,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXLOWER_PERMISSIVE;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64432,"byte_end":64475,"line_start":1786,"line_end":1786,"column_start":1,"column_end":44}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64476,"byte_end":64524,"line_start":1787,"line_end":1787,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE.decode(b\"DeadBeef\").unwrap(), deadbeef);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64525,"byte_end":64600,"line_start":1788,"line_end":1788,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE.encode(&deadbeef), \"deadbeef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64601,"byte_end":64667,"line_start":1789,"line_end":1789,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64668,"byte_end":64675,"line_start":1790,"line_end":1790,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64676,"byte_end":64679,"line_start":1791,"line_end":1791,"column_start":1,"column_end":4}},{"value":"/ You can also define a shorter name:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64680,"byte_end":64719,"line_start":1792,"line_end":1792,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64720,"byte_end":64723,"line_start":1793,"line_end":1793,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64724,"byte_end":64735,"line_start":1794,"line_end":1794,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Encoding, HEXLOWER_PERMISSIVE};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64736,"byte_end":64791,"line_start":1795,"line_end":1795,"column_start":1,"column_end":56}},{"value":"/ const HEX: Encoding = HEXLOWER_PERMISSIVE;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64792,"byte_end":64838,"line_start":1796,"line_end":1796,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":64839,"byte_end":64846,"line_start":1797,"line_end":1797,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":183},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":68104,"byte_end":68112,"line_start":1850,"line_end":1850,"column_start":11,"column_end":19},"name":"HEXUPPER","qualname":"::HEXUPPER","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Uppercase hexadecimal encoding","sig":null,"attributes":[{"value":"/ Uppercase hexadecimal encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67415,"byte_end":67449,"line_start":1827,"line_end":1827,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67450,"byte_end":67453,"line_start":1828,"line_end":1828,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67454,"byte_end":67495,"line_start":1829,"line_end":1829,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67496,"byte_end":67499,"line_start":1830,"line_end":1830,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67500,"byte_end":67511,"line_start":1831,"line_end":1831,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXUPPER};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67512,"byte_end":67563,"line_start":1832,"line_end":1832,"column_start":1,"column_end":52}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67564,"byte_end":67604,"line_start":1833,"line_end":1833,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEF\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67605,"byte_end":67651,"line_start":1834,"line_end":1834,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(HEXUPPER, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67652,"byte_end":67703,"line_start":1835,"line_end":1835,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67704,"byte_end":67711,"line_start":1836,"line_end":1836,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67712,"byte_end":67715,"line_start":1837,"line_end":1837,"column_start":1,"column_end":4}},{"value":"/ It is compliant with [RFC4648] and known as \"base16\" or \"hex\".","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67716,"byte_end":67782,"line_start":1838,"line_end":1838,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67783,"byte_end":67786,"line_start":1839,"line_end":1839,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67787,"byte_end":67801,"line_start":1840,"line_end":1840,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67802,"byte_end":67805,"line_start":1841,"line_end":1841,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67806,"byte_end":67817,"line_start":1842,"line_end":1842,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXUPPER;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67818,"byte_end":67850,"line_start":1843,"line_end":1843,"column_start":1,"column_end":33}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67851,"byte_end":67899,"line_start":1844,"line_end":1844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXUPPER.decode(b\"DEADBEEF\").unwrap(), deadbeef);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67900,"byte_end":67964,"line_start":1845,"line_end":1845,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(HEXUPPER.encode(&deadbeef), \"DEADBEEF\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":67965,"byte_end":68020,"line_start":1846,"line_end":1846,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":68021,"byte_end":68028,"line_start":1847,"line_end":1847,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":68029,"byte_end":68032,"line_start":1848,"line_end":1848,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-8","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":68033,"byte_end":68093,"line_start":1849,"line_end":1849,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":185},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71308,"byte_end":71327,"line_start":1899,"line_end":1899,"column_start":11,"column_end":30},"name":"HEXUPPER_PERMISSIVE","qualname":"::HEXUPPER_PERMISSIVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Uppercase hexadecimal encoding with case-insensitive decoding","sig":null,"attributes":[{"value":"/ Uppercase hexadecimal encoding with case-insensitive decoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70583,"byte_end":70648,"line_start":1878,"line_end":1878,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70649,"byte_end":70652,"line_start":1879,"line_end":1879,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70653,"byte_end":70694,"line_start":1880,"line_end":1880,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70695,"byte_end":70698,"line_start":1881,"line_end":1881,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70699,"byte_end":70710,"line_start":1882,"line_end":1882,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXUPPER_PERMISSIVE};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70711,"byte_end":70773,"line_start":1883,"line_end":1883,"column_start":1,"column_end":63}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70774,"byte_end":70814,"line_start":1884,"line_end":1884,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEF\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70815,"byte_end":70861,"line_start":1885,"line_end":1885,"column_start":1,"column_end":47}},{"value":"/ spec.translate.from.push_str(\"abcdef\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70862,"byte_end":70905,"line_start":1886,"line_end":1886,"column_start":1,"column_end":44}},{"value":"/ spec.translate.to.push_str(\"ABCDEF\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70906,"byte_end":70947,"line_start":1887,"line_end":1887,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":70948,"byte_end":71010,"line_start":1888,"line_end":1888,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71011,"byte_end":71018,"line_start":1889,"line_end":1889,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71019,"byte_end":71022,"line_start":1890,"line_end":1890,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71023,"byte_end":71037,"line_start":1891,"line_end":1891,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71038,"byte_end":71041,"line_start":1892,"line_end":1892,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71042,"byte_end":71053,"line_start":1893,"line_end":1893,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXUPPER_PERMISSIVE;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71054,"byte_end":71097,"line_start":1894,"line_end":1894,"column_start":1,"column_end":44}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71098,"byte_end":71146,"line_start":1895,"line_end":1895,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE.decode(b\"DeadBeef\").unwrap(), deadbeef);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71147,"byte_end":71222,"line_start":1896,"line_end":1896,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE.encode(&deadbeef), \"DEADBEEF\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71223,"byte_end":71289,"line_start":1897,"line_end":1897,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":71290,"byte_end":71297,"line_start":1898,"line_end":1898,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":187},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74256,"byte_end":74262,"line_start":1942,"line_end":1942,"column_start":11,"column_end":17},"name":"BASE32","qualname":"::BASE32","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base32 encoding","sig":null,"attributes":[{"value":"/ Padded base32 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73814,"byte_end":73840,"line_start":1927,"line_end":1927,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73841,"byte_end":73844,"line_start":1928,"line_end":1928,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73845,"byte_end":73886,"line_start":1929,"line_end":1929,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73887,"byte_end":73890,"line_start":1930,"line_end":1930,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73891,"byte_end":73902,"line_start":1931,"line_end":1931,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73903,"byte_end":73952,"line_start":1932,"line_end":1932,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73953,"byte_end":73993,"line_start":1933,"line_end":1933,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":73994,"byte_end":74056,"line_start":1934,"line_end":1934,"column_start":1,"column_end":63}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74057,"byte_end":74086,"line_start":1935,"line_end":1935,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE32, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74087,"byte_end":74136,"line_start":1936,"line_end":1936,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74137,"byte_end":74144,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74145,"byte_end":74148,"line_start":1938,"line_end":1938,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74149,"byte_end":74180,"line_start":1939,"line_end":1939,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74181,"byte_end":74184,"line_start":1940,"line_end":1940,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-6","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":74185,"byte_end":74245,"line_start":1941,"line_end":1941,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":189},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":77037,"byte_end":77049,"line_start":1980,"line_end":1980,"column_start":11,"column_end":23},"name":"BASE32_NOPAD","qualname":"::BASE32_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base32 encoding","sig":null,"attributes":[{"value":"/ Unpadded base32 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76712,"byte_end":76740,"line_start":1970,"line_end":1970,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76741,"byte_end":76744,"line_start":1971,"line_end":1971,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76745,"byte_end":76786,"line_start":1972,"line_end":1972,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76787,"byte_end":76790,"line_start":1973,"line_end":1973,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76791,"byte_end":76802,"line_start":1974,"line_end":1974,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32_NOPAD};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76803,"byte_end":76858,"line_start":1975,"line_end":1975,"column_start":1,"column_end":56}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76859,"byte_end":76899,"line_start":1976,"line_end":1976,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76900,"byte_end":76962,"line_start":1977,"line_end":1977,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(BASE32_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":76963,"byte_end":77018,"line_start":1978,"line_end":1978,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":77019,"byte_end":77026,"line_start":1979,"line_end":1979,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":191},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79963,"byte_end":79972,"line_start":2023,"line_end":2023,"column_start":11,"column_end":20},"name":"BASE32HEX","qualname":"::BASE32HEX","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base32hex encoding","sig":null,"attributes":[{"value":"/ Padded base32hex encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79512,"byte_end":79541,"line_start":2008,"line_end":2008,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79542,"byte_end":79545,"line_start":2009,"line_end":2009,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79546,"byte_end":79587,"line_start":2010,"line_end":2010,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79588,"byte_end":79591,"line_start":2011,"line_end":2011,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79592,"byte_end":79603,"line_start":2012,"line_end":2012,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32HEX};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79604,"byte_end":79656,"line_start":2013,"line_end":2013,"column_start":1,"column_end":53}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79657,"byte_end":79697,"line_start":2014,"line_end":2014,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79698,"byte_end":79760,"line_start":2015,"line_end":2015,"column_start":1,"column_end":63}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79761,"byte_end":79790,"line_start":2016,"line_end":2016,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE32HEX, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79791,"byte_end":79843,"line_start":2017,"line_end":2017,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79844,"byte_end":79851,"line_start":2018,"line_end":2018,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79852,"byte_end":79855,"line_start":2019,"line_end":2019,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79856,"byte_end":79887,"line_start":2020,"line_end":2020,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79888,"byte_end":79891,"line_start":2021,"line_end":2021,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-7","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":79892,"byte_end":79952,"line_start":2022,"line_end":2022,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":193},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82762,"byte_end":82777,"line_start":2061,"line_end":2061,"column_start":11,"column_end":26},"name":"BASE32HEX_NOPAD","qualname":"::BASE32HEX_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base32hex encoding","sig":null,"attributes":[{"value":"/ Unpadded base32hex encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82428,"byte_end":82459,"line_start":2051,"line_end":2051,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82460,"byte_end":82463,"line_start":2052,"line_end":2052,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82464,"byte_end":82505,"line_start":2053,"line_end":2053,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82506,"byte_end":82509,"line_start":2054,"line_end":2054,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82510,"byte_end":82521,"line_start":2055,"line_end":2055,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32HEX_NOPAD};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82522,"byte_end":82580,"line_start":2056,"line_end":2056,"column_start":1,"column_end":59}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82581,"byte_end":82621,"line_start":2057,"line_end":2057,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82622,"byte_end":82684,"line_start":2058,"line_end":2058,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(BASE32HEX_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82685,"byte_end":82743,"line_start":2059,"line_end":2059,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":82744,"byte_end":82751,"line_start":2060,"line_end":2060,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":195},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85938,"byte_end":85951,"line_start":2109,"line_end":2109,"column_start":11,"column_end":24},"name":"BASE32_DNSSEC","qualname":"::BASE32_DNSSEC","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" DNSSEC base32 encoding","sig":null,"attributes":[{"value":"/ DNSSEC base32 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85246,"byte_end":85272,"line_start":2089,"line_end":2089,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85273,"byte_end":85276,"line_start":2090,"line_end":2090,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85277,"byte_end":85318,"line_start":2091,"line_end":2091,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85319,"byte_end":85322,"line_start":2092,"line_end":2092,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85323,"byte_end":85334,"line_start":2093,"line_end":2093,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32_DNSSEC};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85335,"byte_end":85391,"line_start":2094,"line_end":2094,"column_start":1,"column_end":57}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85392,"byte_end":85432,"line_start":2095,"line_end":2095,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdefghijklmnopqrstuv\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85433,"byte_end":85495,"line_start":2096,"line_end":2096,"column_start":1,"column_end":63}},{"value":"/ spec.translate.from.push_str(\"ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85496,"byte_end":85555,"line_start":2097,"line_end":2097,"column_start":1,"column_end":60}},{"value":"/ spec.translate.to.push_str(\"abcdefghijklmnopqrstuv\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85556,"byte_end":85613,"line_start":2098,"line_end":2098,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(BASE32_DNSSEC, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85614,"byte_end":85670,"line_start":2099,"line_end":2099,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85671,"byte_end":85678,"line_start":2100,"line_end":2100,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85679,"byte_end":85682,"line_start":2101,"line_end":2101,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC5155]:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85683,"byte_end":85714,"line_start":2102,"line_end":2102,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85715,"byte_end":85718,"line_start":2103,"line_end":2103,"column_start":1,"column_end":4}},{"value":"/ - It uses a base32 extended hex alphabet.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85719,"byte_end":85764,"line_start":2104,"line_end":2104,"column_start":1,"column_end":46}},{"value":"/ - It is case-insensitive when decoding and uses lowercase when encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85765,"byte_end":85841,"line_start":2105,"line_end":2105,"column_start":1,"column_end":77}},{"value":"/ - It does not use padding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85842,"byte_end":85872,"line_start":2106,"line_end":2106,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85873,"byte_end":85876,"line_start":2107,"line_end":2107,"column_start":1,"column_end":4}},{"value":"/ [RFC5155]: https://tools.ietf.org/html/rfc5155","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":85877,"byte_end":85927,"line_start":2108,"line_end":2108,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":197},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":89163,"byte_end":89178,"line_start":2156,"line_end":2156,"column_start":11,"column_end":26},"name":"BASE32_DNSCURVE","qualname":"::BASE32_DNSCURVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" DNSCurve base32 encoding","sig":null,"attributes":[{"value":"/ DNSCurve base32 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88554,"byte_end":88582,"line_start":2139,"line_end":2139,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88583,"byte_end":88586,"line_start":2140,"line_end":2140,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88587,"byte_end":88628,"line_start":2141,"line_end":2141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88629,"byte_end":88632,"line_start":2142,"line_end":2142,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88633,"byte_end":88644,"line_start":2143,"line_end":2143,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{BitOrder, Specification, BASE32_DNSCURVE};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88645,"byte_end":88713,"line_start":2144,"line_end":2144,"column_start":1,"column_end":69}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88714,"byte_end":88754,"line_start":2145,"line_end":2145,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789bcdfghjklmnpqrstuvwxyz\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88755,"byte_end":88817,"line_start":2146,"line_end":2146,"column_start":1,"column_end":63}},{"value":"/ spec.bit_order = BitOrder::LeastSignificantFirst;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88818,"byte_end":88871,"line_start":2147,"line_end":2147,"column_start":1,"column_end":54}},{"value":"/ spec.translate.from.push_str(\"BCDFGHJKLMNPQRSTUVWXYZ\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88872,"byte_end":88931,"line_start":2148,"line_end":2148,"column_start":1,"column_end":60}},{"value":"/ spec.translate.to.push_str(\"bcdfghjklmnpqrstuvwxyz\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88932,"byte_end":88989,"line_start":2149,"line_end":2149,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(BASE32_DNSCURVE, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":88990,"byte_end":89048,"line_start":2150,"line_end":2150,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":89049,"byte_end":89056,"line_start":2151,"line_end":2151,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":89057,"byte_end":89060,"line_start":2152,"line_end":2152,"column_start":1,"column_end":4}},{"value":"/ It is conform to [DNSCurve].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":89061,"byte_end":89093,"line_start":2153,"line_end":2153,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":89094,"byte_end":89097,"line_start":2154,"line_end":2154,"column_start":1,"column_end":4}},{"value":"/ [DNSCurve]: https://dnscurve.org/in-implement.html","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":89098,"byte_end":89152,"line_start":2155,"line_end":2155,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":199},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92267,"byte_end":92273,"line_start":2201,"line_end":2201,"column_start":11,"column_end":17},"name":"BASE64","qualname":"::BASE64","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base64 encoding","sig":null,"attributes":[{"value":"/ Padded base64 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91793,"byte_end":91819,"line_start":2186,"line_end":2186,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91820,"byte_end":91823,"line_start":2187,"line_end":2187,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91824,"byte_end":91865,"line_start":2188,"line_end":2188,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91866,"byte_end":91869,"line_start":2189,"line_end":2189,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91870,"byte_end":91881,"line_start":2190,"line_end":2190,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91882,"byte_end":91931,"line_start":2191,"line_end":2191,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91932,"byte_end":91972,"line_start":2192,"line_end":2192,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":91973,"byte_end":92067,"line_start":2193,"line_end":2193,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92068,"byte_end":92097,"line_start":2194,"line_end":2194,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE64, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92098,"byte_end":92147,"line_start":2195,"line_end":2195,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92148,"byte_end":92155,"line_start":2196,"line_end":2196,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92156,"byte_end":92159,"line_start":2197,"line_end":2197,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92160,"byte_end":92191,"line_start":2198,"line_end":2198,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92192,"byte_end":92195,"line_start":2199,"line_end":2199,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-4","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":92196,"byte_end":92256,"line_start":2200,"line_end":2200,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":201},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":95144,"byte_end":95156,"line_start":2240,"line_end":2240,"column_start":11,"column_end":23},"name":"BASE64_NOPAD","qualname":"::BASE64_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base64 encoding","sig":null,"attributes":[{"value":"/ Unpadded base64 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94787,"byte_end":94815,"line_start":2230,"line_end":2230,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94816,"byte_end":94819,"line_start":2231,"line_end":2231,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94820,"byte_end":94861,"line_start":2232,"line_end":2232,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94862,"byte_end":94865,"line_start":2233,"line_end":2233,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94866,"byte_end":94877,"line_start":2234,"line_end":2234,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64_NOPAD};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94878,"byte_end":94933,"line_start":2235,"line_end":2235,"column_start":1,"column_end":56}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94934,"byte_end":94974,"line_start":2236,"line_end":2236,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":94975,"byte_end":95069,"line_start":2237,"line_end":2237,"column_start":1,"column_end":95}},{"value":"/ assert_eq!(BASE64_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":95070,"byte_end":95125,"line_start":2238,"line_end":2238,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":95126,"byte_end":95133,"line_start":2239,"line_end":2239,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":203},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98317,"byte_end":98328,"line_start":2287,"line_end":2287,"column_start":11,"column_end":22},"name":"BASE64_MIME","qualname":"::BASE64_MIME","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" MIME base64 encoding","sig":null,"attributes":[{"value":"/ MIME base64 encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97683,"byte_end":97707,"line_start":2269,"line_end":2269,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97708,"byte_end":97711,"line_start":2270,"line_end":2270,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97712,"byte_end":97753,"line_start":2271,"line_end":2271,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97754,"byte_end":97757,"line_start":2272,"line_end":2272,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97758,"byte_end":97769,"line_start":2273,"line_end":2273,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, Wrap, BASE64_MIME};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97770,"byte_end":97830,"line_start":2274,"line_end":2274,"column_start":1,"column_end":61}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97831,"byte_end":97871,"line_start":2275,"line_end":2275,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97872,"byte_end":97966,"line_start":2276,"line_end":2276,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97967,"byte_end":97996,"line_start":2277,"line_end":2277,"column_start":1,"column_end":30}},{"value":"/ spec.wrap.width = 76;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":97997,"byte_end":98022,"line_start":2278,"line_end":2278,"column_start":1,"column_end":26}},{"value":"/ spec.wrap.separator.push_str(\"\\r\\n\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98023,"byte_end":98064,"line_start":2279,"line_end":2279,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(BASE64_MIME, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98065,"byte_end":98119,"line_start":2280,"line_end":2280,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98120,"byte_end":98127,"line_start":2281,"line_end":2281,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98128,"byte_end":98131,"line_start":2282,"line_end":2282,"column_start":1,"column_end":4}},{"value":"/ It is not exactly conform to [RFC2045] because it does not print the header","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98132,"byte_end":98211,"line_start":2283,"line_end":2283,"column_start":1,"column_end":80}},{"value":"/ and does not ignore all characters.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98212,"byte_end":98251,"line_start":2284,"line_end":2284,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98252,"byte_end":98255,"line_start":2285,"line_end":2285,"column_start":1,"column_end":4}},{"value":"/ [RFC2045]: https://tools.ietf.org/html/rfc2045","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":98256,"byte_end":98306,"line_start":2286,"line_end":2286,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":205},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101347,"byte_end":101356,"line_start":2331,"line_end":2331,"column_start":11,"column_end":20},"name":"BASE64URL","qualname":"::BASE64URL","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base64url encoding","sig":null,"attributes":[{"value":"/ Padded base64url encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":100864,"byte_end":100893,"line_start":2316,"line_end":2316,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":100894,"byte_end":100897,"line_start":2317,"line_end":2317,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":100898,"byte_end":100939,"line_start":2318,"line_end":2318,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":100940,"byte_end":100943,"line_start":2319,"line_end":2319,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":100944,"byte_end":100955,"line_start":2320,"line_end":2320,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64URL};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":100956,"byte_end":101008,"line_start":2321,"line_end":2321,"column_start":1,"column_end":53}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101009,"byte_end":101049,"line_start":2322,"line_end":2322,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101050,"byte_end":101144,"line_start":2323,"line_end":2323,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101145,"byte_end":101174,"line_start":2324,"line_end":2324,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE64URL, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101175,"byte_end":101227,"line_start":2325,"line_end":2325,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101228,"byte_end":101235,"line_start":2326,"line_end":2326,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101236,"byte_end":101239,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101240,"byte_end":101271,"line_start":2328,"line_end":2328,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101272,"byte_end":101275,"line_start":2329,"line_end":2329,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-5","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":101276,"byte_end":101336,"line_start":2330,"line_end":2330,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":207},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":104242,"byte_end":104257,"line_start":2370,"line_end":2370,"column_start":11,"column_end":26},"name":"BASE64URL_NOPAD","qualname":"::BASE64URL_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base64url encoding","sig":null,"attributes":[{"value":"/ Unpadded base64url encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":103876,"byte_end":103907,"line_start":2360,"line_end":2360,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":103908,"byte_end":103911,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":103912,"byte_end":103953,"line_start":2362,"line_end":2362,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":103954,"byte_end":103957,"line_start":2363,"line_end":2363,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":103958,"byte_end":103969,"line_start":2364,"line_end":2364,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64URL_NOPAD};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":103970,"byte_end":104028,"line_start":2365,"line_end":2365,"column_start":1,"column_end":59}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":104029,"byte_end":104069,"line_start":2366,"line_end":2366,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":104070,"byte_end":104164,"line_start":2367,"line_end":2367,"column_start":1,"column_end":95}},{"value":"/ assert_eq!(BASE64URL_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":104165,"byte_end":104223,"line_start":2368,"line_end":2368,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":104224,"byte_end":104231,"line_start":2369,"line_end":2369,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":7965,"byte_end":7967,"line_start":198,"line_end":198,"column_start":37,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":8101,"byte_end":8103,"line_start":207,"line_end":207,"column_start":37,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10329,"byte_end":10339,"line_start":294,"line_end":294,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11078,"byte_end":11089,"line_start":319,"line_end":319,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11145,"byte_end":11156,"line_start":322,"line_end":322,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43943,"byte_end":43956,"line_start":1217,"line_end":1217,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44020,"byte_end":44028,"line_start":1223,"line_end":1223,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55844,"byte_end":55862,"line_start":1585,"line_end":1585,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":56595,"byte_end":56613,"line_start":1601,"line_end":1601,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57165,"byte_end":57178,"line_start":1617,"line_end":1617,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":7410,"byte_end":7414,"line_start":170,"line_end":170,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2048},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":7965,"byte_end":7967,"line_start":198,"line_end":198,"column_start":37,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":265},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":8101,"byte_end":8103,"line_start":207,"line_end":207,"column_start":37,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":270},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":10329,"byte_end":10339,"line_start":294,"line_end":294,"column_start":28,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":279},"to":{"krate":1,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11078,"byte_end":11089,"line_start":319,"line_end":319,"column_start":28,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":299},"to":{"krate":5,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":11145,"byte_end":11156,"line_start":322,"line_end":322,"column_start":28,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":299},"to":{"krate":1,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":43943,"byte_end":43956,"line_start":1217,"line_end":1217,"column_start":18,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":44020,"byte_end":44028,"line_start":1223,"line_end":1223,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":55844,"byte_end":55862,"line_start":1585,"line_end":1585,"column_start":29,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":411},"to":{"krate":1,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":56595,"byte_end":56613,"line_start":1601,"line_end":1601,"column_start":28,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":411},"to":{"krate":5,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.1/src/lib.rs","byte_start":57165,"byte_end":57178,"line_start":1617,"line_end":1617,"column_start":6,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":374},"to":{"krate":4294967295,"index":4294967295}}]}