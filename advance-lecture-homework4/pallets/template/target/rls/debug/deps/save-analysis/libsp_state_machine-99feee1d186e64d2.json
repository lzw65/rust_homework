{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_state_machine","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"log\"","--cfg","feature=\"parking_lot\"","--cfg","feature=\"rand\"","--cfg","feature=\"sp-panic-handler\"","--cfg","feature=\"std\"","-C","metadata=99feee1d186e64d2","-C","extra-filename=-99feee1d186e64d2","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps","--extern","hash_db=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libhash_db-17ba13a151e0a3ca.rmeta","--extern","log=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/liblog-e2edfe49f297c73c.rmeta","--extern","num_traits=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libnum_traits-46b732eafcd58ded.rmeta","--extern","codec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libparity_scale_codec-c2a3c300da64cba4.rmeta","--extern","parking_lot=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libparking_lot-630a5497b3c4f85c.rmeta","--extern","rand=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/librand-228073a7435082b8.rmeta","--extern","smallvec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsmallvec-ec7d1f646ba11906.rmeta","--extern","sp_core=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_core-717447d3c8b452e7.rmeta","--extern","sp_externalities=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_externalities-f1ab6969bc7bb774.rmeta","--extern","sp_panic_handler=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_panic_handler-dae5f6188804fdea.rmeta","--extern","sp_std=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_std-e8e779e008c5c2c6.rmeta","--extern","sp_trie=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_trie-6300259d54b10f8b.rmeta","--extern","trie_db=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libtrie_db-84037ccb8f399874.rmeta","--extern","trie_root=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libtrie_root-39caa9871aae690b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_state_machine-99feee1d186e64d2.rmeta"},"prelude":{"crate_id":{"name":"sp_state_machine","disambiguator":[16871039762670672788,2893481927570229250]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":18,"id":{"name":"hash_db","disambiguator":[1694494872242499477,7973777796579231756]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":19,"id":{"name":"parity_scale_codec","disambiguator":[16439007312830197035,13769093477079864056]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":20,"id":{"name":"parity_scale_codec_derive","disambiguator":[15916895702609288415,13390909414312069258]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":21,"id":{"name":"arrayvec","disambiguator":[9711399210076819589,6533224003713073282]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":22,"id":{"name":"byte_slice_cast","disambiguator":[7351640255773626293,2315590138104183949]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":23,"id":{"name":"serde","disambiguator":[18094986483354249175,15403000118412511765]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":24,"id":{"name":"serde_derive","disambiguator":[2422799003874411447,4301428410593763920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":25,"id":{"name":"sp_core","disambiguator":[11528989304794749901,4991667551486174003]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":26,"id":{"name":"sp_runtime_interface","disambiguator":[12255499159526350672,1465949469223168246]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":27,"id":{"name":"sp_wasm_interface","disambiguator":[1572342640069422977,5885890102663370953]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":28,"id":{"name":"sp_std","disambiguator":[7356154292131214206,15539128417196248828]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":29,"id":{"name":"impl_trait_for_tuples","disambiguator":[13508714756144950212,10399417239549626737]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":30,"id":{"name":"wasmi","disambiguator":[14702682962039512728,8205603541115655459]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":31,"id":{"name":"memory_units","disambiguator":[2681920765984350785,12479645465886095865]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":32,"id":{"name":"parity_wasm","disambiguator":[3627318675752641491,16087573038623804516]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":33,"id":{"name":"wasmi_validation","disambiguator":[10122444132145811748,13686239439309676495]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":34,"id":{"name":"num_rational","disambiguator":[14874358685442605711,14454857550384661125]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":35,"id":{"name":"num_bigint","disambiguator":[10424519725353920175,15970225686228915190]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":36,"id":{"name":"num_integer","disambiguator":[7545622164281545846,2648898713402766561]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build.rs","num":37,"id":{"name":"num_traits","disambiguator":[215404550585587115,5285806180049352428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":38,"id":{"name":"libc","disambiguator":[6571333170903906260,2103687221578517612]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":39,"id":{"name":"sp_tracing","disambiguator":[126940985002760439,9833769351350342315]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":40,"id":{"name":"tracing_core","disambiguator":[11099356479621910520,18239274797054692367]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":41,"id":{"name":"lazy_static","disambiguator":[16863586403248268720,14388819080293591203]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":42,"id":{"name":"tracing","disambiguator":[3149344748273194146,14186679869154291241]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":43,"id":{"name":"cfg_if","disambiguator":[7841183052640537120,5700978676433312502]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":44,"id":{"name":"tracing_attributes","disambiguator":[7168521433842290992,2127477278266717051]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":45,"id":{"name":"pin_project_lite","disambiguator":[11050117765846224188,12097442257352640106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":46,"id":{"name":"tracing_subscriber","disambiguator":[9358978854053975941,10302906392016292032]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":47,"id":{"name":"regex","disambiguator":[14166398965641423822,8934033390557199130]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":48,"id":{"name":"aho_corasick","disambiguator":[15910827016742496248,14514165624868714725]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":49,"id":{"name":"memchr","disambiguator":[8299827481518300842,8423653226847344489]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":50,"id":{"name":"regex_syntax","disambiguator":[10387838999179421385,14884883596696298333]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":51,"id":{"name":"thread_local","disambiguator":[972737615355812521,3494330021733074280]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":52,"id":{"name":"matchers","disambiguator":[16148120748263327968,10793795200785214139]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":53,"id":{"name":"regex_automata","disambiguator":[6713063222348330078,15962450321991702012]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":54,"id":{"name":"byteorder","disambiguator":[14496735423178217807,13585885797689701047]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":55,"id":{"name":"ansi_term","disambiguator":[18134670208497847193,6469936381989789516]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":56,"id":{"name":"tracing_log","disambiguator":[12555983769818244310,6947546561298633655]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/prune.rs","num":57,"id":{"name":"log","disambiguator":[7636163145545913312,4986669806278621293]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":58,"id":{"name":"cfg_if","disambiguator":[502369263979125416,6128217184247387066]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":59,"id":{"name":"serde_json","disambiguator":[13564730519325168607,8931654559015479844]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":60,"id":{"name":"itoa","disambiguator":[708245801620839046,10644891861074126777]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":61,"id":{"name":"ryu","disambiguator":[2595139073293063990,3633285781182786758]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":62,"id":{"name":"tracing_serde","disambiguator":[11704797471514300989,6477851010748340264]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":63,"id":{"name":"sharded_slab","disambiguator":[1434945501934548753,1609764728048645911]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","num":64,"id":{"name":"smallvec","disambiguator":[2602844660267825758,15179553114549196714]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":65,"id":{"name":"chrono","disambiguator":[1398100316059925436,10467824243359959529]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":66,"id":{"name":"time","disambiguator":[8823501580382950712,2504982711049837973]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":67,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[13822519134176450310,2862860596345121761]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","num":68,"id":{"name":"sp_externalities","disambiguator":[18150108195161110747,13250564693672382873]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":69,"id":{"name":"sp_storage","disambiguator":[12878955236357233593,16822974782930621063]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":70,"id":{"name":"sp_debug_derive","disambiguator":[11752057424767612336,6988741196861483299]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":71,"id":{"name":"ref_cast","disambiguator":[17238424032127906489,14681179534522775997]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":72,"id":{"name":"ref_cast_impl","disambiguator":[4857299677253861727,8902270623010207562]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":73,"id":{"name":"impl_serde","disambiguator":[6223019066819668752,3300984703168818873]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":74,"id":{"name":"environmental","disambiguator":[17937490940284361027,13093274495722560157]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":75,"id":{"name":"primitive_types","disambiguator":[6962691650698255454,13234617421742094078]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":76,"id":{"name":"fixed_hash","disambiguator":[10245915055372472413,1069574987168551768]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":77,"id":{"name":"static_assertions","disambiguator":[3780011359165158122,3262507017755003872]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":78,"id":{"name":"rustc_hex","disambiguator":[10677294477045725496,7865879812543119472]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","num":79,"id":{"name":"rand","disambiguator":[7383846236653092870,5177629652404358757]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":80,"id":{"name":"rand_core","disambiguator":[7787386706198440185,12678578198977233203]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":81,"id":{"name":"getrandom","disambiguator":[12258613803940040387,911838537080231532]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":82,"id":{"name":"rand_chacha","disambiguator":[4434170198255513034,5056478396886919284]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":83,"id":{"name":"ppv_lite86","disambiguator":[4955318928114684575,7768061473571892432]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":84,"id":{"name":"rand_pcg","disambiguator":[16660534335728405525,7074470424998610614]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":85,"id":{"name":"uint","disambiguator":[16896315795860882296,16425098083545408739]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":86,"id":{"name":"crunchy","disambiguator":[8074030940710953961,6579732958665489341]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":87,"id":{"name":"impl_codec","disambiguator":[11443448416482552248,8414137674207687421]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":88,"id":{"name":"blake2_rfc","disambiguator":[16318291045264156809,15238637185383600405]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":89,"id":{"name":"arrayvec","disambiguator":[13122490319398419543,2245831403817998155]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":90,"id":{"name":"nodrop","disambiguator":[15847319047609925228,7892947817709334700]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":91,"id":{"name":"constant_time_eq","disambiguator":[4123012020743147552,17233470839404695501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":92,"id":{"name":"sha2","disambiguator":[2453755181374717418,14347587692546718153]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":93,"id":{"name":"block_buffer","disambiguator":[16942864271414254883,5806726910624965455]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":94,"id":{"name":"block_padding","disambiguator":[6536457226507187524,13096456614147870598]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":95,"id":{"name":"byte_tools","disambiguator":[4563776192090798664,13975107662144777646]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":96,"id":{"name":"generic_array","disambiguator":[10217328049382864786,4581712530308178966]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":97,"id":{"name":"typenum","disambiguator":[2877625186163250866,4188862493781366168]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":98,"id":{"name":"fake_simd","disambiguator":[8529024942259881634,1036883736573479363]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":99,"id":{"name":"opaque_debug","disambiguator":[14296233586290889095,7185983566499738172]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":100,"id":{"name":"digest","disambiguator":[10339741361097660047,3253664700456863542]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":101,"id":{"name":"tiny_keccak","disambiguator":[8951611112105442366,1965224039660394079]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":102,"id":{"name":"twox_hash","disambiguator":[7304964477320420634,14353450951517215289]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","num":103,"id":{"name":"parking_lot","disambiguator":[4673953683555930918,2566291569203134280]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":104,"id":{"name":"lock_api","disambiguator":[12216129644845520116,17168985521050561292]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":105,"id":{"name":"scopeguard","disambiguator":[10393400622481042710,15774391541485536781]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":106,"id":{"name":"parking_lot_core","disambiguator":[9723357634030298779,6709165033563235635]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":107,"id":{"name":"base58","disambiguator":[1021050924381740148,14694021983045483675]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":108,"id":{"name":"zeroize","disambiguator":[12293724131559688162,14607591128595310952]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":109,"id":{"name":"zeroize_derive","disambiguator":[2502408763374724958,13277304647653553031]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":110,"id":{"name":"secrecy","disambiguator":[17095926779506074658,7537668124013333220]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":111,"id":{"name":"ed25519_dalek","disambiguator":[15558391115965967113,3378155016804440964]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":112,"id":{"name":"ed25519","disambiguator":[17902604484033039668,17597880322881036383]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":113,"id":{"name":"signature","disambiguator":[11156352833949250189,12745597200273491384]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":114,"id":{"name":"curve25519_dalek","disambiguator":[2809248406966777197,8813816561018099626]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":115,"id":{"name":"digest","disambiguator":[7153347457544459114,4850652739674458903]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":116,"id":{"name":"generic_array","disambiguator":[785913366860281496,3566111910551851268]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":117,"id":{"name":"subtle","disambiguator":[17342818449220861691,9110388592586064331]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":118,"id":{"name":"sha2","disambiguator":[1377922229528131517,491842461206503580]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":119,"id":{"name":"block_buffer","disambiguator":[5863490318768043264,9384554601350983024]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":120,"id":{"name":"opaque_debug","disambiguator":[5955724391880543345,12225655711726523850]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":121,"id":{"name":"cpuid_bool","disambiguator":[3944863459372053080,10012978824416111698]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":122,"id":{"name":"substrate_bip39","disambiguator":[17869869569785452858,17634889153902495303]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":123,"id":{"name":"hmac","disambiguator":[13299399138808770209,8486335613303949460]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":124,"id":{"name":"crypto_mac","disambiguator":[5021103083656845048,9272942338553678022]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":125,"id":{"name":"subtle","disambiguator":[2461963045928777698,9783036260425898804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":126,"id":{"name":"pbkdf2","disambiguator":[1585251910033992458,4658055053388768448]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":127,"id":{"name":"schnorrkel","disambiguator":[16756806575561678970,14458639493351552668]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":128,"id":{"name":"arrayref","disambiguator":[12864533597306545026,8294063698849415262]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":129,"id":{"name":"curve25519_dalek","disambiguator":[6977723647751213875,9340163827551043317]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":130,"id":{"name":"merlin","disambiguator":[9377376087280658574,8799116673561925753]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":131,"id":{"name":"keccak","disambiguator":[7922441978553466502,10628234470639316489]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":132,"id":{"name":"bip39","disambiguator":[1314823592052820078,5424826910968609762]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":133,"id":{"name":"failure","disambiguator":[14582756781862167549,11010751447158768529]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":134,"id":{"name":"failure_derive","disambiguator":[16915148327015633678,6325708317200431250]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":135,"id":{"name":"backtrace","disambiguator":[9482193228311631792,18299589283485015896]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":136,"id":{"name":"rustc_demangle","disambiguator":[4050923033623787977,6585868120045361612]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":137,"id":{"name":"addr2line","disambiguator":[3660529096934478798,18165035533582110625]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":138,"id":{"name":"gimli","disambiguator":[467126543121056434,10447895090847301584]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":139,"id":{"name":"object","disambiguator":[12217760478832808573,5860930654909093820]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":140,"id":{"name":"miniz_oxide","disambiguator":[17514238117289429065,16538556448136967903]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":141,"id":{"name":"adler","disambiguator":[10300648466069169448,3652155315817441043]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":142,"id":{"name":"rustc_hash","disambiguator":[2899680881299965521,3351650253772854689]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":143,"id":{"name":"once_cell","disambiguator":[14043164444755290385,2267165041750352920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":144,"id":{"name":"parking_lot","disambiguator":[13413556939081280175,6595608378640516759]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":145,"id":{"name":"instant","disambiguator":[16657590810520803667,6600116491891240348]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":146,"id":{"name":"lock_api","disambiguator":[1370039747192521928,13370481355962836312]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":147,"id":{"name":"parking_lot_core","disambiguator":[6910326554005380636,13334944336695677100]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":148,"id":{"name":"unicode_normalization","disambiguator":[5195362221549747439,14521615614827495836]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":149,"id":{"name":"tinyvec","disambiguator":[14392653114268736918,7149426386502746538]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":150,"id":{"name":"tinyvec_macros","disambiguator":[12069190721701906036,1989476166457901195]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":151,"id":{"name":"secp256k1","disambiguator":[7408403086072926232,10619138547561338344]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":152,"id":{"name":"hmac_drbg","disambiguator":[2354928866440715200,11965278983472350123]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":153,"id":{"name":"hash256_std_hasher","disambiguator":[6334138255241792746,1846295599312392070]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":154,"id":{"name":"parity_util_mem","disambiguator":[3040824742387538142,13160465756699134223]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":155,"id":{"name":"parity_util_mem_derive","disambiguator":[18323117741153977268,3575845138050348775]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":156,"id":{"name":"hashbrown","disambiguator":[8514644902414888020,14821523315265927041]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":157,"id":{"name":"ahash","disambiguator":[11645240038511292298,1901198331339866248]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":158,"id":{"name":"derive_more","disambiguator":[2698756104843969994,14444477136067550206]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":159,"id":{"name":"dyn_clonable","disambiguator":[8242438631393957323,14003146638030063325]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":160,"id":{"name":"dyn_clone","disambiguator":[4691791614177411806,10864154608713969261]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":161,"id":{"name":"dyn_clonable_impl","disambiguator":[4615130658418671392,6958782800412037695]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":162,"id":{"name":"hex","disambiguator":[1554532179233287652,7706981720287221831]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":163,"id":{"name":"futures","disambiguator":[7191882713553373375,5784363091584244339]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":164,"id":{"name":"futures_core","disambiguator":[18128997065636809979,13049398925650811592]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":165,"id":{"name":"futures_util","disambiguator":[6826120639398116430,15849646236374289672]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":166,"id":{"name":"pin_utils","disambiguator":[14006933666536538846,10325894616585527374]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":167,"id":{"name":"proc_macro_hack","disambiguator":[16105205298844134494,461428951662562663]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":168,"id":{"name":"futures_task","disambiguator":[17591182617236407828,908714568475142235]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":169,"id":{"name":"futures_sink","disambiguator":[18304585830995575034,16327236895633893015]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":170,"id":{"name":"futures_channel","disambiguator":[6517228745129513001,1111405895964483599]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":171,"id":{"name":"slab","disambiguator":[7754159738850082191,972067075306833933]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":172,"id":{"name":"futures_io","disambiguator":[8909187937396878977,2922841661346725167]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":173,"id":{"name":"futures_macro","disambiguator":[7362818316734880593,477739355724548135]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":174,"id":{"name":"futures_executor","disambiguator":[2718974542857099553,14805374385779778428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","num":175,"id":{"name":"num_cpus","disambiguator":[17237370829952825392,8933627738761765040]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","num":176,"id":{"name":"sp_trie","disambiguator":[11252105861350862833,1708726736418102481]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","num":177,"id":{"name":"trie_db","disambiguator":[18271978803945158697,17262652499401197515]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","num":178,"id":{"name":"hashbrown","disambiguator":[5245551859052833817,6349580907210778731]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","num":179,"id":{"name":"ahash","disambiguator":[2391589251574575903,4260304121454177733]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","num":180,"id":{"name":"trie_root","disambiguator":[1580444581320396263,11318692011956243941]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","num":181,"id":{"name":"memory_db","disambiguator":[1774147319952519439,6218163937387775773]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","num":182,"id":{"name":"sp_panic_handler","disambiguator":[1493573841702380073,2894375925513246248]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":686,"byte_end":41109,"line_start":18,"line_end":1476,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":1205,"byte_end":1206,"line_start":44,"line_end":44,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"DBValue, ChangesTrieBlockNumber, MemoryDB, create_proof_check_backend, StorageProof, ChangesTrieCacheAction, TrieMut, ChangesTrieState","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":1252,"byte_end":1253,"line_start":47,"line_end":47,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"InMemoryBackend, ChangesTrieTransaction","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":57,"index":17},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":1293,"byte_end":1298,"line_start":49,"line_end":49,"column_start":15,"column_end":20},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":57,"index":15},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":1300,"byte_end":1304,"line_start":49,"line_end":49,"column_start":22,"column_end":26},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":57,"index":18},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":1306,"byte_end":1311,"line_start":49,"line_end":49,"column_start":28,"column_end":33},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":57,"index":14},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":1313,"byte_end":1318,"line_start":49,"line_end":49,"column_start":35,"column_end":40},"alias_span":null,"name":"log_error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2320},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2726,"byte_end":2742,"line_start":119,"line_end":119,"column_start":2,"column_end":18},"alias_span":null,"name":"OverlayedChanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1157},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2744,"byte_end":2754,"line_start":119,"line_end":119,"column_start":20,"column_end":30},"alias_span":null,"name":"StorageKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2756,"byte_end":2768,"line_start":119,"line_end":119,"column_start":32,"column_end":44},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1159},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2771,"byte_end":2788,"line_start":120,"line_end":120,"column_start":2,"column_end":19},"alias_span":null,"name":"StorageCollection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1160},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2790,"byte_end":2812,"line_start":120,"line_end":120,"column_start":21,"column_end":43},"alias_span":null,"name":"ChildStorageCollection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1165},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2815,"byte_end":2829,"line_start":121,"line_end":121,"column_start":2,"column_end":16},"alias_span":null,"name":"StorageChanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1180},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2831,"byte_end":2854,"line_start":121,"line_end":121,"column_start":18,"column_end":41},"alias_span":null,"name":"StorageTransactionCache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2883,"byte_end":2890,"line_start":123,"line_end":123,"column_start":25,"column_end":32},"alias_span":null,"name":"Backend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2930,"byte_end":2948,"line_start":124,"line_end":124,"column_start":39,"column_end":57},"alias_span":null,"name":"TrieBackendStorage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2950,"byte_end":2957,"line_start":124,"line_end":124,"column_start":59,"column_end":66},"alias_span":null,"name":"Storage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2989,"byte_end":3000,"line_start":125,"line_end":125,"column_start":30,"column_end":41},"alias_span":null,"name":"TrieBackend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2340},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":3025,"byte_end":3034,"line_start":126,"line_end":126,"column_start":24,"column_end":33},"alias_span":null,"name":"UsageInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2331},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":3036,"byte_end":3045,"line_start":126,"line_end":126,"column_start":35,"column_end":44},"alias_span":null,"name":"UsageUnit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2355},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":3047,"byte_end":3064,"line_start":126,"line_end":126,"column_start":46,"column_end":63},"alias_span":null,"name":"StateMachineStats","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":722},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":3083,"byte_end":3088,"line_start":127,"line_end":127,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2208},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":3090,"byte_end":3104,"line_start":127,"line_end":127,"column_start":24,"column_end":38},"alias_span":null,"name":"ExecutionError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":779},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":3127,"byte_end":3130,"line_start":128,"line_end":128,"column_start":21,"column_end":24},"alias_span":null,"name":"Ext","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":686,"byte_end":41109,"line_start":18,"line_end":1476,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":135},{"krate":0,"index":188},{"krate":0,"index":720},{"krate":0,"index":727},{"krate":0,"index":886},{"krate":0,"index":975},{"krate":0,"index":1073},{"krate":0,"index":1287},{"krate":0,"index":1408},{"krate":0,"index":1491},{"krate":0,"index":1643},{"krate":0,"index":1656},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1803}],"decl_id":null,"docs":" Substrate state machine implementation.\n","sig":null,"attributes":[{"value":"/ Substrate state machine implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":686,"byte_end":729,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"warn(missing_docs)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":731,"byte_end":753,"line_start":20,"line_end":20,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"backend","qualname":"::backend","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":2423},{"krate":0,"index":7},{"krate":0,"index":2425},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":78},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":128}],"decl_id":null,"docs":" State machine backends. These manage the code and storage of contracts.\n","sig":null,"attributes":[{"value":"/ State machine backends. These manage the code and storage of contracts.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":41797,"byte_end":41872,"line_start":18,"line_end":18,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42410,"byte_end":42417,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"Backend","qualname":"::backend::Backend","value":"Backend<H: Hasher>: sp_std::fmt::Debug","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" A state backend is used to read state data and can have changes committed\n to it.","sig":null,"attributes":[{"value":"/ A state backend is used to read state data and can have changes committed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42249,"byte_end":42326,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42327,"byte_end":42337,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42338,"byte_end":42341,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The clone operation (if implemented) should be cheap.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42342,"byte_end":42399,"line_start":37,"line_end":37,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42512,"byte_end":42517,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Error","qualname":"::backend::Backend::Error","value":"type Error: super::Error;","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" An error type when fetching data is not possible.\n","sig":null,"attributes":[{"value":"/ An error type when fetching data is not possible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42452,"byte_end":42505,"line_start":39,"line_end":39,"column_start":2,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42589,"byte_end":42600,"line_start":43,"line_end":43,"column_start":7,"column_end":18},"name":"Transaction","qualname":"::backend::Backend::Transaction","value":"type Transaction: Consolidate + Default + Send;","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Storage changes to be applied if committing\n","sig":null,"attributes":[{"value":"/ Storage changes to be applied if committing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42535,"byte_end":42582,"line_start":42,"line_end":42,"column_start":2,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42674,"byte_end":42692,"line_start":46,"line_end":46,"column_start":7,"column_end":25},"name":"TrieBackendStorage","qualname":"::backend::Backend::TrieBackendStorage","value":"type TrieBackendStorage: TrieBackendStorage<H>;","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Type of trie backend storage.\n","sig":null,"attributes":[{"value":"/ Type of trie backend storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42634,"byte_end":42667,"line_start":45,"line_end":45,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42785,"byte_end":42792,"line_start":49,"line_end":49,"column_start":5,"column_end":12},"name":"storage","qualname":"::backend::Backend::storage","value":"pub fn storage(&Self, &[u8]) -> Result<Option<StorageValue>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get keyed storage or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get keyed storage or None if there is nothing associated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42719,"byte_end":42780,"line_start":48,"line_end":48,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42937,"byte_end":42949,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"storage_hash","qualname":"::backend::Backend::storage_hash","value":"pub fn storage_hash(&Self, &[u8]) -> Result<Option<H::Out>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get keyed storage value hash or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get keyed storage value hash or None if there is nothing associated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42860,"byte_end":42932,"line_start":51,"line_end":51,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43139,"byte_end":43152,"line_start":57,"line_end":57,"column_start":5,"column_end":18},"name":"child_storage","qualname":"::backend::Backend::child_storage","value":"pub fn child_storage(&Self, &ChildInfo, &[u8])\n-> Result<Option<StorageValue>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get keyed child storage or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get keyed child storage or None if there is nothing associated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43067,"byte_end":43134,"line_start":56,"line_end":56,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43337,"byte_end":43355,"line_start":64,"line_end":64,"column_start":5,"column_end":23},"name":"child_storage_hash","qualname":"::backend::Backend::child_storage_hash","value":"pub fn child_storage_hash(&Self, &ChildInfo, &[u8])\n-> Result<Option<H::Out>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get child keyed storage value hash or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get child keyed storage value hash or None if there is nothing associated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43254,"byte_end":43332,"line_start":63,"line_end":63,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43566,"byte_end":43580,"line_start":73,"line_end":73,"column_start":5,"column_end":19},"name":"exists_storage","qualname":"::backend::Backend::exists_storage","value":"pub fn exists_storage(&Self, &[u8]) -> Result<bool, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" true if a key exists in storage.\n","sig":null,"attributes":[{"value":"/ true if a key exists in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43525,"byte_end":43561,"line_start":72,"line_end":72,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43718,"byte_end":43738,"line_start":78,"line_end":78,"column_start":5,"column_end":25},"name":"exists_child_storage","qualname":"::backend::Backend::exists_child_storage","value":"pub fn exists_child_storage(&Self, &ChildInfo, &[u8])\n-> Result<bool, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" true if a key exists in child storage.\n","sig":null,"attributes":[{"value":"/ true if a key exists in child storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43671,"byte_end":43713,"line_start":77,"line_end":77,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43975,"byte_end":43991,"line_start":87,"line_end":87,"column_start":5,"column_end":21},"name":"next_storage_key","qualname":"::backend::Backend::next_storage_key","value":"pub fn next_storage_key(&Self, &[u8])\n-> Result<Option<StorageKey>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Return the next key in storage in lexicographic order or `None` if there is no value.\n","sig":null,"attributes":[{"value":"/ Return the next key in storage in lexicographic order or `None` if there is no value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":43881,"byte_end":43970,"line_start":86,"line_end":86,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44157,"byte_end":44179,"line_start":90,"line_end":90,"column_start":5,"column_end":27},"name":"next_child_storage_key","qualname":"::backend::Backend::next_child_storage_key","value":"pub fn next_child_storage_key(&Self, &ChildInfo, &[u8])\n-> Result<Option<StorageKey>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Return the next key in child storage in lexicographic order or `None` if there is no value.\n","sig":null,"attributes":[{"value":"/ Return the next key in child storage in lexicographic order or `None` if there is no value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44057,"byte_end":44152,"line_start":89,"line_end":89,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44366,"byte_end":44391,"line_start":97,"line_end":97,"column_start":5,"column_end":30},"name":"for_keys_in_child_storage","qualname":"::backend::Backend::for_keys_in_child_storage","value":"pub fn for_keys_in_child_storage<F: FnMut(&[u8]) -> ()>(&Self, &ChildInfo, F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all entries keys of child storage and call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys of child storage and call `f` for each of those keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44278,"byte_end":44361,"line_start":96,"line_end":96,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44569,"byte_end":44589,"line_start":105,"line_end":105,"column_start":5,"column_end":25},"name":"for_keys_with_prefix","qualname":"::backend::Backend::for_keys_with_prefix","value":"pub fn for_keys_with_prefix<F: FnMut(&[u8]) -> ()>(&Self, &[u8], F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all entries keys which start with the given prefix and\n call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys which start with the given prefix and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44459,"byte_end":44526,"line_start":103,"line_end":103,"column_start":2,"column_end":69}},{"value":"/ call `f` for each of those keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44528,"byte_end":44564,"line_start":104,"line_end":104,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44826,"byte_end":44852,"line_start":111,"line_end":111,"column_start":5,"column_end":31},"name":"for_key_values_with_prefix","qualname":"::backend::Backend::for_key_values_with_prefix","value":"pub fn for_key_values_with_prefix<F: FnMut(&[u8], &[u8]) ->\n                                  ()>(&Self, &[u8], F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all entries keys and values of which start with the given prefix and\n call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys and values of which start with the given prefix and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44702,"byte_end":44783,"line_start":109,"line_end":109,"column_start":2,"column_end":83}},{"value":"/ call `f` for each of those keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44785,"byte_end":44821,"line_start":110,"line_end":110,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45025,"byte_end":45051,"line_start":116,"line_end":116,"column_start":5,"column_end":31},"name":"for_child_keys_with_prefix","qualname":"::backend::Backend::for_child_keys_with_prefix","value":"pub fn for_child_keys_with_prefix<F: FnMut(&[u8]) ->\n                                  ()>(&Self, &ChildInfo, &[u8], F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all child entries keys which start with the given prefix and\n call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all child entries keys which start with the given prefix and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44909,"byte_end":44982,"line_start":114,"line_end":114,"column_start":2,"column_end":75}},{"value":"/ call `f` for each of those keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":44984,"byte_end":45020,"line_start":115,"line_end":115,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45339,"byte_end":45351,"line_start":126,"line_end":126,"column_start":5,"column_end":17},"name":"storage_root","qualname":"::backend::Backend::storage_root","value":"pub fn storage_root<'a,\n                    impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                    =\n                    (&'a [u8],\n                     Option<&'a [u8]>)>>(&Self,\n                                         impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)\n-> (H::Out, Self::Transaction) where H::Out: Ord","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Calculate the storage root, with given delta over what is already stored in\n the backend, and produce a \"transaction\" that can be used to commit.\n Does not include child storage updates.\n","sig":null,"attributes":[{"value":"/ Calculate the storage root, with given delta over what is already stored in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45136,"byte_end":45215,"line_start":123,"line_end":123,"column_start":2,"column_end":81}},{"value":"/ the backend, and produce a \"transaction\" that can be used to commit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45217,"byte_end":45289,"line_start":124,"line_end":124,"column_start":2,"column_end":74}},{"value":"/ Does not include child storage updates.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45291,"byte_end":45334,"line_start":125,"line_end":125,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45728,"byte_end":45746,"line_start":134,"line_end":134,"column_start":5,"column_end":23},"name":"child_storage_root","qualname":"::backend::Backend::child_storage_root","value":"pub fn child_storage_root<'a,\n                          impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                          =\n                          (&'a [u8],\n                           Option<&'a [u8]>)>>(&Self, &ChildInfo,\n                                               impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)\n-> (H::Out, bool, Self::Transaction) where H::Out: Ord","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Calculate the child storage root, with given delta over what is already stored in\n the backend, and produce a \"transaction\" that can be used to commit. The second argument\n is true if child storage root equals default storage root.\n","sig":null,"attributes":[{"value":"/ Calculate the child storage root, with given delta over what is already stored in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45480,"byte_end":45565,"line_start":131,"line_end":131,"column_start":2,"column_end":87}},{"value":"/ the backend, and produce a \"transaction\" that can be used to commit. The second argument","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45567,"byte_end":45659,"line_start":132,"line_end":132,"column_start":2,"column_end":94}},{"value":"/ is true if child storage root equals default storage root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45661,"byte_end":45723,"line_start":133,"line_end":133,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45951,"byte_end":45956,"line_start":141,"line_end":141,"column_start":5,"column_end":10},"name":"pairs","qualname":"::backend::Backend::pairs","value":"pub fn pairs(&Self) -> Vec<(StorageKey, StorageValue)>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get all key/value pairs into a Vec.\n","sig":null,"attributes":[{"value":"/ Get all key/value pairs into a Vec.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":45907,"byte_end":45946,"line_start":140,"line_end":140,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46041,"byte_end":46045,"line_start":144,"line_end":144,"column_start":5,"column_end":9},"name":"keys","qualname":"::backend::Backend::keys","value":"pub fn keys(&Self, &[u8]) -> Vec<StorageKey>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get all keys with given prefix\n","sig":null,"attributes":[{"value":"/ Get all keys with given prefix","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46002,"byte_end":46036,"line_start":143,"line_end":143,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46247,"byte_end":46257,"line_start":151,"line_end":151,"column_start":5,"column_end":15},"name":"child_keys","qualname":"::backend::Backend::child_keys","value":"pub fn child_keys(&Self, &ChildInfo, &[u8]) -> Vec<StorageKey>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get all keys of child storage with given prefix\n","sig":null,"attributes":[{"value":"/ Get all keys of child storage with given prefix","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46191,"byte_end":46242,"line_start":150,"line_end":150,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46494,"byte_end":46509,"line_start":162,"line_end":162,"column_start":5,"column_end":20},"name":"as_trie_backend","qualname":"::backend::Backend::as_trie_backend","value":"pub fn as_trie_backend(&mut Self)\n-> Option<&TrieBackend<Self::TrieBackendStorage, H>>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Try convert into trie backend.\n","sig":null,"attributes":[{"value":"/ Try convert into trie backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46455,"byte_end":46489,"line_start":161,"line_end":161,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46787,"byte_end":46804,"line_start":169,"line_end":169,"column_start":5,"column_end":22},"name":"full_storage_root","qualname":"::backend::Backend::full_storage_root","value":"pub fn full_storage_root<'a,\n                         impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                         = (&'a [u8], Option<&'a [u8]>)>,\n                         impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                         = (&'a [u8], Option<&'a [u8]>)>,\n                         impl Iterator<Item =\n              (&'a ChildInfo,\n               impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)>: Iterator<Item\n                         =\n                         (&'a ChildInfo,\n                          impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)>>(&Self,\n                                                                                impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>,\n                                                                                impl Iterator<Item =\n              (&'a ChildInfo,\n               impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)>)\n-> (H::Out, Self::Transaction) where H::Out: Ord + Encode","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Calculate the storage root, with given delta over what is already stored\n in the backend, and produce a \"transaction\" that can be used to commit.\n Does include child storage updates.\n","sig":null,"attributes":[{"value":"/ Calculate the storage root, with given delta over what is already stored","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46588,"byte_end":46664,"line_start":166,"line_end":166,"column_start":2,"column_end":78}},{"value":"/ in the backend, and produce a \"transaction\" that can be used to commit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46666,"byte_end":46741,"line_start":167,"line_end":167,"column_start":2,"column_end":77}},{"value":"/ Does include child storage updates.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":46743,"byte_end":46782,"line_start":168,"line_end":168,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":47969,"byte_end":47991,"line_start":206,"line_end":206,"column_start":5,"column_end":27},"name":"register_overlay_stats","qualname":"::backend::Backend::register_overlay_stats","value":"pub fn register_overlay_stats(&mut Self, &crate::stats::StateMachineStats)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Register stats from overlay of state machine.","sig":null,"attributes":[{"value":"/ Register stats from overlay of state machine.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":47871,"byte_end":47920,"line_start":203,"line_end":203,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":47922,"byte_end":47925,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ By default nothing is registered.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":47927,"byte_end":47964,"line_start":205,"line_end":205,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48235,"byte_end":48245,"line_start":212,"line_end":212,"column_start":5,"column_end":15},"name":"usage_info","qualname":"::backend::Backend::usage_info","value":"pub fn usage_info(&Self) -> UsageInfo","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Query backend usage statistics (i/o, memory)","sig":null,"attributes":[{"value":"/ Query backend usage statistics (i/o, memory)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48048,"byte_end":48096,"line_start":208,"line_end":208,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48098,"byte_end":48101,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ Not all implementations are expected to be able to do this. In the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48103,"byte_end":48173,"line_start":210,"line_end":210,"column_start":2,"column_end":72}},{"value":"/ case when they don't, empty statistics is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48175,"byte_end":48230,"line_start":211,"line_end":211,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48302,"byte_end":48306,"line_start":215,"line_end":215,"column_start":5,"column_end":9},"name":"wipe","qualname":"::backend::Backend::wipe","value":"pub fn wipe(&Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Wipe the state database.\n","sig":null,"attributes":[{"value":"/ Wipe the state database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48269,"byte_end":48297,"line_start":214,"line_end":214,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48412,"byte_end":48418,"line_start":220,"line_end":220,"column_start":5,"column_end":11},"name":"commit","qualname":"::backend::Backend::commit","value":"pub fn commit(&Self, H::Out, Self::Transaction, StorageCollection,\n              ChildStorageCollection) -> Result<(), Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Commit given transaction to storage.\n","sig":null,"attributes":[{"value":"/ Commit given transaction to storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48367,"byte_end":48407,"line_start":219,"line_end":219,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48618,"byte_end":48634,"line_start":231,"line_end":231,"column_start":5,"column_end":21},"name":"read_write_count","qualname":"::backend::Backend::read_write_count","value":"pub fn read_write_count(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get the read/write count of the db\n","sig":null,"attributes":[{"value":"/ Get the read/write count of the db","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48575,"byte_end":48613,"line_start":230,"line_end":230,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48735,"byte_end":48757,"line_start":236,"line_end":236,"column_start":5,"column_end":27},"name":"reset_read_write_count","qualname":"::backend::Backend::reset_read_write_count","value":"pub fn reset_read_write_count(&Self)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get the read/write count of the db\n","sig":null,"attributes":[{"value":"/ Get the read/write count of the db","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48692,"byte_end":48730,"line_start":235,"line_end":235,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48846,"byte_end":48859,"line_start":241,"line_end":241,"column_start":5,"column_end":18},"name":"get_whitelist","qualname":"::backend::Backend::get_whitelist","value":"pub fn get_whitelist(&Self) -> Vec<TrackedStorageKey>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get the whitelist for tracking db reads/writes\n","sig":null,"attributes":[{"value":"/ Get the whitelist for tracking db reads/writes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48791,"byte_end":48841,"line_start":240,"line_end":240,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48979,"byte_end":48992,"line_start":246,"line_end":246,"column_start":5,"column_end":18},"name":"set_whitelist","qualname":"::backend::Backend::set_whitelist","value":"pub fn set_whitelist(&Self, Vec<TrackedStorageKey>)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Update the whitelist for tracking db reads/writes\n","sig":null,"attributes":[{"value":"/ Update the whitelist for tracking db reads/writes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":48921,"byte_end":48974,"line_start":245,"line_end":245,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51061,"byte_end":51072,"line_start":330,"line_end":330,"column_start":11,"column_end":22},"name":"Consolidate","qualname":"::backend::Consolidate","value":"Consolidate","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":" Trait that allows consolidate two transactions together.\n","sig":null,"attributes":[{"value":"/ Trait that allows consolidate two transactions together.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":50990,"byte_end":51050,"line_start":329,"line_end":329,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51123,"byte_end":51134,"line_start":332,"line_end":332,"column_start":5,"column_end":16},"name":"consolidate","qualname":"::backend::Consolidate::consolidate","value":"pub fn consolidate(&mut Self, Self)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Consolidate two transactions into one.\n","sig":null,"attributes":[{"value":"/ Consolidate two transactions into one.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51076,"byte_end":51118,"line_start":331,"line_end":331,"column_start":2,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":116},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52273,"byte_end":52291,"line_start":381,"line_end":381,"column_start":12,"column_end":30},"name":"BackendRuntimeCode","qualname":"::backend::BackendRuntimeCode","value":"BackendRuntimeCode {  }","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"decl_id":null,"docs":" Wrapper to create a [`RuntimeCode`] from a type that implements [`Backend`].\n","sig":null,"attributes":[{"value":"/ Wrapper to create a [`RuntimeCode`] from a type that implements [`Backend`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52157,"byte_end":52237,"line_start":379,"line_end":379,"column_start":1,"column_end":81}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52238,"byte_end":52261,"line_start":380,"line_end":380,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52799,"byte_end":52802,"line_start":398,"line_end":398,"column_start":9,"column_end":12},"name":"new","qualname":"<BackendRuntimeCode>::new","value":"pub fn new(&'a B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance.\n","sig":null,"attributes":[{"value":"/ Create a new instance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52764,"byte_end":52790,"line_start":397,"line_end":397,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52970,"byte_end":52982,"line_start":406,"line_end":406,"column_start":9,"column_end":21},"name":"runtime_code","qualname":"<BackendRuntimeCode>::runtime_code","value":"pub fn runtime_code(&Self) -> Result<RuntimeCode, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Return the [`RuntimeCode`] build from the wrapped `backend`.\n","sig":null,"attributes":[{"value":"/ Return the [`RuntimeCode`] build from the wrapped `backend`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52897,"byte_end":52961,"line_start":405,"line_end":405,"column_start":2,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55111,"byte_end":55121,"line_start":62,"line_end":62,"column_start":8,"column_end":18},"name":"new_in_mem","qualname":"::in_memory_backend::new_in_mem","value":"pub fn new_in_mem<H: Hasher>() -> TrieBackend<MemoryDB<H>, H> where\nH::Out: Codec + Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty instance of in-memory backend.\n","sig":null,"attributes":[{"value":"/ Create a new empty instance of in-memory backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55050,"byte_end":55103,"line_start":61,"line_end":61,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55461,"byte_end":55467,"line_start":77,"line_end":77,"column_start":9,"column_end":15},"name":"update","qualname":"<TrieBackend<MemoryDB<H>, H>>::update","value":"pub fn update<T: IntoIterator<Item =\n              (Option<ChildInfo>, StorageCollection)>>(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copy the state, with applied updates\n","sig":null,"attributes":[{"value":"/ Copy the state, with applied updates","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55412,"byte_end":55452,"line_start":76,"line_end":76,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55689,"byte_end":55695,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"insert","qualname":"<TrieBackend<MemoryDB<H>, H>>::insert","value":"pub fn insert<T: IntoIterator<Item =\n              (Option<ChildInfo>, StorageCollection)>>(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Insert values into backend trie.\n","sig":null,"attributes":[{"value":"/ Insert values into backend trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55644,"byte_end":55680,"line_start":88,"line_end":88,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":56682,"byte_end":56696,"line_start":124,"line_end":124,"column_start":9,"column_end":23},"name":"update_backend","qualname":"<TrieBackend<MemoryDB<H>, H>>::update_backend","value":"pub fn update_backend(&Self, H::Out, MemoryDB<H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Merge trie nodes into this backend.\n","sig":null,"attributes":[{"value":"/ Merge trie nodes into this backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":56634,"byte_end":56673,"line_start":123,"line_end":123,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":56912,"byte_end":56914,"line_start":131,"line_end":131,"column_start":9,"column_end":11},"name":"eq","qualname":"<TrieBackend<MemoryDB<H>, H>>::eq","value":"pub fn eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare with another in-memory backend.\n","sig":null,"attributes":[{"value":"/ Compare with another in-memory backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":56860,"byte_end":56903,"line_start":130,"line_end":130,"column_start":2,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104955,"byte_end":104965,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"BuildCache","qualname":"::changes_trie::build_cache::BuildCache","value":"BuildCache {  }","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"decl_id":null,"docs":" Changes trie build cache.","sig":null,"attributes":[{"value":"/ Changes trie build cache.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104280,"byte_end":104309,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104310,"byte_end":104313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Helps to avoid read of changes tries from the database when digest trie","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104314,"byte_end":104389,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ is built. It holds changed keys for every block (indexed by changes trie","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104390,"byte_end":104466,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ root) that could be referenced by future digest items. For digest entries","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104467,"byte_end":104544,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ it also holds keys covered by this digest. Entries for top level digests","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104545,"byte_end":104621,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ are never created, because they'll never be used to build other digests.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104622,"byte_end":104698,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104699,"byte_end":104702,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Entries are pruned from the cache once digest block that is using this entry","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104703,"byte_end":104783,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ is inserted (because digest block will includes all keys from this entry).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104784,"byte_end":104862,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ When there's a fork, entries are pruned when first changes trie is inserted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":104863,"byte_end":104943,"line_start":35,"line_end":35,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1967},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105700,"byte_end":105714,"line_start":50,"line_end":50,"column_start":2,"column_end":16},"name":"CacheBuildData","qualname":"::changes_trie::build_cache::CacheAction::CacheBuildData","value":"CacheAction::CacheBuildData(CachedBuildData<H, N>)","parent":{"krate":0,"index":1964},"children":[],"decl_id":null,"docs":" Cache data that has been collected when CT has been built.\n","sig":null,"attributes":[{"value":"/ Cache data that has been collected when CT has been built.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105636,"byte_end":105698,"line_start":49,"line_end":49,"column_start":2,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1970},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105784,"byte_end":105789,"line_start":52,"line_end":52,"column_start":2,"column_end":7},"name":"Clear","qualname":"::changes_trie::build_cache::CacheAction::Clear","value":"CacheAction::Clear","parent":{"krate":0,"index":1964},"children":[],"decl_id":null,"docs":" Clear cache from all existing entries.\n","sig":null,"attributes":[{"value":"/ Clear cache from all existing entries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105740,"byte_end":105782,"line_start":51,"line_end":51,"column_start":2,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":1964},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105615,"byte_end":105626,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"CacheAction","qualname":"::changes_trie::build_cache::CacheAction","value":"pub enum CacheAction<H, N> {\n\n    /// Cache data that has been collected when CT has been built.\n    CacheBuildData(CachedBuildData<H, N>),\n\n    /// Clear cache from all existing entries.\n    Clear,\n}","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1970}],"decl_id":null,"docs":" The action to perform when block-with-changes-trie is imported.\n","sig":null,"attributes":[{"value":"/ The action to perform when block-with-changes-trie is imported.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105510,"byte_end":105577,"line_start":46,"line_end":46,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1984},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105897,"byte_end":105912,"line_start":57,"line_end":57,"column_start":12,"column_end":27},"name":"CachedBuildData","qualname":"::changes_trie::build_cache::CachedBuildData","value":"CachedBuildData {  }","parent":null,"children":[{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990}],"decl_id":null,"docs":" The data that has been cached during changes trie building.\n","sig":null,"attributes":[{"value":"/ The data that has been cached during changes trie building.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":105794,"byte_end":105857,"line_start":55,"line_end":55,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":106786,"byte_end":106789,"line_start":86,"line_end":86,"column_start":9,"column_end":12},"name":"new","qualname":"<BuildCache<H, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new changes trie build cache.\n","sig":null,"attributes":[{"value":"/ Create new changes trie build cache.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":106737,"byte_end":106777,"line_start":85,"line_end":85,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":106965,"byte_end":106968,"line_start":94,"line_end":94,"column_start":9,"column_end":12},"name":"get","qualname":"<BuildCache<H, N>>::get","value":"pub fn get(&Self, &H)\n-> Option<&HashMap<Option<PrefixedStorageKey>, HashSet<StorageKey>>>","parent":null,"children":[],"decl_id":null,"docs":" Get cached changed keys for changes trie with given root.\n","sig":null,"attributes":[{"value":"/ Get cached changed keys for changes trie with given root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":106895,"byte_end":106956,"line_start":93,"line_end":93,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":107232,"byte_end":107249,"line_start":100,"line_end":100,"column_start":9,"column_end":26},"name":"with_changed_keys","qualname":"<BuildCache<H, N>>::with_changed_keys","value":"pub fn with_changed_keys(&Self, &H,\n                         &mut FnMut(&HashMap<Option<PrefixedStorageKey>,\n                                             HashSet<StorageKey>>) -> ())\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Execute given functor with cached entry for given block.\n Returns true if the functor has been called and false otherwise.\n","sig":null,"attributes":[{"value":"/ Execute given functor with cached entry for given block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":107093,"byte_end":107153,"line_start":98,"line_end":98,"column_start":2,"column_end":62}},{"value":"/ Returns true if the functor has been called and false otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":107155,"byte_end":107223,"line_start":99,"line_end":99,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":107542,"byte_end":107549,"line_start":115,"line_end":115,"column_start":9,"column_end":16},"name":"perform","qualname":"<BuildCache<H, N>>::perform","value":"pub fn perform(&mut Self, CacheAction<H, N>)","parent":null,"children":[],"decl_id":null,"docs":" Insert data into cache.\n","sig":null,"attributes":[{"value":"/ Insert data into cache.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":107506,"byte_end":107533,"line_start":114,"line_end":114,"column_start":2,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":357},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":127332,"byte_end":127343,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"key_changes","qualname":"::changes_trie::changes_iterator::key_changes","value":"pub fn key_changes<'a, H: Hasher,\n                   Number: BlockNumber>(ConfigurationRange,\n                                        &'a Storage<H, Number>, Number,\n                                        &'a AnchorBlockId<H::Out, Number>,\n                                        Number,\n                                        Option<&'a PrefixedStorageKey>,\n                                        &'a [u8])\n-> Result<DrilldownIterator, String>","parent":null,"children":[],"decl_id":null,"docs":" Return changes of given key at given blocks range.\n `max` is the number of best known block.\n Changes are returned in descending order (i.e. last block comes first).\n","sig":null,"attributes":[{"value":"/ Return changes of given key at given blocks range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":127149,"byte_end":127203,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ `max` is the number of best known block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":127204,"byte_end":127248,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/ Changes are returned in descending order (i.e. last block comes first).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":127249,"byte_end":127324,"line_start":38,"line_end":38,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":361},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":128293,"byte_end":128310,"line_start":78,"line_end":78,"column_start":8,"column_end":25},"name":"key_changes_proof","qualname":"::changes_trie::changes_iterator::key_changes_proof","value":"pub fn key_changes_proof<'a, H: Hasher,\n                         Number: BlockNumber>(ConfigurationRange,\n                                              &Storage<H, Number>, Number,\n                                              &AnchorBlockId<H::Out, Number>,\n                                              Number,\n                                              Option<&PrefixedStorageKey>,\n                                              &[u8])\n-> Result<Vec<Vec<u8>>, String> where H::Out: Codec","parent":null,"children":[],"decl_id":null,"docs":" Returns proof of changes of given key at given blocks range.\n `max` is the number of best known block.\n","sig":null,"attributes":[{"value":"/ Returns proof of changes of given key at given blocks range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":128176,"byte_end":128240,"line_start":76,"line_end":76,"column_start":1,"column_end":65}},{"value":"/ `max` is the number of best known block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":128241,"byte_end":128285,"line_start":77,"line_end":77,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":365},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":129503,"byte_end":129526,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"key_changes_proof_check","qualname":"::changes_trie::changes_iterator::key_changes_proof_check","value":"pub fn key_changes_proof_check<'a, H: Hasher,\n                               Number: BlockNumber>(ConfigurationRange,\n                                                    &RootsStorage<H, Number>,\n                                                    Vec<Vec<u8>>, Number,\n                                                    &AnchorBlockId<H::Out,\n                                                                   Number>,\n                                                    Number,\n                                                    Option<&PrefixedStorageKey>,\n                                                    &[u8])\n-> Result<Vec<(Number, u32)>, String> where H::Out: Encode","parent":null,"children":[],"decl_id":null,"docs":" Check key changes proof and return changes of the key at given blocks range.\n `max` is the number of best known block.\n Changes are returned in descending order (i.e. last block comes first).\n","sig":null,"attributes":[{"value":"/ Check key changes proof and return changes of the key at given blocks range.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":129294,"byte_end":129374,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ `max` is the number of best known block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":129375,"byte_end":129419,"line_start":123,"line_end":123,"column_start":1,"column_end":45}},{"value":"/ Changes are returned in descending order (i.e. last block comes first).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":129420,"byte_end":129495,"line_start":124,"line_end":124,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":369},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":130111,"byte_end":130142,"line_start":148,"line_end":148,"column_start":8,"column_end":39},"name":"key_changes_proof_check_with_db","qualname":"::changes_trie::changes_iterator::key_changes_proof_check_with_db","value":"pub fn key_changes_proof_check_with_db<'a, H: Hasher,\n                                       Number: BlockNumber>(ConfigurationRange,\n                                                            &RootsStorage<H,\n                                                                          Number>,\n                                                            &InMemoryStorage<H,\n                                                                             Number>,\n                                                            Number,\n                                                            &AnchorBlockId<H::Out,\n                                                                           Number>,\n                                                            Number,\n                                                            Option<&PrefixedStorageKey>,\n                                                            &[u8])\n-> Result<Vec<(Number, u32)>, String> where H::Out: Encode","parent":null,"children":[],"decl_id":null,"docs":" Similar to the `key_changes_proof_check` function, but works with prepared proof storage.\n","sig":null,"attributes":[{"value":"/ Similar to the `key_changes_proof_check` function, but works with prepared proof storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":130010,"byte_end":130103,"line_start":147,"line_end":147,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":407},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":135374,"byte_end":135391,"line_start":312,"line_end":312,"column_start":12,"column_end":29},"name":"DrilldownIterator","qualname":"::changes_trie::changes_iterator::DrilldownIterator","value":"DrilldownIterator {  }","parent":null,"children":[{"krate":0,"index":411}],"decl_id":null,"docs":" Exploring drilldown operator.\n","sig":null,"attributes":[{"value":"/ Exploring drilldown operator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":135329,"byte_end":135362,"line_start":311,"line_end":311,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/prune.rs","byte_start":153699,"byte_end":153704,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"prune","qualname":"::changes_trie::prune::prune","value":"pub fn prune<H: Hasher, Number: BlockNumber, F: FnMut(H::Out) ->\n             ()>(&Storage<H, Number>, Number, Number,\n                 &AnchorBlockId<H::Out, Number>, F) where H::Out: Codec","parent":null,"children":[],"decl_id":null,"docs":" Prune obsolete changes tries. Pruning happens at the same block, where highest\n level digest is created. Pruning guarantees to save changes tries for last\n `min_blocks_to_keep` blocks. We only prune changes tries at `max_digest_interval`\n ranges.\n","sig":null,"attributes":[{"value":"/ Prune obsolete changes tries. Pruning happens at the same block, where highest","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/prune.rs","byte_start":153432,"byte_end":153514,"line_start":31,"line_end":31,"column_start":1,"column_end":83}},{"value":"/ level digest is created. Pruning guarantees to save changes tries for last","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/prune.rs","byte_start":153515,"byte_end":153593,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ `min_blocks_to_keep` blocks. We only prune changes tries at `max_digest_interval`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/prune.rs","byte_start":153594,"byte_end":153679,"line_start":33,"line_end":33,"column_start":1,"column_end":86}},{"value":"/ ranges.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/prune.rs","byte_start":153680,"byte_end":153691,"line_start":34,"line_end":34,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":542},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":159894,"byte_end":159909,"line_start":38,"line_end":38,"column_start":12,"column_end":27},"name":"InMemoryStorage","qualname":"::changes_trie::storage::InMemoryStorage","value":"InMemoryStorage {  }","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"decl_id":null,"docs":" In-memory implementation of changes trie storage.\n","sig":null,"attributes":[{"value":"/ In-memory implementation of changes trie storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":159829,"byte_end":159882,"line_start":37,"line_end":37,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160508,"byte_end":160515,"line_start":56,"line_end":56,"column_start":9,"column_end":16},"name":"with_db","qualname":"<InMemoryStorage<H, Number>>::with_db","value":"pub fn with_db(MemoryDB<H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates storage from given in-memory database.\n","sig":null,"attributes":[{"value":"/ Creates storage from given in-memory database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160449,"byte_end":160499,"line_start":55,"line_end":55,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160727,"byte_end":160730,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"new","qualname":"<InMemoryStorage<H, Number>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates storage with empty database.\n","sig":null,"attributes":[{"value":"/ Creates storage with empty database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160678,"byte_end":160718,"line_start":66,"line_end":66,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160830,"byte_end":160840,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"name":"with_proof","qualname":"<InMemoryStorage<H, Number>>::with_proof","value":"pub fn with_proof(Vec<Vec<u8>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates storage with given proof.\n","sig":null,"attributes":[{"value":"/ Creates storage with given proof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160784,"byte_end":160821,"line_start":71,"line_end":71,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":161083,"byte_end":161092,"line_start":83,"line_end":83,"column_start":9,"column_end":18},"name":"cache_mut","qualname":"<InMemoryStorage<H, Number>>::cache_mut","value":"pub fn cache_mut(&mut Self) -> &mut BuildCache<H::Out, Number>","parent":null,"children":[],"decl_id":null,"docs":" Get mutable cache reference.\n","sig":null,"attributes":[{"value":"/ Get mutable cache reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":161042,"byte_end":161074,"line_start":82,"line_end":82,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":161214,"byte_end":161225,"line_start":88,"line_end":88,"column_start":9,"column_end":20},"name":"with_blocks","qualname":"<InMemoryStorage<H, Number>>::with_blocks","value":"pub fn with_blocks(Vec<(Number, H::Out)>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the storage with given blocks.\n","sig":null,"attributes":[{"value":"/ Create the storage with given blocks.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":161164,"byte_end":161205,"line_start":87,"line_end":87,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":163076,"byte_end":163082,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"name":"insert","qualname":"<InMemoryStorage<H, Number>>::insert","value":"pub fn insert(&Self, Number, H::Out, MemoryDB<H>)","parent":null,"children":[],"decl_id":null,"docs":" Insert changes trie for given block.\n","sig":null,"attributes":[{"value":"/ Insert changes trie for given block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":163027,"byte_end":163067,"line_start":158,"line_end":158,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":660},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63295,"byte_end":63306,"line_start":89,"line_end":89,"column_start":11,"column_end":22},"name":"BlockNumber","qualname":"::changes_trie::BlockNumber","value":"BlockNumber: Send + Sync + 'static + std::fmt::Display + Clone + From<u32> + TryInto<u32> +\nOne + Zero + PartialEq + Ord + std::hash::Hash + std::ops::Add<Self, Output =\nSelf> + ::std::ops::Sub<Self, Output = Self> + std::ops::Mul<Self, Output =\nSelf> + ::std::ops::Div<Self, Output = Self> + std::ops::Rem<Self, Output =\nSelf> + std::ops::AddAssign<Self> + num_traits::CheckedMul +\nnum_traits::CheckedSub + Decode + Encode","parent":null,"children":[],"decl_id":null,"docs":" Requirements for block number that can be used with changes tries.\n","sig":null,"attributes":[{"value":"/ Requirements for block number that can be used with changes tries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63214,"byte_end":63284,"line_start":88,"line_end":88,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":2189},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64279,"byte_end":64292,"line_start":121,"line_end":121,"column_start":12,"column_end":25},"name":"AnchorBlockId","qualname":"::changes_trie::AnchorBlockId","value":"AnchorBlockId { hash, number }","parent":null,"children":[{"krate":0,"index":2192},{"krate":0,"index":2193}],"decl_id":null,"docs":" Block identifier that could be used to determine fork of this block.\n","sig":null,"attributes":[{"value":"/ Block identifier that could be used to determine fork of this block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64178,"byte_end":64250,"line_start":119,"line_end":119,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2192},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64369,"byte_end":64373,"line_start":123,"line_end":123,"column_start":6,"column_end":10},"name":"hash","qualname":"::changes_trie::AnchorBlockId::hash","value":"Hash","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Hash of this block.\n","sig":null,"attributes":[{"value":"/ Hash of this block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64340,"byte_end":64363,"line_start":122,"line_end":122,"column_start":2,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2193},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64413,"byte_end":64419,"line_start":125,"line_end":125,"column_start":6,"column_end":12},"name":"number","qualname":"::changes_trie::AnchorBlockId::number","value":"Number","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Number of this block.\n","sig":null,"attributes":[{"value":"/ Number of this block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64382,"byte_end":64407,"line_start":124,"line_end":124,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":663},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64482,"byte_end":64487,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"State","qualname":"::changes_trie::State","value":"State { config, zero, storage }","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"decl_id":null,"docs":" Changes tries state at some block.\n","sig":null,"attributes":[{"value":"/ Changes tries state at some block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64432,"byte_end":64470,"line_start":128,"line_end":128,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":667},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64560,"byte_end":64566,"line_start":131,"line_end":131,"column_start":6,"column_end":12},"name":"config","qualname":"::changes_trie::State::config","value":"sp_core::ChangesTrieConfiguration","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Configuration that is active at given block.\n","sig":null,"attributes":[{"value":"/ Configuration that is active at given block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64506,"byte_end":64554,"line_start":130,"line_end":130,"column_start":2,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":668},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64822,"byte_end":64826,"line_start":135,"line_end":135,"column_start":6,"column_end":10},"name":"zero","qualname":"::changes_trie::State::zero","value":"Number","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Configuration activation block number. Zero if it is the first configuration on the chain,\n or number of the block that have emit NewConfiguration signal (thus activating configuration\n starting from the **next** block).\n","sig":null,"attributes":[{"value":"/ Configuration activation block number. Zero if it is the first configuration on the chain,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64584,"byte_end":64678,"line_start":132,"line_end":132,"column_start":2,"column_end":96}},{"value":"/ or number of the block that have emit NewConfiguration signal (thus activating configuration","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64680,"byte_end":64776,"line_start":133,"line_end":133,"column_start":2,"column_end":98}},{"value":"/ starting from the **next** block).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64778,"byte_end":64816,"line_start":134,"line_end":134,"column_start":2,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":669},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64890,"byte_end":64897,"line_start":137,"line_end":137,"column_start":6,"column_end":13},"name":"storage","qualname":"::changes_trie::State::storage","value":"&'a (dyn changes_trie::Storage<H, Number> + 'a)","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Underlying changes tries storage reference.\n","sig":null,"attributes":[{"value":"/ Underlying changes tries storage reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64837,"byte_end":64884,"line_start":136,"line_end":136,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":670},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65012,"byte_end":65024,"line_start":141,"line_end":141,"column_start":11,"column_end":23},"name":"RootsStorage","qualname":"::changes_trie::RootsStorage","value":"RootsStorage<H: Hasher, Number: BlockNumber>: Send + Sync","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"decl_id":null,"docs":" Changes trie storage. Provides access to trie roots and trie nodes.\n","sig":null,"attributes":[{"value":"/ Changes trie storage. Provides access to trie roots and trie nodes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":64930,"byte_end":65001,"line_start":140,"line_end":140,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65120,"byte_end":65132,"line_start":143,"line_end":143,"column_start":5,"column_end":17},"name":"build_anchor","qualname":"::changes_trie::RootsStorage::build_anchor","value":"pub fn build_anchor(&Self, H::Out)\n-> Result<AnchorBlockId<H::Out, Number>, String>","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Resolve hash of the block into anchor.\n","sig":null,"attributes":[{"value":"/ Resolve hash of the block into anchor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65073,"byte_end":65115,"line_start":142,"line_end":142,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65372,"byte_end":65376,"line_start":146,"line_end":146,"column_start":5,"column_end":9},"name":"root","qualname":"::changes_trie::RootsStorage::root","value":"pub fn root(&Self, &AnchorBlockId<H::Out, Number>, Number)\n-> Result<Option<H::Out>, String>","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Get changes trie root for the block with given number which is an ancestor (or the block\n itself) of the anchor_block (i.e. anchor_block.number >= block).\n","sig":null,"attributes":[{"value":"/ Get changes trie root for the block with given number which is an ancestor (or the block","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65205,"byte_end":65297,"line_start":144,"line_end":144,"column_start":2,"column_end":94}},{"value":"/ itself) of the anchor_block (i.e. anchor_block.number >= block).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65299,"byte_end":65367,"line_start":145,"line_end":145,"column_start":2,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":675},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65559,"byte_end":65566,"line_start":150,"line_end":150,"column_start":11,"column_end":18},"name":"Storage","qualname":"::changes_trie::Storage","value":"Storage<H: Hasher, Number: BlockNumber>: RootsStorage<H, Number>","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680}],"decl_id":null,"docs":" Changes trie storage. Provides access to trie roots and trie nodes.\n","sig":null,"attributes":[{"value":"/ Changes trie storage. Provides access to trie roots and trie nodes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65477,"byte_end":65548,"line_start":149,"line_end":149,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65688,"byte_end":65704,"line_start":152,"line_end":152,"column_start":5,"column_end":21},"name":"as_roots_storage","qualname":"::changes_trie::Storage::as_roots_storage","value":"pub fn as_roots_storage(&Self) -> &RootsStorage<H, Number>","parent":{"krate":0,"index":675},"children":[],"decl_id":null,"docs":" Casts from self reference to RootsStorage reference.\n","sig":null,"attributes":[{"value":"/ Casts from self reference to RootsStorage reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65627,"byte_end":65683,"line_start":151,"line_end":151,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65906,"byte_end":65930,"line_start":155,"line_end":155,"column_start":5,"column_end":29},"name":"with_cached_changed_keys","qualname":"::changes_trie::Storage::with_cached_changed_keys","value":"pub fn with_cached_changed_keys(&Self, &H::Out,\n                                &mut FnMut(&HashMap<Option<PrefixedStorageKey>,\n                                                    HashSet<StorageKey>>) ->\n                                     ()) -> bool","parent":{"krate":0,"index":675},"children":[],"decl_id":null,"docs":" Execute given functor with cached entry for given trie root.\n Returns true if the functor has been called (cache entry exists) and false otherwise.\n","sig":null,"attributes":[{"value":"/ Execute given functor with cached entry for given trie root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65746,"byte_end":65810,"line_start":153,"line_end":153,"column_start":2,"column_end":66}},{"value":"/ Returns true if the functor has been called (cache entry exists) and false otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65812,"byte_end":65901,"line_start":154,"line_end":154,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66082,"byte_end":66085,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"get","qualname":"::changes_trie::Storage::get","value":"pub fn get(&Self, &H::Out, Prefix) -> Result<Option<DBValue>, String>","parent":{"krate":0,"index":675},"children":[],"decl_id":null,"docs":" Get a trie node.\n","sig":null,"attributes":[{"value":"/ Get a trie node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66057,"byte_end":66077,"line_start":160,"line_end":160,"column_start":2,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":2198},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66764,"byte_end":66782,"line_start":180,"line_end":180,"column_start":12,"column_end":30},"name":"ConfigurationRange","qualname":"::changes_trie::ConfigurationRange","value":"ConfigurationRange { config, zero, end }","parent":null,"children":[{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203}],"decl_id":null,"docs":" Blocks range where configuration has been constant.\n","sig":null,"attributes":[{"value":"/ Blocks range where configuration has been constant.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66680,"byte_end":66735,"line_start":178,"line_end":178,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2201},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66824,"byte_end":66830,"line_start":182,"line_end":182,"column_start":6,"column_end":12},"name":"config","qualname":"::changes_trie::ConfigurationRange::config","value":"&'a sp_core::ChangesTrieConfiguration","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" Active configuration.\n","sig":null,"attributes":[{"value":"/ Active configuration.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66793,"byte_end":66818,"line_start":181,"line_end":181,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2202},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66953,"byte_end":66957,"line_start":184,"line_end":184,"column_start":6,"column_end":10},"name":"zero","qualname":"::changes_trie::ConfigurationRange::zero","value":"N","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" Zero block of this configuration. The configuration is active starting from the next block.\n","sig":null,"attributes":[{"value":"/ Zero block of this configuration. The configuration is active starting from the next block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66852,"byte_end":66947,"line_start":183,"line_end":183,"column_start":2,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":2203},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67063,"byte_end":67066,"line_start":186,"line_end":186,"column_start":6,"column_end":9},"name":"end","qualname":"::changes_trie::ConfigurationRange::end","value":"std::option::Option<N>","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" End block of this configuration. It is the last block where configuration has been active.\n","sig":null,"attributes":[{"value":"/ End block of this configuration. It is the last block where configuration has been active.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66963,"byte_end":67057,"line_start":185,"line_end":185,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67182,"byte_end":67185,"line_start":191,"line_end":191,"column_start":9,"column_end":12},"name":"new","qualname":"<State>::new","value":"pub fn new(Configuration, Number, &'a Storage<H, Number>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create state with given config and storage.\n","sig":null,"attributes":[{"value":"/ Create state with given config and storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67126,"byte_end":67173,"line_start":190,"line_end":190,"column_start":2,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67582,"byte_end":67596,"line_start":215,"line_end":215,"column_start":8,"column_end":22},"name":"disabled_state","qualname":"::changes_trie::disabled_state","value":"pub fn disabled_state<'a, H, Number>() -> Option<State>","parent":null,"children":[],"decl_id":null,"docs":" Create state where changes tries are disabled.\n","sig":null,"attributes":[{"value":"/ Create state where changes tries are disabled.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67524,"byte_end":67574,"line_start":214,"line_end":214,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":722},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":174992,"byte_end":174997,"line_start":25,"line_end":25,"column_start":11,"column_end":16},"name":"Error","qualname":"::error::Error","value":"Error: 'static + fmt::Debug + fmt::Display + Send","parent":null,"children":[],"decl_id":null,"docs":" State Machine Error bound.","sig":null,"attributes":[{"value":"/ State Machine Error bound.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":174875,"byte_end":174905,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":174906,"byte_end":174909,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This should reflect Wasm error type bound for future compatibility.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":174910,"byte_end":174981,"line_start":24,"line_end":24,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2209},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175478,"byte_end":175485,"line_start":37,"line_end":37,"column_start":2,"column_end":9},"name":"Backend","qualname":"::error::ExecutionError::Backend","value":"ExecutionError::Backend(crate::DefaultError)","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":" Backend error.\n","sig":null,"attributes":[{"value":"/ Backend error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175458,"byte_end":175476,"line_start":36,"line_end":36,"column_start":2,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2212},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175600,"byte_end":175621,"line_start":39,"line_end":39,"column_start":2,"column_end":23},"name":"CodeEntryDoesNotExist","qualname":"::error::ExecutionError::CodeEntryDoesNotExist","value":"ExecutionError::CodeEntryDoesNotExist","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":" The entry `:code` doesn't exist in storage so there's no way we can execute anything.\n","sig":null,"attributes":[{"value":"/ The entry `:code` doesn't exist in storage so there's no way we can execute anything.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175509,"byte_end":175598,"line_start":38,"line_end":38,"column_start":2,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2214},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175694,"byte_end":175715,"line_start":41,"line_end":41,"column_start":2,"column_end":23},"name":"UnableToGenerateProof","qualname":"::error::ExecutionError::UnableToGenerateProof","value":"ExecutionError::UnableToGenerateProof","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":" Backend is incompatible with execution proof generation process.\n","sig":null,"attributes":[{"value":"/ Backend is incompatible with execution proof generation process.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175624,"byte_end":175692,"line_start":40,"line_end":40,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2216},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175748,"byte_end":175760,"line_start":43,"line_end":43,"column_start":2,"column_end":14},"name":"InvalidProof","qualname":"::error::ExecutionError::InvalidProof","value":"ExecutionError::InvalidProof","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":" Invalid execution proof.\n","sig":null,"attributes":[{"value":"/ Invalid execution proof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175718,"byte_end":175746,"line_start":42,"line_end":42,"column_start":2,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2208},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175440,"byte_end":175454,"line_start":35,"line_end":35,"column_start":10,"column_end":24},"name":"ExecutionError","qualname":"::error::ExecutionError","value":"pub enum ExecutionError {\n\n    /// Backend error.\n    Backend(crate::DefaultError),\n\n    /// The entry `:code` doesn't exist in storage so there's no way we can execute anything.\n    CodeEntryDoesNotExist,\n\n    /// Backend is incompatible with execution proof generation process.\n    UnableToGenerateProof,\n\n    /// Invalid execution proof.\n    InvalidProof,\n}","parent":null,"children":[{"krate":0,"index":2209},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216}],"decl_id":null,"docs":" Externalities Error.","sig":null,"attributes":[{"value":"/ Externalities Error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175114,"byte_end":175138,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175139,"byte_end":175142,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Externalities are not really allowed to have errors, since it's assumed that dependent code","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175143,"byte_end":175238,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ would not be executed unless externalities were available. This is included for completeness,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175239,"byte_end":175336,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ and as a transition away from the pre-existing framework.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175337,"byte_end":175398,"line_start":33,"line_end":33,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":779},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":178888,"byte_end":178891,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"Ext","qualname":"::ext::Ext","value":"Ext { id }","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791}],"decl_id":null,"docs":" Wraps a read-only backend, call executor, and current overlayed changes.\n","sig":null,"attributes":[{"value":"/ Wraps a read-only backend, call executor, and current overlayed changes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":178800,"byte_end":178876,"line_start":93,"line_end":93,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":789},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":179548,"byte_end":179550,"line_start":113,"line_end":113,"column_start":6,"column_end":8},"name":"id","qualname":"::ext::Ext::id","value":"u16","parent":{"krate":0,"index":779},"children":[],"decl_id":null,"docs":" Pseudo-unique id used for tracing.\n","sig":null,"attributes":[{"value":"/ Pseudo-unique id used for tracing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":179504,"byte_end":179542,"line_start":112,"line_end":112,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":180292,"byte_end":180295,"line_start":146,"line_end":146,"column_start":9,"column_end":12},"name":"new","qualname":"<Ext>::new","value":"pub fn new(&'a mut OverlayedChanges, &'a mut OffchainOverlayedChanges,\n           &'a mut StorageTransactionCache<B::Transaction, H, N>, &'a B,\n           Option<ChangesTrieState>, Option<&'a mut Extensions>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ext` from overlayed changes and read-only backend\n","sig":null,"attributes":[{"value":"/ Create a new `Ext` from overlayed changes and read-only backend","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":180191,"byte_end":180258,"line_start":144,"line_end":144,"column_start":2,"column_end":69}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":180260,"byte_end":180283,"line_start":145,"line_end":145,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":181116,"byte_end":181144,"line_start":175,"line_end":175,"column_start":9,"column_end":37},"name":"get_offchain_storage_changes","qualname":"<Ext>::get_offchain_storage_changes","value":"pub fn get_offchain_storage_changes(&Self) -> &OffchainOverlayedChanges","parent":null,"children":[],"decl_id":null,"docs":" Read only accessor for the scheduled overlay changes.\n","sig":null,"attributes":[{"value":"/ Read only accessor for the scheduled overlay changes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":181025,"byte_end":181082,"line_start":173,"line_end":173,"column_start":2,"column_end":59}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":181084,"byte_end":181107,"line_start":174,"line_end":174,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":922},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":207103,"byte_end":207120,"line_start":49,"line_end":49,"column_start":12,"column_end":29},"name":"TestExternalities","qualname":"::testing::TestExternalities","value":"TestExternalities {  }","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932}],"decl_id":null,"docs":" Simple HashMap-based Externalities impl.\n","sig":null,"attributes":[{"value":"/ Simple HashMap-based Externalities impl.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":207047,"byte_end":207091,"line_start":48,"line_end":48,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":207761,"byte_end":207764,"line_start":70,"line_end":70,"column_start":9,"column_end":12},"name":"ext","qualname":"<TestExternalities<H, N>>::ext","value":"pub fn ext(&mut Self) -> Ext<, H, N, InMemoryBackend<H>>","parent":null,"children":[],"decl_id":null,"docs":" Get externalities implementation.\n","sig":null,"attributes":[{"value":"/ Get externalities implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":207715,"byte_end":207752,"line_start":69,"line_end":69,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":208241,"byte_end":208244,"line_start":89,"line_end":89,"column_start":9,"column_end":12},"name":"new","qualname":"<TestExternalities<H, N>>::new","value":"pub fn new(Storage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `TestExternalities` with storage.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `TestExternalities` with storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":208170,"byte_end":208232,"line_start":88,"line_end":88,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":208356,"byte_end":208365,"line_start":94,"line_end":94,"column_start":9,"column_end":18},"name":"new_empty","qualname":"<TestExternalities<H, N>>::new_empty","value":"pub fn new_empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" New empty test externalities.\n","sig":null,"attributes":[{"value":"/ New empty test externalities.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":208314,"byte_end":208347,"line_start":93,"line_end":93,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":208510,"byte_end":208523,"line_start":99,"line_end":99,"column_start":9,"column_end":22},"name":"new_with_code","qualname":"<TestExternalities<H, N>>::new_with_code","value":"pub fn new_with_code(&[u8], Storage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `TestExternalities` with code and storage.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `TestExternalities` with code and storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":208430,"byte_end":208501,"line_start":98,"line_end":98,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":209622,"byte_end":209646,"line_start":131,"line_end":131,"column_start":9,"column_end":33},"name":"persist_offchain_overlay","qualname":"<TestExternalities<H, N>>::persist_offchain_overlay","value":"pub fn persist_offchain_overlay(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Move offchain changes from overlay to the persistent store.\n","sig":null,"attributes":[{"value":"/ Move offchain changes from overlay to the persistent store.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":209550,"byte_end":209613,"line_start":130,"line_end":130,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":209808,"byte_end":209819,"line_start":136,"line_end":136,"column_start":9,"column_end":20},"name":"offchain_db","qualname":"<TestExternalities<H, N>>::offchain_db","value":"pub fn offchain_db(&Self) -> TestPersistentOffchainDB","parent":null,"children":[],"decl_id":null,"docs":" A shared reference type around the offchain worker storage.\n","sig":null,"attributes":[{"value":"/ A shared reference type around the offchain worker storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":209736,"byte_end":209799,"line_start":135,"line_end":135,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":209931,"byte_end":209937,"line_start":141,"line_end":141,"column_start":9,"column_end":15},"name":"insert","qualname":"<TestExternalities<H, N>>::insert","value":"pub fn insert(&mut Self, StorageKey, StorageValue)","parent":null,"children":[],"decl_id":null,"docs":" Insert key/value into backend\n","sig":null,"attributes":[{"value":"/ Insert key/value into backend","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":209889,"byte_end":209922,"line_start":140,"line_end":140,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210106,"byte_end":210124,"line_start":146,"line_end":146,"column_start":9,"column_end":27},"name":"register_extension","qualname":"<TestExternalities<H, N>>::register_extension","value":"pub fn register_extension<E: Any + Extension>(&mut Self, E)","parent":null,"children":[],"decl_id":null,"docs":" Registers the given extension for this instance.\n","sig":null,"attributes":[{"value":"/ Registers the given extension for this instance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210045,"byte_end":210097,"line_start":145,"line_end":145,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210263,"byte_end":210283,"line_start":151,"line_end":151,"column_start":9,"column_end":29},"name":"changes_trie_storage","qualname":"<TestExternalities<H, N>>::changes_trie_storage","value":"pub fn changes_trie_storage(&mut Self)\n-> &mut ChangesTrieInMemoryStorage<H, N>","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference to changes trie storage.\n","sig":null,"attributes":[{"value":"/ Get mutable reference to changes trie storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210204,"byte_end":210254,"line_start":150,"line_end":150,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210433,"byte_end":210443,"line_start":156,"line_end":156,"column_start":9,"column_end":19},"name":"commit_all","qualname":"<TestExternalities<H, N>>::commit_all","value":"pub fn commit_all(&Self) -> InMemoryBackend<H>","parent":null,"children":[],"decl_id":null,"docs":" Return a new backend with all pending value.\n","sig":null,"attributes":[{"value":"/ Return a new backend with all pending value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210376,"byte_end":210424,"line_start":155,"line_end":155,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211007,"byte_end":211019,"line_start":177,"line_end":177,"column_start":9,"column_end":21},"name":"execute_with","qualname":"<TestExternalities<H, N>>::execute_with","value":"pub fn execute_with<R, impl FnOnce() -> R: FnOnce() ->\n                    R>(&mut Self, impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210880,"byte_end":210947,"line_start":174,"line_end":174,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210949,"byte_end":210952,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":210954,"byte_end":210998,"line_start":176,"line_end":176,"column_start":2,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2249},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215209,"byte_end":215227,"line_start":40,"line_end":40,"column_start":12,"column_end":30},"name":"BasicExternalities","qualname":"::basic::BasicExternalities","value":"BasicExternalities {  }","parent":null,"children":[{"krate":0,"index":2250},{"krate":0,"index":2251}],"decl_id":null,"docs":" Simple Map-based Externalities impl.\n","sig":null,"attributes":[{"value":"/ Simple Map-based Externalities impl.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215140,"byte_end":215180,"line_start":38,"line_end":38,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215360,"byte_end":215363,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"new","qualname":"<BasicExternalities>::new","value":"pub fn new(Storage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `BasicExternalities`\n","sig":null,"attributes":[{"value":"/ Create a new instance of `BasicExternalities`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215302,"byte_end":215351,"line_start":46,"line_end":46,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215514,"byte_end":215523,"line_start":52,"line_end":52,"column_start":9,"column_end":18},"name":"new_empty","qualname":"<BasicExternalities>::new_empty","value":"pub fn new_empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" New basic externalities with empty storage.\n","sig":null,"attributes":[{"value":"/ New basic externalities with empty storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215458,"byte_end":215505,"line_start":51,"line_end":51,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215602,"byte_end":215608,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"name":"insert","qualname":"<BasicExternalities>::insert","value":"pub fn insert(&mut Self, StorageKey, StorageValue) -> Option<StorageValue>","parent":null,"children":[],"decl_id":null,"docs":" Insert key/value\n","sig":null,"attributes":[{"value":"/ Insert key/value","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215573,"byte_end":215593,"line_start":56,"line_end":56,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215765,"byte_end":215778,"line_start":62,"line_end":62,"column_start":9,"column_end":22},"name":"into_storages","qualname":"<BasicExternalities>::into_storages","value":"pub fn into_storages(Self) -> Storage","parent":null,"children":[],"decl_id":null,"docs":" Consume self and returns inner storages\n","sig":null,"attributes":[{"value":"/ Consume self and returns inner storages","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215713,"byte_end":215756,"line_start":61,"line_end":61,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216001,"byte_end":216021,"line_start":69,"line_end":69,"column_start":9,"column_end":29},"name":"execute_with_storage","qualname":"<BasicExternalities>::execute_with_storage","value":"pub fn execute_with_storage<R, impl FnOnce() -> R: FnOnce() ->\n                            R>(&mut sp_core::storage::Storage,\n                               impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure `f` with the externalities set and initialized with `storage`.","sig":null,"attributes":[{"value":"/ Execute the given closure `f` with the externalities set and initialized with `storage`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215816,"byte_end":215908,"line_start":66,"line_end":66,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215910,"byte_end":215913,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the closure and updates `storage` with all changes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215915,"byte_end":215992,"line_start":68,"line_end":68,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216509,"byte_end":216521,"line_start":91,"line_end":91,"column_start":9,"column_end":21},"name":"execute_with","qualname":"<BasicExternalities>::execute_with","value":"pub fn execute_with<R, impl FnOnce() -> R: FnOnce() ->\n                    R>(&mut Self, impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216382,"byte_end":216449,"line_start":88,"line_end":88,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216451,"byte_end":216454,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216456,"byte_end":216500,"line_start":90,"line_end":90,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216670,"byte_end":216680,"line_start":96,"line_end":96,"column_start":9,"column_end":19},"name":"extensions","qualname":"<BasicExternalities>::extensions","value":"pub fn extensions(&mut Self) -> &mut Extensions","parent":null,"children":[],"decl_id":null,"docs":" List of active extensions.\n","sig":null,"attributes":[{"value":"/ List of active extensions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216631,"byte_end":216661,"line_start":95,"line_end":95,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216776,"byte_end":216794,"line_start":101,"line_end":101,"column_start":9,"column_end":27},"name":"register_extension","qualname":"<BasicExternalities>::register_extension","value":"pub fn register_extension<impl Extension: Extension>(&mut Self,\n                                                     impl Extension)","parent":null,"children":[],"decl_id":null,"docs":" Register an extension.\n","sig":null,"attributes":[{"value":"/ Register an extension.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216741,"byte_end":216767,"line_start":100,"line_end":100,"column_start":2,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2254},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":257040,"byte_end":257057,"line_start":42,"line_end":42,"column_start":12,"column_end":29},"name":"NoOpenTransaction","qualname":"::overlayed_changes::changeset::NoOpenTransaction","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when trying to commit or rollback while no transaction is open or\n when the runtime is trying to close a transaction started by the client.\n","sig":null,"attributes":[{"value":"/ Error returned when trying to commit or rollback while no transaction is open or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":256813,"byte_end":256897,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ when the runtime is trying to close a transaction started by the client.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":256898,"byte_end":256974,"line_start":39,"line_end":39,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":2258},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":257210,"byte_end":257226,"line_start":47,"line_end":47,"column_start":12,"column_end":28},"name":"AlreadyInRuntime","qualname":"::overlayed_changes::changeset::AlreadyInRuntime","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error when calling `enter_runtime` when already being in runtime execution mode.\n","sig":null,"attributes":[{"value":"/ Error when calling `enter_runtime` when already being in runtime execution mode.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":257060,"byte_end":257144,"line_start":44,"line_end":44,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2262},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":257373,"byte_end":257385,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"NotInRuntime","qualname":"::overlayed_changes::changeset::NotInRuntime","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error when calling `exit_runtime` when not being in runtime exection mdde.\n","sig":null,"attributes":[{"value":"/ Error when calling `exit_runtime` when not being in runtime exection mdde.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":257229,"byte_end":257307,"line_start":49,"line_end":49,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":258166,"byte_end":258180,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"OverlayedValue","qualname":"::overlayed_changes::changeset::OverlayedValue","value":"OverlayedValue {  }","parent":null,"children":[{"krate":0,"index":2286}],"decl_id":null,"docs":" An overlay that contains all versions of a value for a specific key.\n","sig":null,"attributes":[{"value":"/ An overlay that contains all versions of a value for a specific key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":258012,"byte_end":258084,"line_start":73,"line_end":73,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259385,"byte_end":259390,"line_start":107,"line_end":107,"column_start":9,"column_end":14},"name":"value","qualname":"<OverlayedValue>::value","value":"pub fn value(&Self) -> Option<&StorageValue>","parent":null,"children":[],"decl_id":null,"docs":" The value as seen by the current transaction.\n","sig":null,"attributes":[{"value":"/ The value as seen by the current transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259327,"byte_end":259376,"line_start":106,"line_end":106,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259575,"byte_end":259585,"line_start":112,"line_end":112,"column_start":9,"column_end":19},"name":"extrinsics","qualname":"<OverlayedValue>::extrinsics","value":"pub fn extrinsics(&Self) -> BTreeSet<u32>","parent":null,"children":[],"decl_id":null,"docs":" Unique list of extrinsic indices which modified the value.\n","sig":null,"attributes":[{"value":"/ Unique list of extrinsic indices which modified the value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259504,"byte_end":259566,"line_start":111,"line_end":111,"column_start":2,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1157},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227563,"byte_end":227573,"line_start":56,"line_end":56,"column_start":10,"column_end":20},"name":"StorageKey","qualname":"::overlayed_changes::StorageKey","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Storage key.\n","sig":null,"attributes":[{"value":"/ Storage key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227537,"byte_end":227553,"line_start":55,"line_end":55,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1158},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227614,"byte_end":227626,"line_start":59,"line_end":59,"column_start":10,"column_end":22},"name":"StorageValue","qualname":"::overlayed_changes::StorageValue","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Storage value.\n","sig":null,"attributes":[{"value":"/ Storage value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227586,"byte_end":227604,"line_start":58,"line_end":58,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":1159},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227687,"byte_end":227704,"line_start":62,"line_end":62,"column_start":10,"column_end":27},"name":"StorageCollection","qualname":"::overlayed_changes::StorageCollection","value":"Vec<(StorageKey, Option<StorageValue>)>","parent":null,"children":[],"decl_id":null,"docs":" In memory array of storage values.\n","sig":null,"attributes":[{"value":"/ In memory array of storage values.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227639,"byte_end":227677,"line_start":61,"line_end":61,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1160},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227823,"byte_end":227845,"line_start":65,"line_end":65,"column_start":10,"column_end":32},"name":"ChildStorageCollection","qualname":"::overlayed_changes::ChildStorageCollection","value":"Vec<(StorageKey, StorageCollection)>","parent":null,"children":[],"decl_id":null,"docs":" In memory arrays of storage values for multiple child tries.\n","sig":null,"attributes":[{"value":"/ In memory arrays of storage values for multiple child tries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":227749,"byte_end":227813,"line_start":64,"line_end":64,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2320},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228591,"byte_end":228607,"line_start":94,"line_end":94,"column_start":12,"column_end":28},"name":"OverlayedChanges","qualname":"::overlayed_changes::OverlayedChanges","value":"OverlayedChanges {  }","parent":null,"children":[{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324}],"decl_id":null,"docs":" The set of changes that are overlaid onto the backend.","sig":null,"attributes":[{"value":"/ The set of changes that are overlaid onto the backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228418,"byte_end":228476,"line_start":90,"line_end":90,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228477,"byte_end":228480,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ It allows changes to be modified using nestable transactions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228481,"byte_end":228546,"line_start":92,"line_end":92,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1165},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229195,"byte_end":229209,"line_start":109,"line_end":109,"column_start":12,"column_end":26},"name":"StorageChanges","qualname":"::overlayed_changes::StorageChanges","value":"StorageChanges { main_storage_changes, child_storage_changes, offchain_storage_changes, transaction, transaction_storage_root, changes_trie_transaction }","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174}],"decl_id":null,"docs":" A storage changes structure that can be generated by the data collected in [`OverlayedChanges`].","sig":null,"attributes":[{"value":"/ A storage changes structure that can be generated by the data collected in [`OverlayedChanges`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228969,"byte_end":229069,"line_start":105,"line_end":105,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229070,"byte_end":229073,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This contains all the changes to the storage and transactions to apply theses changes to the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229074,"byte_end":229170,"line_start":107,"line_end":107,"column_start":1,"column_end":97}},{"value":"/ backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229171,"byte_end":229183,"line_start":108,"line_end":108,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":1169},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229350,"byte_end":229370,"line_start":113,"line_end":113,"column_start":6,"column_end":26},"name":"main_storage_changes","qualname":"::overlayed_changes::StorageChanges::main_storage_changes","value":"std::vec::Vec<(std::vec::Vec<u8>, std::option::Option<std::vec::Vec<u8>>)>","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" All changes to the main storage.","sig":null,"attributes":[{"value":"/ All changes to the main storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229253,"byte_end":229289,"line_start":110,"line_end":110,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229291,"byte_end":229294,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ A value of `None` means that it was deleted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229296,"byte_end":229344,"line_start":112,"line_end":112,"column_start":2,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1170},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229436,"byte_end":229457,"line_start":115,"line_end":115,"column_start":6,"column_end":27},"name":"child_storage_changes","qualname":"::overlayed_changes::StorageChanges::child_storage_changes","value":"std::vec::Vec<(std::vec::Vec<u8>, std::vec::Vec<(std::vec::Vec<u8>, std::option::Option<std::vec::Vec<u8>>)>)>","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" All changes to the child storages.\n","sig":null,"attributes":[{"value":"/ All changes to the child storages.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229392,"byte_end":229430,"line_start":114,"line_end":114,"column_start":2,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1171},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229576,"byte_end":229600,"line_start":118,"line_end":118,"column_start":6,"column_end":30},"name":"offchain_storage_changes","qualname":"::overlayed_changes::StorageChanges::offchain_storage_changes","value":"sp_core::offchain::storage::OffchainOverlayedChanges","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" Offchain state changes to write to the offchain database.\n","sig":null,"attributes":[{"value":"/ Offchain state changes to write to the offchain database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229484,"byte_end":229545,"line_start":116,"line_end":116,"column_start":2,"column_end":63}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229547,"byte_end":229570,"line_start":117,"line_end":117,"column_start":2,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1172},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229924,"byte_end":229935,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"name":"transaction","qualname":"::overlayed_changes::StorageChanges::transaction","value":"Transaction","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" A transaction for the backend that contains all changes from\n [`main_storage_changes`](StorageChanges::main_storage_changes) and from\n [`child_storage_changes`](StorageChanges::child_storage_changes).\n [`offchain_storage_changes`](StorageChanges::offchain_storage_changes).\n","sig":null,"attributes":[{"value":"/ A transaction for the backend that contains all changes from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229629,"byte_end":229693,"line_start":119,"line_end":119,"column_start":2,"column_end":66}},{"value":"/ [`main_storage_changes`](StorageChanges::main_storage_changes) and from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229695,"byte_end":229770,"line_start":120,"line_end":120,"column_start":2,"column_end":77}},{"value":"/ [`child_storage_changes`](StorageChanges::child_storage_changes).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229772,"byte_end":229841,"line_start":121,"line_end":121,"column_start":2,"column_end":71}},{"value":"/ [`offchain_storage_changes`](StorageChanges::offchain_storage_changes).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229843,"byte_end":229918,"line_start":122,"line_end":122,"column_start":2,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1173},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230009,"byte_end":230033,"line_start":125,"line_end":125,"column_start":6,"column_end":30},"name":"transaction_storage_root","qualname":"::overlayed_changes::StorageChanges::transaction_storage_root","value":"<H as hash_db::Hasher>::Out","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" The storage root after applying the transaction.\n","sig":null,"attributes":[{"value":"/ The storage root after applying the transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":229951,"byte_end":230003,"line_start":124,"line_end":124,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1174},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230207,"byte_end":230231,"line_start":130,"line_end":130,"column_start":6,"column_end":30},"name":"changes_trie_transaction","qualname":"::overlayed_changes::StorageChanges::changes_trie_transaction","value":"std::option::Option<(memory_db::MemoryDB<H, memory_db::HashKey<H>, std::vec::Vec<u8>, memory_db::malloc_size_of::NoopTracker<std::vec::Vec<u8>>>, changes_trie::build_cache::CacheAction<<H as hash_db::Hasher>::Out, N>)>","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" Contains the transaction for the backend for the changes trie.","sig":null,"attributes":[{"value":"/ Contains the transaction for the backend for the changes trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230044,"byte_end":230110,"line_start":126,"line_end":126,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230112,"byte_end":230115,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ If changes trie is disabled the value is set to `None`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230117,"byte_end":230176,"line_start":128,"line_end":128,"column_start":2,"column_end":61}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230178,"byte_end":230201,"line_start":129,"line_end":129,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230567,"byte_end":230577,"line_start":139,"line_end":139,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<StorageChanges<Transaction, H, N>>::into_inner","value":"pub fn into_inner(Self)\n->\n    (StorageCollection, ChildStorageCollection, OffchainOverlayedChanges,\n     Transaction, H::Out, Option<ChangesTrieTransaction<H, N>>)","parent":null,"children":[],"decl_id":null,"docs":" Deconstruct into the inner values\n","sig":null,"attributes":[{"value":"/ Deconstruct into the inner values","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230521,"byte_end":230558,"line_start":138,"line_end":138,"column_start":2,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1180},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":231204,"byte_end":231227,"line_start":161,"line_end":161,"column_start":12,"column_end":35},"name":"StorageTransactionCache","qualname":"::overlayed_changes::StorageTransactionCache","value":"StorageTransactionCache {  }","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"decl_id":null,"docs":" The storage transaction are calculated as part of the `storage_root` and\n `changes_trie_storage_root`. These transactions can be reused for importing the block into the\n storage. So, we cache them to not require a recomputation of those transactions.\n","sig":null,"attributes":[{"value":"/ The storage transaction are calculated as part of the `storage_root` and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230932,"byte_end":231008,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/ `changes_trie_storage_root`. These transactions can be reused for importing the block into the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":231009,"byte_end":231107,"line_start":159,"line_end":159,"column_start":1,"column_end":99}},{"value":"/ storage. So, we cache them to not require a recomputation of those transactions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":231108,"byte_end":231192,"line_start":160,"line_end":160,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232111,"byte_end":232116,"line_start":179,"line_end":179,"column_start":9,"column_end":14},"name":"reset","qualname":"<StorageTransactionCache<Transaction, H, N>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the cached transactions.\n","sig":null,"attributes":[{"value":"/ Reset the cached transactions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232068,"byte_end":232102,"line_start":178,"line_end":178,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233195,"byte_end":233203,"line_start":218,"line_end":218,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<OverlayedChanges>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether no changes are contained in the top nor in any of the child changes.\n","sig":null,"attributes":[{"value":"/ Whether no changes are contained in the top nor in any of the child changes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233106,"byte_end":233186,"line_start":217,"line_end":217,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233368,"byte_end":233390,"line_start":223,"line_end":223,"column_start":9,"column_end":31},"name":"set_collect_extrinsics","qualname":"<OverlayedChanges>::set_collect_extrinsics","value":"pub fn set_collect_extrinsics(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Ask to collect/not to collect extrinsics indices where key(s) has been changed.\n","sig":null,"attributes":[{"value":"/ Ask to collect/not to collect extrinsics indices where key(s) has been changed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233276,"byte_end":233359,"line_start":222,"line_end":222,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233705,"byte_end":233712,"line_start":230,"line_end":230,"column_start":9,"column_end":16},"name":"storage","qualname":"<OverlayedChanges>::storage","value":"pub fn storage(&Self, &[u8]) -> Option<Option<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a double-Option: None if the key is unknown (i.e. and the query should be referred\n to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose\n value has been set.\n","sig":null,"attributes":[{"value":"/ Returns a double-Option: None if the key is unknown (i.e. and the query should be referred","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233483,"byte_end":233577,"line_start":227,"line_end":227,"column_start":2,"column_end":96}},{"value":"/ to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233579,"byte_end":233671,"line_start":228,"line_end":228,"column_start":2,"column_end":94}},{"value":"/ value has been set.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233673,"byte_end":233696,"line_start":229,"line_end":229,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234350,"byte_end":234374,"line_start":245,"line_end":245,"column_start":9,"column_end":33},"name":"value_mut_or_insert_with","qualname":"<OverlayedChanges>::value_mut_or_insert_with","value":"pub fn value_mut_or_insert_with<impl Fn() -> StorageValue: Fn() ->\n                                StorageValue>(&mut Self, &[u8],\n                                              impl Fn() -> StorageValue)\n-> &mut StorageValue","parent":null,"children":[],"decl_id":null,"docs":" Returns mutable reference to current value.\n If there is no value in the overlay, the given callback is used to initiate the value.\n Warning this function registers a change, so the mutable reference MUST be modified.","sig":null,"attributes":[{"value":"/ Returns mutable reference to current value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233962,"byte_end":234009,"line_start":239,"line_end":239,"column_start":2,"column_end":49}},{"value":"/ If there is no value in the overlay, the given callback is used to initiate the value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234011,"byte_end":234101,"line_start":240,"line_end":240,"column_start":2,"column_end":92}},{"value":"/ Warning this function registers a change, so the mutable reference MUST be modified.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234103,"byte_end":234191,"line_start":241,"line_end":241,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234193,"byte_end":234196,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ Can be rolled back or committed when called inside a transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234198,"byte_end":234267,"line_start":243,"line_end":243,"column_start":2,"column_end":71}},{"value":"must_use = \"A change was registered, so this value MUST be modified.\"","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234269,"byte_end":234341,"line_start":244,"line_end":244,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234884,"byte_end":234897,"line_start":259,"line_end":259,"column_start":9,"column_end":22},"name":"child_storage","qualname":"<OverlayedChanges>::child_storage","value":"pub fn child_storage(&Self, &ChildInfo, &[u8]) -> Option<Option<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a double-Option: None if the key is unknown (i.e. and the query should be referred\n to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose\n value has been set.\n","sig":null,"attributes":[{"value":"/ Returns a double-Option: None if the key is unknown (i.e. and the query should be referred","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234662,"byte_end":234756,"line_start":256,"line_end":256,"column_start":2,"column_end":96}},{"value":"/ to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234758,"byte_end":234850,"line_start":257,"line_end":257,"column_start":2,"column_end":94}},{"value":"/ value has been set.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":234852,"byte_end":234875,"line_start":258,"line_end":258,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238131,"byte_end":238148,"line_start":356,"line_end":356,"column_start":9,"column_end":26},"name":"transaction_depth","qualname":"<OverlayedChanges>::transaction_depth","value":"pub fn transaction_depth(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current nesting depth of the transaction stack.","sig":null,"attributes":[{"value":"/ Returns the current nesting depth of the transaction stack.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":237963,"byte_end":238026,"line_start":353,"line_end":353,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238028,"byte_end":238031,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ A value of zero means that no transaction is open and changes are committed on write.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238033,"byte_end":238122,"line_start":355,"line_end":355,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238725,"byte_end":238742,"line_start":369,"line_end":369,"column_start":9,"column_end":26},"name":"start_transaction","qualname":"<OverlayedChanges>::start_transaction","value":"pub fn start_transaction(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Start a new nested transaction.","sig":null,"attributes":[{"value":"/ Start a new nested transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238333,"byte_end":238368,"line_start":362,"line_end":362,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238370,"byte_end":238373,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ This allows to either commit or roll back all changes that where made while this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238375,"byte_end":238459,"line_start":364,"line_end":364,"column_start":2,"column_end":86}},{"value":"/ transaction was open. Any transaction must be closed by either `rollback_transaction` or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238461,"byte_end":238553,"line_start":365,"line_end":365,"column_start":2,"column_end":94}},{"value":"/ `commit_transaction` before this overlay can be converted into storage changes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238555,"byte_end":238638,"line_start":366,"line_end":366,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238640,"byte_end":238643,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ Changes made without any open transaction are committed immediatly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238645,"byte_end":238716,"line_start":368,"line_end":368,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239106,"byte_end":239126,"line_start":380,"line_end":380,"column_start":9,"column_end":29},"name":"rollback_transaction","qualname":"<OverlayedChanges>::rollback_transaction","value":"pub fn rollback_transaction(&mut Self) -> Result<(), NoOpenTransaction>","parent":null,"children":[],"decl_id":null,"docs":" Rollback the last transaction started by `start_transaction`.","sig":null,"attributes":[{"value":"/ Rollback the last transaction started by `start_transaction`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238887,"byte_end":238952,"line_start":376,"line_end":376,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238954,"byte_end":238957,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ Any changes made during that transaction are discarded. Returns an error if","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":238959,"byte_end":239038,"line_start":378,"line_end":378,"column_start":2,"column_end":81}},{"value":"/ there is no open transaction that can be rolled back.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239040,"byte_end":239097,"line_start":379,"line_end":379,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239633,"byte_end":239651,"line_start":394,"line_end":394,"column_start":9,"column_end":27},"name":"commit_transaction","qualname":"<OverlayedChanges>::commit_transaction","value":"pub fn commit_transaction(&mut Self) -> Result<(), NoOpenTransaction>","parent":null,"children":[],"decl_id":null,"docs":" Commit the last transaction started by `start_transaction`.","sig":null,"attributes":[{"value":"/ Commit the last transaction started by `start_transaction`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239418,"byte_end":239481,"line_start":390,"line_end":390,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239483,"byte_end":239486,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ Any changes made during that transaction are committed. Returns an error if there","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239488,"byte_end":239573,"line_start":392,"line_end":392,"column_start":2,"column_end":87}},{"value":"/ is no open transaction that can be committed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239575,"byte_end":239624,"line_start":393,"line_end":393,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240136,"byte_end":240149,"line_start":407,"line_end":407,"column_start":9,"column_end":22},"name":"enter_runtime","qualname":"<OverlayedChanges>::enter_runtime","value":"pub fn enter_runtime(&mut Self) -> Result<(), AlreadyInRuntime>","parent":null,"children":[],"decl_id":null,"docs":" Call this before transfering control to the runtime.","sig":null,"attributes":[{"value":"/ Call this before transfering control to the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239913,"byte_end":239969,"line_start":403,"line_end":403,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239971,"byte_end":239974,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ This protects all existing transactions from being removed by the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":239976,"byte_end":240054,"line_start":405,"line_end":405,"column_start":2,"column_end":80}},{"value":"/ Calling this while already inside the runtime will return an error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240056,"byte_end":240127,"line_start":406,"line_end":406,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240609,"byte_end":240621,"line_start":420,"line_end":420,"column_start":9,"column_end":21},"name":"exit_runtime","qualname":"<OverlayedChanges>::exit_runtime","value":"pub fn exit_runtime(&mut Self) -> Result<(), NotInRuntime>","parent":null,"children":[],"decl_id":null,"docs":" Call this when control returns from the runtime.","sig":null,"attributes":[{"value":"/ Call this when control returns from the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240408,"byte_end":240460,"line_start":416,"line_end":416,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240462,"byte_end":240465,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ This commits all dangling transaction left open by the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240467,"byte_end":240534,"line_start":418,"line_end":418,"column_start":2,"column_end":69}},{"value":"/ Calling this while outside the runtime will return an error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":240536,"byte_end":240600,"line_start":419,"line_end":419,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":241581,"byte_end":241589,"line_start":452,"line_end":452,"column_start":9,"column_end":17},"name":"children","qualname":"<OverlayedChanges>::children","value":"pub fn children(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all child changes as seen by the current transaction.\n","sig":null,"attributes":[{"value":"/ Get an iterator over all child changes as seen by the current transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":241494,"byte_end":241572,"line_start":451,"line_end":451,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":241838,"byte_end":241845,"line_start":458,"line_end":458,"column_start":9,"column_end":16},"name":"changes","qualname":"<OverlayedChanges>::changes","value":"pub fn changes(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all top changes as been by the current transaction.\n","sig":null,"attributes":[{"value":"/ Get an iterator over all top changes as been by the current transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":241753,"byte_end":241829,"line_start":457,"line_end":457,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":242026,"byte_end":242039,"line_start":463,"line_end":463,"column_start":9,"column_end":22},"name":"child_changes","qualname":"<OverlayedChanges>::child_changes","value":"pub fn child_changes(&Self, &[u8]) -> Option<(/*impl Trait*/, &ChildInfo)>","parent":null,"children":[],"decl_id":null,"docs":" Get an optional iterator over all child changes stored under the supplied key.\n","sig":null,"attributes":[{"value":"/ Get an optional iterator over all child changes stored under the supplied key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":241935,"byte_end":242017,"line_start":462,"line_end":462,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":242330,"byte_end":242350,"line_start":470,"line_end":470,"column_start":9,"column_end":29},"name":"into_storage_changes","qualname":"<OverlayedChanges>::into_storage_changes","value":"pub fn into_storage_changes<B: Backend<H>, H: Hasher,\n                            N: BlockNumber>(Self, &B,\n                                            Option<&ChangesTrieState<, H, N>>,\n                                            H::Out,\n                                            StorageTransactionCache<B::Transaction,\n                                                                    H, N>)\n-> Result<StorageChanges<B::Transaction, H, N>, DefaultError> where\nH::Out: Ord + Encode + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this instance with all changes into a [`StorageChanges`] instance.\n","sig":null,"attributes":[{"value":"/ Convert this instance with all changes into a [`StorageChanges`] instance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":242218,"byte_end":242296,"line_start":468,"line_end":468,"column_start":2,"column_end":80}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":242298,"byte_end":242321,"line_start":469,"line_end":469,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":242854,"byte_end":242875,"line_start":484,"line_end":484,"column_start":9,"column_end":30},"name":"drain_storage_changes","qualname":"<OverlayedChanges>::drain_storage_changes","value":"pub fn drain_storage_changes<B: Backend<H>, H: Hasher,\n                             N: BlockNumber>(&mut Self, &B,\n                                             Option<&ChangesTrieState<, H,\n                                                                      N>>,\n                                             H::Out,\n                                             &mut StorageTransactionCache<B::Transaction,\n                                                                          H,\n                                                                          N>)\n-> Result<StorageChanges<B::Transaction, H, N>, DefaultError> where\nH::Out: Ord + Encode + 'static","parent":null,"children":[],"decl_id":null,"docs":" Drain all changes into a [`StorageChanges`] instance. Leave empty overlay in place.\n","sig":null,"attributes":[{"value":"/ Drain all changes into a [`StorageChanges`] instance. Leave empty overlay in place.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":242758,"byte_end":242845,"line_start":483,"line_end":483,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":245681,"byte_end":245693,"line_start":561,"line_end":561,"column_start":9,"column_end":21},"name":"storage_root","qualname":"<OverlayedChanges>::storage_root","value":"pub fn storage_root<H: Hasher, N: BlockNumber,\n                    B: Backend<H>>(&Self, &B,\n                                   &mut StorageTransactionCache<B::Transaction,\n                                                                H, N>)\n-> H::Out where H::Out: Ord + Encode","parent":null,"children":[],"decl_id":null,"docs":" Generate the storage root using `backend` and all changes\n as seen by the current transaction.","sig":null,"attributes":[{"value":"/ Generate the storage root using `backend` and all changes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":245482,"byte_end":245543,"line_start":557,"line_end":557,"column_start":2,"column_end":63}},{"value":"/ as seen by the current transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":245545,"byte_end":245584,"line_start":558,"line_end":558,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":245586,"byte_end":245589,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ Returns the storage root and caches storage transaction in the given `cache`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":245591,"byte_end":245672,"line_start":560,"line_end":560,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246525,"byte_end":246542,"line_start":590,"line_end":590,"column_start":9,"column_end":26},"name":"changes_trie_root","qualname":"<OverlayedChanges>::changes_trie_root","value":"pub fn changes_trie_root<'a, H: Hasher, N: BlockNumber,\n                         B: Backend<H>>(&Self, &B,\n                                        Option<&'a ChangesTrieState>, H::Out,\n                                        bool,\n                                        &mut StorageTransactionCache<B::Transaction,\n                                                                     H, N>)\n-> Result<Option<H::Out>, ()> where H::Out: Ord + Encode + 'static","parent":null,"children":[],"decl_id":null,"docs":" Generate the changes trie root.","sig":null,"attributes":[{"value":"/ Generate the changes trie root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246265,"byte_end":246300,"line_start":582,"line_end":582,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246302,"byte_end":246305,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ Returns the changes trie root and caches the storage transaction into the given `cache`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246307,"byte_end":246399,"line_start":584,"line_end":584,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246401,"byte_end":246404,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246406,"byte_end":246418,"line_start":586,"line_end":586,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246420,"byte_end":246423,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ Panics on storage error, when `panic_on_storage_error` is set.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246425,"byte_end":246491,"line_start":588,"line_end":588,"column_start":2,"column_end":68}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":246493,"byte_end":246516,"line_start":589,"line_end":589,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":247357,"byte_end":247380,"line_start":614,"line_end":614,"column_start":9,"column_end":32},"name":"next_storage_key_change","qualname":"<OverlayedChanges>::next_storage_key_change","value":"pub fn next_storage_key_change(&Self, &[u8])\n-> Option<(&[u8], &OverlayedValue)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next (in lexicographic order) storage key in the overlayed alongside its value.\n If no value is next then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the next (in lexicographic order) storage key in the overlayed alongside its value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":247203,"byte_end":247298,"line_start":612,"line_end":612,"column_start":2,"column_end":97}},{"value":"/ If no value is next then `None` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":247300,"byte_end":247348,"line_start":613,"line_end":613,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":247632,"byte_end":247661,"line_start":620,"line_end":620,"column_start":9,"column_end":38},"name":"next_child_storage_key_change","qualname":"<OverlayedChanges>::next_child_storage_key_change","value":"pub fn next_child_storage_key_change(&Self, &[u8], &[u8])\n-> Option<(&[u8], &OverlayedValue)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next (in lexicographic order) child storage key in the overlayed alongside its\n value.  If no value is next then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the next (in lexicographic order) child storage key in the overlayed alongside its","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":247471,"byte_end":247565,"line_start":618,"line_end":618,"column_start":2,"column_end":96}},{"value":"/ value.  If no value is next then `None` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":247567,"byte_end":247623,"line_start":619,"line_end":619,"column_start":2,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1324},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":283808,"byte_end":283830,"line_start":36,"line_end":36,"column_start":12,"column_end":34},"name":"ProvingBackendRecorder","qualname":"::proving_backend::ProvingBackendRecorder","value":"ProvingBackendRecorder {  }","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329}],"decl_id":null,"docs":" Patricia trie-based backend specialized in get value proofs.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based backend specialized in get value proofs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":283732,"byte_end":283796,"line_start":35,"line_end":35,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":284151,"byte_end":284158,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"storage","qualname":"<ProvingBackendRecorder>::storage","value":"pub fn storage(&mut Self, &[u8]) -> Result<Option<Vec<u8>>, String>","parent":null,"children":[],"decl_id":null,"docs":" Produce proof for a key query.\n","sig":null,"attributes":[{"value":"/ Produce proof for a key query.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":284108,"byte_end":284142,"line_start":47,"line_end":47,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":284615,"byte_end":284628,"line_start":66,"line_end":66,"column_start":9,"column_end":22},"name":"child_storage","qualname":"<ProvingBackendRecorder>::child_storage","value":"pub fn child_storage(&mut Self, &ChildInfo, &[u8])\n-> Result<Option<Vec<u8>>, String>","parent":null,"children":[],"decl_id":null,"docs":" Produce proof for a child key query.\n","sig":null,"attributes":[{"value":"/ Produce proof for a child key query.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":284566,"byte_end":284606,"line_start":65,"line_end":65,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":285329,"byte_end":285344,"line_start":94,"line_end":94,"column_start":9,"column_end":24},"name":"record_all_keys","qualname":"<ProvingBackendRecorder>::record_all_keys","value":"pub fn record_all_keys(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Produce proof for the whole backend.\n","sig":null,"attributes":[{"value":"/ Produce proof for the whole backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":285280,"byte_end":285320,"line_start":93,"line_end":93,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1342},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":285880,"byte_end":285893,"line_start":114,"line_end":114,"column_start":10,"column_end":23},"name":"ProofRecorder","qualname":"::proving_backend::ProofRecorder","value":"Arc<RwLock<HashMap<<H as Hasher>::Out, Option<DBValue>>>>","parent":null,"children":[],"decl_id":null,"docs":" Global proof recorder, act as a layer over a hash db for recording queried\n data.\n","sig":null,"attributes":[{"value":"/ Global proof recorder, act as a layer over a hash db for recording queried","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":285782,"byte_end":285860,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/ data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":285861,"byte_end":285870,"line_start":113,"line_end":113,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286124,"byte_end":286138,"line_start":118,"line_end":118,"column_start":12,"column_end":26},"name":"ProvingBackend","qualname":"::proving_backend::ProvingBackend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Patricia trie-based backend which also tracks all touched storage trie values.\n These can be sent to remote node and used as a proof of execution.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based backend which also tracks all touched storage trie values.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":285959,"byte_end":286041,"line_start":116,"line_end":116,"column_start":1,"column_end":83}},{"value":"/ These can be sent to remote node and used as a proof of execution.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286042,"byte_end":286112,"line_start":117,"line_end":117,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286580,"byte_end":286583,"line_start":132,"line_end":132,"column_start":9,"column_end":12},"name":"new","qualname":"<ProvingBackend>::new","value":"pub fn new(&'a TrieBackend<S, H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new proving backend.\n","sig":null,"attributes":[{"value":"/ Create new proving backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286540,"byte_end":286571,"line_start":131,"line_end":131,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286789,"byte_end":286806,"line_start":138,"line_end":138,"column_start":9,"column_end":26},"name":"new_with_recorder","qualname":"<ProvingBackend>::new_with_recorder","value":"pub fn new_with_recorder(&'a TrieBackend<S, H>, ProofRecorder<H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new proving backend with the given recorder.\n","sig":null,"attributes":[{"value":"/ Create new proving backend with the given recorder.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286725,"byte_end":286780,"line_start":137,"line_end":137,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":287175,"byte_end":287188,"line_start":152,"line_end":152,"column_start":9,"column_end":22},"name":"extract_proof","qualname":"<ProvingBackend>::extract_proof","value":"pub fn extract_proof(&Self) -> StorageProof","parent":null,"children":[],"decl_id":null,"docs":" Extracting the gathered unordered proof.\n","sig":null,"attributes":[{"value":"/ Extracting the gathered unordered proof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":287122,"byte_end":287166,"line_start":151,"line_end":151,"column_start":2,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1406},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":290333,"byte_end":290359,"line_start":283,"line_end":283,"column_start":8,"column_end":34},"name":"create_proof_check_backend","qualname":"::proving_backend::create_proof_check_backend","value":"pub fn create_proof_check_backend<H>(H::Out, StorageProof)\n-> Result<TrieBackend<MemoryDB<H>, H>, Box<Error>> where H: Hasher,\nH::Out: Codec","parent":null,"children":[],"decl_id":null,"docs":" Create proof check backend.\n","sig":null,"attributes":[{"value":"/ Create proof check backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":290294,"byte_end":290325,"line_start":282,"line_end":282,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1439},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":296914,"byte_end":296925,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"TrieBackend","qualname":"::trie_backend::TrieBackend","value":"TrieBackend {  }","parent":null,"children":[{"krate":0,"index":1442}],"decl_id":null,"docs":" Patricia trie-based backend. Transaction type is an overlay of changes to commit.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based backend. Transaction type is an overlay of changes to commit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":296817,"byte_end":296902,"line_start":32,"line_end":32,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297142,"byte_end":297145,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBackend<S, H>>::new","value":"pub fn new(S, H::Out) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new trie-based backend.\n","sig":null,"attributes":[{"value":"/ Create new trie-based backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297099,"byte_end":297133,"line_start":38,"line_end":38,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297302,"byte_end":297309,"line_start":46,"line_end":46,"column_start":9,"column_end":16},"name":"essence","qualname":"<TrieBackend<S, H>>::essence","value":"pub fn essence(&Self) -> &TrieBackendEssence<S, H>","parent":null,"children":[],"decl_id":null,"docs":" Get backend essence reference.\n","sig":null,"attributes":[{"value":"/ Get backend essence reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297259,"byte_end":297293,"line_start":45,"line_end":45,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297412,"byte_end":297427,"line_start":51,"line_end":51,"column_start":9,"column_end":24},"name":"backend_storage","qualname":"<TrieBackend<S, H>>::backend_storage","value":"pub fn backend_storage(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297369,"byte_end":297403,"line_start":50,"line_end":50,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297524,"byte_end":297543,"line_start":56,"line_end":56,"column_start":9,"column_end":28},"name":"backend_storage_mut","qualname":"<TrieBackend<S, H>>::backend_storage_mut","value":"pub fn backend_storage_mut(&mut Self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297481,"byte_end":297515,"line_start":55,"line_end":55,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297636,"byte_end":297640,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"name":"root","qualname":"<TrieBackend<S, H>>::root","value":"pub fn root(&Self) -> &H::Out","parent":null,"children":[],"decl_id":null,"docs":" Get trie root.\n","sig":null,"attributes":[{"value":"/ Get trie root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297609,"byte_end":297627,"line_start":60,"line_end":60,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297746,"byte_end":297758,"line_start":66,"line_end":66,"column_start":9,"column_end":21},"name":"into_storage","qualname":"<TrieBackend<S, H>>::into_storage","value":"pub fn into_storage(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and returns underlying storage.\n","sig":null,"attributes":[{"value":"/ Consumes self and returns underlying storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297688,"byte_end":297737,"line_start":65,"line_end":65,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":1527},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307046,"byte_end":307053,"line_start":44,"line_end":44,"column_start":11,"column_end":18},"name":"Storage","qualname":"::trie_backend_essence::Storage","value":"Storage<H: Hasher>: Send + Sync","parent":null,"children":[{"krate":0,"index":1529}],"decl_id":null,"docs":" Patricia trie-based storage trait.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based storage trait.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":306997,"byte_end":307035,"line_start":43,"line_end":43,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307106,"byte_end":307109,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"get","qualname":"::trie_backend_essence::Storage::get","value":"pub fn get(&Self, &H::Out, Prefix) -> Result<Option<DBValue>>","parent":{"krate":0,"index":1527},"children":[],"decl_id":null,"docs":" Get a trie node.\n","sig":null,"attributes":[{"value":"/ Get a trie node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307081,"byte_end":307101,"line_start":45,"line_end":45,"column_start":2,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1530},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307236,"byte_end":307254,"line_start":50,"line_end":50,"column_start":12,"column_end":30},"name":"TrieBackendEssence","qualname":"::trie_backend_essence::TrieBackendEssence","value":"TrieBackendEssence {  }","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535}],"decl_id":null,"docs":" Patricia trie-based pairs storage essence.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based pairs storage essence.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307178,"byte_end":307224,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307475,"byte_end":307478,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBackendEssence<S, H>>::new","value":"pub fn new(S, H::Out) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new trie-based backend.\n","sig":null,"attributes":[{"value":"/ Create new trie-based backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307432,"byte_end":307466,"line_start":57,"line_end":57,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307638,"byte_end":307653,"line_start":67,"line_end":67,"column_start":9,"column_end":24},"name":"backend_storage","qualname":"<TrieBackendEssence<S, H>>::backend_storage","value":"pub fn backend_storage(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307595,"byte_end":307629,"line_start":66,"line_end":66,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307733,"byte_end":307752,"line_start":72,"line_end":72,"column_start":9,"column_end":28},"name":"backend_storage_mut","qualname":"<TrieBackendEssence<S, H>>::backend_storage_mut","value":"pub fn backend_storage_mut(&mut Self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307690,"byte_end":307724,"line_start":71,"line_end":71,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307828,"byte_end":307832,"line_start":77,"line_end":77,"column_start":9,"column_end":13},"name":"root","qualname":"<TrieBackendEssence<S, H>>::root","value":"pub fn root(&Self) -> &H::Out","parent":null,"children":[],"decl_id":null,"docs":" Get trie root.\n","sig":null,"attributes":[{"value":"/ Get trie root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307801,"byte_end":307819,"line_start":76,"line_end":76,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307926,"byte_end":307934,"line_start":82,"line_end":82,"column_start":9,"column_end":17},"name":"set_root","qualname":"<TrieBackendEssence<S, H>>::set_root","value":"pub fn set_root(&mut Self, H::Out)","parent":null,"children":[],"decl_id":null,"docs":" Set trie root. This is useful for testing.\n","sig":null,"attributes":[{"value":"/ Set trie root. This is useful for testing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307871,"byte_end":307917,"line_start":81,"line_end":81,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308045,"byte_end":308057,"line_start":87,"line_end":87,"column_start":9,"column_end":21},"name":"into_storage","qualname":"<TrieBackendEssence<S, H>>::into_storage","value":"pub fn into_storage(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and returns underlying storage.\n","sig":null,"attributes":[{"value":"/ Consumes self and returns underlying storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307987,"byte_end":308036,"line_start":86,"line_end":86,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308220,"byte_end":308236,"line_start":93,"line_end":93,"column_start":9,"column_end":25},"name":"next_storage_key","qualname":"<TrieBackendEssence<S, H>>::next_storage_key","value":"pub fn next_storage_key(&Self, &[u8]) -> Result<Option<StorageKey>>","parent":null,"children":[],"decl_id":null,"docs":" Return the next key in the trie i.e. the minimum key that is strictly superior to `key` in\n lexicographic order.\n","sig":null,"attributes":[{"value":"/ Return the next key in the trie i.e. the minimum key that is strictly superior to `key` in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308091,"byte_end":308185,"line_start":91,"line_end":91,"column_start":2,"column_end":96}},{"value":"/ lexicographic order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308187,"byte_end":308211,"line_start":92,"line_end":92,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308691,"byte_end":308713,"line_start":104,"line_end":104,"column_start":9,"column_end":31},"name":"next_child_storage_key","qualname":"<TrieBackendEssence<S, H>>::next_child_storage_key","value":"pub fn next_child_storage_key(&Self, &ChildInfo, &[u8])\n-> Result<Option<StorageKey>>","parent":null,"children":[],"decl_id":null,"docs":" Return the next key in the child trie i.e. the minimum key that is strictly superior to\n `key` in lexicographic order.\n","sig":null,"attributes":[{"value":"/ Return the next key in the child trie i.e. the minimum key that is strictly superior to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308556,"byte_end":308647,"line_start":102,"line_end":102,"column_start":2,"column_end":93}},{"value":"/ `key` in lexicographic order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":308649,"byte_end":308682,"line_start":103,"line_end":103,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":310777,"byte_end":310784,"line_start":171,"line_end":171,"column_start":9,"column_end":16},"name":"storage","qualname":"<TrieBackendEssence<S, H>>::storage","value":"pub fn storage(&Self, &[u8]) -> Result<Option<StorageValue>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of storage at given key.\n","sig":null,"attributes":[{"value":"/ Get the value of storage at given key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":310726,"byte_end":310768,"line_start":170,"line_end":170,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":311028,"byte_end":311041,"line_start":178,"line_end":178,"column_start":9,"column_end":22},"name":"child_storage","qualname":"<TrieBackendEssence<S, H>>::child_storage","value":"pub fn child_storage(&Self, &ChildInfo, &[u8]) -> Result<Option<StorageValue>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of child storage at given key.\n","sig":null,"attributes":[{"value":"/ Get the value of child storage at given key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":310971,"byte_end":311019,"line_start":177,"line_end":177,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":311495,"byte_end":311520,"line_start":193,"line_end":193,"column_start":9,"column_end":34},"name":"for_keys_in_child_storage","qualname":"<TrieBackendEssence<S, H>>::for_keys_in_child_storage","value":"pub fn for_keys_in_child_storage<F: FnMut(&[u8]) -> ()>(&Self, &ChildInfo, F)","parent":null,"children":[],"decl_id":null,"docs":" Retrieve all entries keys of child storage and call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys of child storage and call `f` for each of those keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":311403,"byte_end":311486,"line_start":192,"line_end":192,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":312097,"byte_end":312123,"line_start":217,"line_end":217,"column_start":9,"column_end":35},"name":"for_child_keys_with_prefix","qualname":"<TrieBackendEssence<S, H>>::for_child_keys_with_prefix","value":"pub fn for_child_keys_with_prefix<F: FnMut(&[u8]) ->\n                                  ()>(&Self, &ChildInfo, &[u8], F)","parent":null,"children":[],"decl_id":null,"docs":" Execute given closure for all keys starting with prefix.\n","sig":null,"attributes":[{"value":"/ Execute given closure for all keys starting with prefix.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":312028,"byte_end":312088,"line_start":216,"line_end":216,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":312693,"byte_end":312713,"line_start":236,"line_end":236,"column_start":9,"column_end":29},"name":"for_keys_with_prefix","qualname":"<TrieBackendEssence<S, H>>::for_keys_with_prefix","value":"pub fn for_keys_with_prefix<F: FnMut(&[u8]) -> ()>(&Self, &[u8], F)","parent":null,"children":[],"decl_id":null,"docs":" Execute given closure for all keys starting with prefix.\n","sig":null,"attributes":[{"value":"/ Execute given closure for all keys starting with prefix.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":312624,"byte_end":312684,"line_start":235,"line_end":235,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":313641,"byte_end":313667,"line_start":273,"line_end":273,"column_start":9,"column_end":35},"name":"for_key_values_with_prefix","qualname":"<TrieBackendEssence<S, H>>::for_key_values_with_prefix","value":"pub fn for_key_values_with_prefix<F: FnMut(&[u8], &[u8]) ->\n                                  ()>(&Self, &[u8], F)","parent":null,"children":[],"decl_id":null,"docs":" Execute given closure for all key and values starting with prefix.\n","sig":null,"attributes":[{"value":"/ Execute given closure for all key and values starting with prefix.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":313562,"byte_end":313632,"line_start":272,"line_end":272,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":1607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315733,"byte_end":315751,"line_start":346,"line_end":346,"column_start":11,"column_end":29},"name":"TrieBackendStorage","qualname":"::trie_backend_essence::TrieBackendStorage","value":"TrieBackendStorage<H: Hasher>: Send + Sync","parent":null,"children":[{"krate":0,"index":1609},{"krate":0,"index":1610}],"decl_id":null,"docs":" Key-value pairs storage that is used by trie backend essence.\n","sig":null,"attributes":[{"value":"/ Key-value pairs storage that is used by trie backend essence.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315657,"byte_end":315722,"line_start":345,"line_end":345,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1609},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315816,"byte_end":315823,"line_start":348,"line_end":348,"column_start":7,"column_end":14},"name":"Overlay","qualname":"::trie_backend_essence::TrieBackendStorage::Overlay","value":"type Overlay: hash_db::HashDB<H, DBValue> + Default + Consolidate;","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":" Type of in-memory overlay.\n","sig":null,"attributes":[{"value":"/ Type of in-memory overlay.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315779,"byte_end":315809,"line_start":347,"line_end":347,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315916,"byte_end":315919,"line_start":350,"line_end":350,"column_start":5,"column_end":8},"name":"get","qualname":"::trie_backend_essence::TrieBackendStorage::get","value":"pub fn get(&Self, &H::Out, Prefix) -> Result<Option<DBValue>>","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":" Get the value stored at key.\n","sig":null,"attributes":[{"value":"/ Get the value stored at key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315879,"byte_end":315911,"line_start":349,"line_end":349,"column_start":2,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2331},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321372,"byte_end":321381,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"UsageUnit","qualname":"::stats::UsageUnit","value":"UsageUnit { ops, bytes }","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2333}],"decl_id":null,"docs":" Measured count of operations and total bytes.\n","sig":null,"attributes":[{"value":"/ Measured count of operations and total bytes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321278,"byte_end":321327,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2332},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321416,"byte_end":321419,"line_start":28,"line_end":28,"column_start":6,"column_end":9},"name":"ops","qualname":"::stats::UsageUnit::ops","value":"u64","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":" Number of operations.\n","sig":null,"attributes":[{"value":"/ Number of operations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321385,"byte_end":321410,"line_start":27,"line_end":27,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2333},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321453,"byte_end":321458,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"name":"bytes","qualname":"::stats::UsageUnit::bytes","value":"u64","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":" Number of bytes.\n","sig":null,"attributes":[{"value":"/ Number of bytes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321427,"byte_end":321447,"line_start":29,"line_end":29,"column_start":2,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":2340},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321543,"byte_end":321552,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"UsageInfo","qualname":"::stats::UsageInfo","value":"UsageInfo { reads, writes, nodes_writes, overlay_writes, removed_nodes, cache_reads, modified_reads, memory, started, span }","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" Usage statistics for state backend.\n","sig":null,"attributes":[{"value":"/ Usage statistics for state backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321468,"byte_end":321507,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2341},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321590,"byte_end":321595,"line_start":37,"line_end":37,"column_start":6,"column_end":11},"name":"reads","qualname":"::stats::UsageInfo::reads","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Read statistics (total).\n","sig":null,"attributes":[{"value":"/ Read statistics (total).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321556,"byte_end":321584,"line_start":36,"line_end":36,"column_start":2,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2342},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321644,"byte_end":321650,"line_start":39,"line_end":39,"column_start":6,"column_end":12},"name":"writes","qualname":"::stats::UsageInfo::writes","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Write statistics (total).\n","sig":null,"attributes":[{"value":"/ Write statistics (total).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321609,"byte_end":321638,"line_start":38,"line_end":38,"column_start":2,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2343},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321702,"byte_end":321714,"line_start":41,"line_end":41,"column_start":6,"column_end":18},"name":"nodes_writes","qualname":"::stats::UsageInfo::nodes_writes","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Write trie nodes statistics.\n","sig":null,"attributes":[{"value":"/ Write trie nodes statistics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321664,"byte_end":321696,"line_start":40,"line_end":40,"column_start":2,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2344},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321790,"byte_end":321804,"line_start":44,"line_end":44,"column_start":6,"column_end":20},"name":"overlay_writes","qualname":"::stats::UsageInfo::overlay_writes","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Write into cached state machine\n change overlay.\n","sig":null,"attributes":[{"value":"/ Write into cached state machine","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321728,"byte_end":321763,"line_start":42,"line_end":42,"column_start":2,"column_end":37}},{"value":"/ change overlay.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321765,"byte_end":321784,"line_start":43,"line_end":43,"column_start":2,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2345},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321858,"byte_end":321871,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"name":"removed_nodes","qualname":"::stats::UsageInfo::removed_nodes","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Removed trie nodes statistics.\n","sig":null,"attributes":[{"value":"/ Removed trie nodes statistics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321818,"byte_end":321852,"line_start":45,"line_end":45,"column_start":2,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2346},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321917,"byte_end":321928,"line_start":48,"line_end":48,"column_start":6,"column_end":17},"name":"cache_reads","qualname":"::stats::UsageInfo::cache_reads","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Cache read statistics.\n","sig":null,"attributes":[{"value":"/ Cache read statistics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321885,"byte_end":321911,"line_start":47,"line_end":47,"column_start":2,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2347},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321983,"byte_end":321997,"line_start":50,"line_end":50,"column_start":6,"column_end":20},"name":"modified_reads","qualname":"::stats::UsageInfo::modified_reads","value":"stats::UsageUnit","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Modified value read statistics.\n","sig":null,"attributes":[{"value":"/ Modified value read statistics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":321942,"byte_end":321977,"line_start":49,"line_end":49,"column_start":2,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":2348},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322033,"byte_end":322039,"line_start":52,"line_end":52,"column_start":6,"column_end":12},"name":"memory","qualname":"::stats::UsageInfo::memory","value":"usize","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Memory used.\n","sig":null,"attributes":[{"value":"/ Memory used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322011,"byte_end":322027,"line_start":51,"line_end":51,"column_start":2,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2349},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322153,"byte_end":322160,"line_start":56,"line_end":56,"column_start":6,"column_end":13},"name":"started","qualname":"::stats::UsageInfo::started","value":"std::time::Instant","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Moment at which current statistics has been started being collected.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322050,"byte_end":322073,"line_start":54,"line_end":54,"column_start":2,"column_end":25}},{"value":"/ Moment at which current statistics has been started being collected.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322075,"byte_end":322147,"line_start":55,"line_end":55,"column_start":2,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":2350},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322234,"byte_end":322238,"line_start":59,"line_end":59,"column_start":6,"column_end":10},"name":"span","qualname":"::stats::UsageInfo::span","value":"std::time::Duration","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" Timespan of the statistics.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322172,"byte_end":322195,"line_start":57,"line_end":57,"column_start":2,"column_end":25}},{"value":"/ Timespan of the statistics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322197,"byte_end":322228,"line_start":58,"line_end":58,"column_start":2,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2355},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322367,"byte_end":322384,"line_start":65,"line_end":65,"column_start":12,"column_end":29},"name":"StateMachineStats","qualname":"::stats::StateMachineStats","value":"StateMachineStats { reads_modified, bytes_read_modified, writes_overlay, bytes_writes_overlay }","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359}],"decl_id":null,"docs":" Accumulated usage statistics specific to state machine\n crate.\n","sig":null,"attributes":[{"value":"/ Accumulated usage statistics specific to state machine","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322253,"byte_end":322311,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/ crate.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322312,"byte_end":322322,"line_start":63,"line_end":63,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2356},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322495,"byte_end":322509,"line_start":69,"line_end":69,"column_start":6,"column_end":20},"name":"reads_modified","qualname":"::stats::StateMachineStats::reads_modified","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2355},"children":[],"decl_id":null,"docs":" Number of read query from runtime\n that hit a modified value (in state\n machine overlay).\n","sig":null,"attributes":[{"value":"/ Number of read query from runtime","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322388,"byte_end":322425,"line_start":66,"line_end":66,"column_start":2,"column_end":39}},{"value":"/ that hit a modified value (in state","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322427,"byte_end":322466,"line_start":67,"line_end":67,"column_start":2,"column_end":41}},{"value":"/ machine overlay).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322468,"byte_end":322489,"line_start":68,"line_end":68,"column_start":2,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2357},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322596,"byte_end":322615,"line_start":72,"line_end":72,"column_start":6,"column_end":25},"name":"bytes_read_modified","qualname":"::stats::StateMachineStats::bytes_read_modified","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2355},"children":[],"decl_id":null,"docs":" Size in byte of read queries that\n hit a modified value.\n","sig":null,"attributes":[{"value":"/ Size in byte of read queries that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322526,"byte_end":322563,"line_start":70,"line_end":70,"column_start":2,"column_end":39}},{"value":"/ hit a modified value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322565,"byte_end":322590,"line_start":71,"line_end":71,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2358},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322718,"byte_end":322732,"line_start":75,"line_end":75,"column_start":6,"column_end":20},"name":"writes_overlay","qualname":"::stats::StateMachineStats::writes_overlay","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2355},"children":[],"decl_id":null,"docs":" Number of time a write operation\n occurs into the state machine overlay.\n","sig":null,"attributes":[{"value":"/ Number of time a write operation","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322632,"byte_end":322668,"line_start":73,"line_end":73,"column_start":2,"column_end":38}},{"value":"/ occurs into the state machine overlay.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322670,"byte_end":322712,"line_start":74,"line_end":74,"column_start":2,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2359},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322810,"byte_end":322830,"line_start":78,"line_end":78,"column_start":6,"column_end":26},"name":"bytes_writes_overlay","qualname":"::stats::StateMachineStats::bytes_writes_overlay","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2355},"children":[],"decl_id":null,"docs":" Size in bytes of the writes overlay\n operation.\n","sig":null,"attributes":[{"value":"/ Size in bytes of the writes overlay","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322749,"byte_end":322788,"line_start":76,"line_end":76,"column_start":2,"column_end":41}},{"value":"/ operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322790,"byte_end":322804,"line_start":77,"line_end":77,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1649},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322922,"byte_end":322925,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"add","qualname":"<StateMachineStats>::add","value":"pub fn add(&Self, &StateMachineStats)","parent":null,"children":[],"decl_id":null,"docs":" Accumulates some registered stats.\n","sig":null,"attributes":[{"value":"/ Accumulates some registered stats.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322875,"byte_end":322913,"line_start":82,"line_end":82,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1651},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323361,"byte_end":323366,"line_start":95,"line_end":95,"column_start":9,"column_end":14},"name":"empty","qualname":"<UsageInfo>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Empty statistics.","sig":null,"attributes":[{"value":"/ Empty statistics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323292,"byte_end":323313,"line_start":92,"line_end":92,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323315,"byte_end":323318,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ Means no data was collected.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323320,"byte_end":323352,"line_start":94,"line_end":94,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323840,"byte_end":323868,"line_start":112,"line_end":112,"column_start":9,"column_end":37},"name":"include_state_machine_states","qualname":"<UsageInfo>::include_state_machine_states","value":"pub fn include_state_machine_states(&mut Self, &StateMachineStats)","parent":null,"children":[],"decl_id":null,"docs":" Add collected state machine to this state.\n","sig":null,"attributes":[{"value":"/ Add collected state machine to this state.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323785,"byte_end":323831,"line_start":111,"line_end":111,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":324263,"byte_end":324282,"line_start":122,"line_end":122,"column_start":9,"column_end":28},"name":"tally_read_modified","qualname":"<StateMachineStats>::tally_read_modified","value":"pub fn tally_read_modified(&Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Tally one read modified operation, of some length.\n","sig":null,"attributes":[{"value":"/ Tally one read modified operation, of some length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":324200,"byte_end":324254,"line_start":121,"line_end":121,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":324474,"byte_end":324493,"line_start":127,"line_end":127,"column_start":9,"column_end":28},"name":"tally_write_overlay","qualname":"<StateMachineStats>::tally_write_overlay","value":"pub fn tally_write_overlay(&Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Tally one write overlay operation, of some length.\n","sig":null,"attributes":[{"value":"/ Tally one write overlay operation, of some length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":324411,"byte_end":324465,"line_start":126,"line_end":126,"column_start":2,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1674},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325685,"byte_end":325697,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"name":"InspectState","qualname":"::read_only::InspectState","value":"InspectState<H: Hasher, B: Backend<H>>","parent":null,"children":[{"krate":0,"index":1677}],"decl_id":null,"docs":" Trait for inspecting state in any backend.","sig":null,"attributes":[{"value":"/ Trait for inspecting state in any backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325591,"byte_end":325637,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325638,"byte_end":325641,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implemented for any backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325642,"byte_end":325674,"line_start":34,"line_end":34,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325871,"byte_end":325883,"line_start":40,"line_end":40,"column_start":5,"column_end":17},"name":"inspect_with","qualname":"::read_only::InspectState::inspect_with","value":"pub fn inspect_with<F: FnOnce() -> ()>(&Self, F)","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Inspect state with a closure.","sig":null,"attributes":[{"value":"/ Inspect state with a closure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325727,"byte_end":325760,"line_start":36,"line_end":36,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325762,"byte_end":325765,"line_start":37,"line_end":37,"column_start":2,"column_end":5}},{"value":"/ Self will be set as read-only externalities and inspection","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325767,"byte_end":325829,"line_start":38,"line_end":38,"column_start":2,"column_end":64}},{"value":"/ closure will be run against it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325831,"byte_end":325866,"line_start":39,"line_end":39,"column_start":2,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2366},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326255,"byte_end":326276,"line_start":54,"line_end":54,"column_start":12,"column_end":33},"name":"ReadOnlyExternalities","qualname":"::read_only::ReadOnlyExternalities","value":"ReadOnlyExternalities {  }","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2371}],"decl_id":null,"docs":" Simple read-only externalities for any backend.","sig":null,"attributes":[{"value":"/ Simple read-only externalities for any backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326075,"byte_end":326126,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326127,"byte_end":326130,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ To be used in test for state inspection. Will panic if something writes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326131,"byte_end":326206,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ to the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326207,"byte_end":326226,"line_start":52,"line_end":52,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326753,"byte_end":326765,"line_start":69,"line_end":69,"column_start":9,"column_end":21},"name":"execute_with","qualname":"<ReadOnlyExternalities>::execute_with","value":"pub fn execute_with<R, impl FnOnce() -> R: FnOnce() ->\n                    R>(&mut Self, impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326626,"byte_end":326693,"line_start":66,"line_end":66,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326695,"byte_end":326698,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326700,"byte_end":326744,"line_start":68,"line_end":68,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1742},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2322,"byte_end":2334,"line_start":105,"line_end":105,"column_start":10,"column_end":22},"name":"DefaultError","qualname":"::DefaultError","value":"String","parent":null,"children":[],"decl_id":null,"docs":" Default error type to use with state machine trie backend.\n","sig":null,"attributes":[{"value":"/ Default error type to use with state machine trie backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2226,"byte_end":2288,"line_start":103,"line_end":103,"column_start":1,"column_end":63}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":2289,"byte_end":2312,"line_start":104,"line_end":104,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":1834},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5187,"byte_end":5201,"line_start":189,"line_end":189,"column_start":11,"column_end":25},"name":"DefaultHandler","qualname":"::execution::DefaultHandler","value":"fn(: CallResult<R, E>, : CallResult<R, E>) -> CallResult<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Default handler of the execution manager.\n","sig":null,"attributes":[{"value":"/ Default handler of the execution manager.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5131,"byte_end":5176,"line_start":188,"line_end":188,"column_start":2,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1837},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5320,"byte_end":5342,"line_start":192,"line_end":192,"column_start":11,"column_end":33},"name":"ChangesTrieTransaction","qualname":"::execution::ChangesTrieTransaction","value":"(MemoryDB<H>, ChangesTrieCacheAction<<H as Hasher>::Out, N>)","parent":null,"children":[],"decl_id":null,"docs":" Type of changes trie transaction.\n","sig":null,"attributes":[{"value":"/ Type of changes trie transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5272,"byte_end":5309,"line_start":191,"line_end":191,"column_start":2,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1840},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5474,"byte_end":5489,"line_start":198,"line_end":198,"column_start":11,"column_end":26},"name":"InMemoryBackend","qualname":"::execution::InMemoryBackend","value":"TrieBackend<MemoryDB<H>, H>","parent":null,"children":[],"decl_id":null,"docs":" Trie backend with in-memory storage.\n","sig":null,"attributes":[{"value":"/ Trie backend with in-memory storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5423,"byte_end":5463,"line_start":197,"line_end":197,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2378},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5784,"byte_end":5802,"line_start":205,"line_end":205,"column_start":3,"column_end":21},"name":"NativeWhenPossible","qualname":"::execution::ExecutionStrategy::NativeWhenPossible","value":"ExecutionStrategy::NativeWhenPossible","parent":{"krate":0,"index":2377},"children":[],"decl_id":null,"docs":" Execute with the native equivalent if it is compatible with the given wasm module;\n otherwise fall back to the wasm.\n","sig":null,"attributes":[{"value":"/ Execute with the native equivalent if it is compatible with the given wasm module;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5656,"byte_end":5742,"line_start":203,"line_end":203,"column_start":3,"column_end":89}},{"value":"/ otherwise fall back to the wasm.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5745,"byte_end":5781,"line_start":204,"line_end":204,"column_start":3,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2380},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5839,"byte_end":5849,"line_start":207,"line_end":207,"column_start":3,"column_end":13},"name":"AlwaysWasm","qualname":"::execution::ExecutionStrategy::AlwaysWasm","value":"ExecutionStrategy::AlwaysWasm","parent":{"krate":0,"index":2377},"children":[],"decl_id":null,"docs":" Use the given wasm module.\n","sig":null,"attributes":[{"value":"/ Use the given wasm module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5806,"byte_end":5836,"line_start":206,"line_end":206,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2382},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5958,"byte_end":5962,"line_start":209,"line_end":209,"column_start":3,"column_end":7},"name":"Both","qualname":"::execution::ExecutionStrategy::Both","value":"ExecutionStrategy::Both","parent":{"krate":0,"index":2377},"children":[],"decl_id":null,"docs":" Run with both the wasm and the native variant (if compatible). Report any discrepancy as an error.\n","sig":null,"attributes":[{"value":"/ Run with both the wasm and the native variant (if compatible). Report any discrepancy as an error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5853,"byte_end":5955,"line_start":208,"line_end":208,"column_start":3,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2384},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6031,"byte_end":6045,"line_start":211,"line_end":211,"column_start":3,"column_end":17},"name":"NativeElseWasm","qualname":"::execution::ExecutionStrategy::NativeElseWasm","value":"ExecutionStrategy::NativeElseWasm","parent":{"krate":0,"index":2377},"children":[],"decl_id":null,"docs":" First native, then if that fails or is not possible, wasm.\n","sig":null,"attributes":[{"value":"/ First native, then if that fails or is not possible, wasm.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5966,"byte_end":6028,"line_start":210,"line_end":210,"column_start":3,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":2377},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5634,"byte_end":5651,"line_start":202,"line_end":202,"column_start":11,"column_end":28},"name":"ExecutionStrategy","qualname":"::execution::ExecutionStrategy","value":"pub enum ExecutionStrategy {\n\n    /// Execute with the native equivalent if it is compatible with the given wasm module;\n    /// otherwise fall back to the wasm.\n    NativeWhenPossible,\n\n    /// Use the given wasm module.\n    AlwaysWasm,\n\n    /// Run with both the wasm and the native variant (if compatible). Report any discrepancy as an error.\n    Both,\n\n    /// First native, then if that fails or is not possible, wasm.\n    NativeElseWasm,\n}","parent":null,"children":[{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":2384}],"decl_id":null,"docs":" Strategy for executing a call into the runtime.\n","sig":null,"attributes":[{"value":"/ Strategy for executing a call into the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":5526,"byte_end":5577,"line_start":200,"line_end":200,"column_start":2,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2398},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6221,"byte_end":6228,"line_start":218,"line_end":218,"column_start":3,"column_end":10},"name":"Trusted","qualname":"::execution::BackendTrustLevel::Trusted","value":"BackendTrustLevel::Trusted","parent":{"krate":0,"index":2397},"children":[],"decl_id":null,"docs":" Panics from trusted backends are considered justified, and never caught.\n","sig":null,"attributes":[{"value":"/ Panics from trusted backends are considered justified, and never caught.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6142,"byte_end":6218,"line_start":217,"line_end":217,"column_start":3,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2400},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6418,"byte_end":6427,"line_start":222,"line_end":222,"column_start":3,"column_end":12},"name":"Untrusted","qualname":"::execution::BackendTrustLevel::Untrusted","value":"BackendTrustLevel::Untrusted","parent":{"krate":0,"index":2397},"children":[],"decl_id":null,"docs":" Panics from untrusted backend are caught and interpreted as runtime error.\n Untrusted backend may be missing some parts of the trie, so panics are not considered\n fatal.\n","sig":null,"attributes":[{"value":"/ Panics from untrusted backend are caught and interpreted as runtime error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6232,"byte_end":6310,"line_start":219,"line_end":219,"column_start":3,"column_end":81}},{"value":"/ Untrusted backend may be missing some parts of the trie, so panics are not considered","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6313,"byte_end":6402,"line_start":220,"line_end":220,"column_start":3,"column_end":92}},{"value":"/ fatal.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6405,"byte_end":6415,"line_start":221,"line_end":221,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":2397},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6120,"byte_end":6137,"line_start":216,"line_end":216,"column_start":11,"column_end":28},"name":"BackendTrustLevel","qualname":"::execution::BackendTrustLevel","value":"pub enum BackendTrustLevel {\n\n    /// Panics from trusted backends are considered justified, and never caught.\n    Trusted,\n\n    /// Panics from untrusted backend are caught and interpreted as runtime error.\n    /// Untrusted backend may be missing some parts of the trie, so panics are not considered\n    /// fatal.\n    Untrusted,\n}","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2400}],"decl_id":null,"docs":" Storage backend trust level.\n","sig":null,"attributes":[{"value":"/ Storage backend trust level.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6052,"byte_end":6084,"line_start":214,"line_end":214,"column_start":2,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2408},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6703,"byte_end":6721,"line_start":230,"line_end":230,"column_start":3,"column_end":21},"name":"NativeWhenPossible","qualname":"::execution::ExecutionManager::NativeWhenPossible","value":"ExecutionManager::NativeWhenPossible","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" Execute with the native equivalent if it is compatible with the given wasm module;\n otherwise fall back to the wasm.\n","sig":null,"attributes":[{"value":"/ Execute with the native equivalent if it is compatible with the given wasm module;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6575,"byte_end":6661,"line_start":228,"line_end":228,"column_start":3,"column_end":89}},{"value":"/ otherwise fall back to the wasm.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6664,"byte_end":6700,"line_start":229,"line_end":229,"column_start":3,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2410},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6998,"byte_end":7008,"line_start":234,"line_end":234,"column_start":3,"column_end":13},"name":"AlwaysWasm","qualname":"::execution::ExecutionManager::AlwaysWasm","value":"ExecutionManager::AlwaysWasm(BackendTrustLevel)","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" Use the given wasm module. The backend on which code is executed code could be\n trusted to provide all storage or not (i.e. the light client cannot be trusted to provide\n for all storage queries since the storage entries it has come from an external node).\n","sig":null,"attributes":[{"value":"/ Use the given wasm module. The backend on which code is executed code could be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6725,"byte_end":6807,"line_start":231,"line_end":231,"column_start":3,"column_end":85}},{"value":"/ trusted to provide all storage or not (i.e. the light client cannot be trusted to provide","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6810,"byte_end":6903,"line_start":232,"line_end":232,"column_start":3,"column_end":96}},{"value":"/ for all storage queries since the storage entries it has come from an external node).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6906,"byte_end":6995,"line_start":233,"line_end":233,"column_start":3,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2413},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7141,"byte_end":7145,"line_start":236,"line_end":236,"column_start":3,"column_end":7},"name":"Both","qualname":"::execution::ExecutionManager::Both","value":"ExecutionManager::Both(F)","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" Run with both the wasm and the native variant (if compatible). Call `F` in the case of any discrepancy.\n","sig":null,"attributes":[{"value":"/ Run with both the wasm and the native variant (if compatible). Call `F` in the case of any discrepancy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7031,"byte_end":7138,"line_start":235,"line_end":235,"column_start":3,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2416},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7217,"byte_end":7231,"line_start":238,"line_end":238,"column_start":3,"column_end":17},"name":"NativeElseWasm","qualname":"::execution::ExecutionManager::NativeElseWasm","value":"ExecutionManager::NativeElseWasm","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" First native, then if that fails or is not possible, wasm.\n","sig":null,"attributes":[{"value":"/ First native, then if that fails or is not possible, wasm.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7152,"byte_end":7214,"line_start":237,"line_end":237,"column_start":3,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":2406},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6551,"byte_end":6567,"line_start":227,"line_end":227,"column_start":11,"column_end":27},"name":"ExecutionManager","qualname":"::execution::ExecutionManager","value":"pub enum ExecutionManager<F> {\n\n    /// Execute with the native equivalent if it is compatible with the given wasm module;\n    /// otherwise fall back to the wasm.\n    NativeWhenPossible,\n\n    /// Use the given wasm module. The backend on which code is executed code could be\n    /// trusted to provide all storage or not (i.e. the light client cannot be trusted to provide\n    /// for all storage queries since the storage entries it has come from an external node).\n    AlwaysWasm(BackendTrustLevel),\n\n    /// Run with both the wasm and the native variant (if compatible). Call `F` in the case of any discrepancy.\n    Both(F),\n\n    /// First native, then if that fails or is not possible, wasm.\n    NativeElseWasm,\n}","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2410},{"krate":0,"index":2413},{"krate":0,"index":2416}],"decl_id":null,"docs":" Like `ExecutionStrategy` only it also stores a handler in case of consensus failure.\n","sig":null,"attributes":[{"value":"/ Like `ExecutionStrategy` only it also stores a handler in case of consensus failure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":6434,"byte_end":6522,"line_start":225,"line_end":225,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7765,"byte_end":7776,"line_start":254,"line_end":254,"column_start":10,"column_end":21},"name":"get_manager","qualname":"<ExecutionStrategy>::get_manager","value":"pub fn get_manager<E: fmt::Debug, R: Decode + Encode>(Self)\n-> ExecutionManager<DefaultHandler<R, E>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the corresponding manager for the execution strategy.\n","sig":null,"attributes":[{"value":"/ Gets the corresponding manager for the execution strategy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7693,"byte_end":7755,"line_start":253,"line_end":253,"column_start":3,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1851},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":8592,"byte_end":8608,"line_start":276,"line_end":276,"column_start":9,"column_end":25},"name":"native_else_wasm","qualname":"::execution::native_else_wasm","value":"pub fn native_else_wasm<E, R: Decode>()\n-> ExecutionManager<DefaultHandler<R, E>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate to ExecutionManager::NativeElseWasm, without having to figure out the type.\n","sig":null,"attributes":[{"value":"/ Evaluate to ExecutionManager::NativeElseWasm, without having to figure out the type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":8495,"byte_end":8583,"line_start":275,"line_end":275,"column_start":2,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":1860},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":9257,"byte_end":9269,"line_start":291,"line_end":291,"column_start":13,"column_end":25},"name":"StateMachine","qualname":"::execution::StateMachine","value":"StateMachine {  }","parent":null,"children":[{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876}],"decl_id":null,"docs":" The substrate state machine.\n","sig":null,"attributes":[{"value":"/ The substrate state machine.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":9212,"byte_end":9244,"line_start":290,"line_end":290,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":10261,"byte_end":10264,"line_start":328,"line_end":328,"column_start":10,"column_end":13},"name":"new","qualname":"<StateMachine>::new","value":"pub fn new<impl SpawnNamed + Send + 'static: SpawnNamed + Send +\n           'static>(&'a B, Option<ChangesTrieState>, &'a mut OverlayedChanges,\n                    &'a mut OffchainOverlayedChanges, &'a Exec, &'a str,\n                    &'a [u8], Extensions, &'a RuntimeCode,\n                    impl SpawnNamed + Send + 'static) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new substrate state machine.\n","sig":null,"attributes":[{"value":"/ Creates new substrate state machine.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":10211,"byte_end":10251,"line_start":327,"line_end":327,"column_start":3,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11299,"byte_end":11329,"line_start":363,"line_end":363,"column_start":10,"column_end":40},"name":"with_storage_transaction_cache","qualname":"<StateMachine>::with_storage_transaction_cache","value":"pub fn with_storage_transaction_cache(Self,\n                                      Option<&'a mut StorageTransactionCache<B::Transaction,\n                                                                             H,\n                                                                             N>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Use given `cache` as storage transaction cache.","sig":null,"attributes":[{"value":"/ Use given `cache` as storage transaction cache.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11009,"byte_end":11060,"line_start":358,"line_end":358,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11063,"byte_end":11066,"line_start":359,"line_end":359,"column_start":3,"column_end":6}},{"value":"/ The cache will be used to cache storage transactions that can be build while executing a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11069,"byte_end":11161,"line_start":360,"line_end":360,"column_start":3,"column_end":95}},{"value":"/ function in the runtime. For example, when calculating the storage root a transaction is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11164,"byte_end":11256,"line_start":361,"line_end":361,"column_start":3,"column_end":95}},{"value":"/ build that will be cached.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11259,"byte_end":11289,"line_start":362,"line_end":362,"column_start":3,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11912,"byte_end":11919,"line_start":379,"line_end":379,"column_start":10,"column_end":17},"name":"execute","qualname":"<StateMachine>::execute","value":"pub fn execute(&mut Self, ExecutionStrategy) -> Result<Vec<u8>, Box<Error>>","parent":null,"children":[],"decl_id":null,"docs":" Execute a call using the given state backend, overlayed changes, and call executor.","sig":null,"attributes":[{"value":"/ Execute a call using the given state backend, overlayed changes, and call executor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11489,"byte_end":11576,"line_start":371,"line_end":371,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11579,"byte_end":11582,"line_start":372,"line_end":372,"column_start":3,"column_end":6}},{"value":"/ On an error, no prospective changes are written to the overlay.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11585,"byte_end":11652,"line_start":373,"line_end":373,"column_start":3,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11655,"byte_end":11658,"line_start":374,"line_end":374,"column_start":3,"column_end":6}},{"value":"/ Note: changes to code will be in place if this call is made again. For running partial","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11661,"byte_end":11751,"line_start":375,"line_end":375,"column_start":3,"column_end":93}},{"value":"/ blocks (e.g. a transaction at a time), ensure a different method is used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11754,"byte_end":11831,"line_start":376,"line_end":376,"column_start":3,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11834,"byte_end":11837,"line_start":377,"line_end":377,"column_start":3,"column_end":6}},{"value":"/ Returns the SCALE encoded result of the executed function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":11840,"byte_end":11902,"line_start":378,"line_end":378,"column_start":3,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15765,"byte_end":15804,"line_start":521,"line_end":521,"column_start":10,"column_end":49},"name":"execute_using_consensus_failure_handler","qualname":"<StateMachine>::execute_using_consensus_failure_handler","value":"pub fn execute_using_consensus_failure_handler<Handler, R,\n                                               NC>(&mut Self,\n                                                   ExecutionManager<Handler>,\n                                                   Option<NC>)\n-> Result<NativeOrEncoded<R>, Box<Error>> where R: Decode + Encode +\nPartialEq, NC: FnOnce() -> result::Result<R, String> + UnwindSafe,\nHandler: FnOnce(CallResult<R, Exec::Error>, CallResult<R, Exec::Error>) ->\nCallResult<R, Exec::Error>","parent":null,"children":[],"decl_id":null,"docs":" Execute a call using the given state backend, overlayed changes, and call executor.","sig":null,"attributes":[{"value":"/ Execute a call using the given state backend, overlayed changes, and call executor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15279,"byte_end":15366,"line_start":512,"line_end":512,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15369,"byte_end":15372,"line_start":513,"line_end":513,"column_start":3,"column_end":6}},{"value":"/ On an error, no prospective changes are written to the overlay.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15375,"byte_end":15442,"line_start":514,"line_end":514,"column_start":3,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15445,"byte_end":15448,"line_start":515,"line_end":515,"column_start":3,"column_end":6}},{"value":"/ Note: changes to code will be in place if this call is made again. For running partial","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15451,"byte_end":15541,"line_start":516,"line_end":516,"column_start":3,"column_end":93}},{"value":"/ blocks (e.g. a transaction at a time), ensure a different method is used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15544,"byte_end":15621,"line_start":517,"line_end":517,"column_start":3,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15624,"byte_end":15627,"line_start":518,"line_end":518,"column_start":3,"column_end":6}},{"value":"/ Returns the result of the executed function either in native representation `R` or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15630,"byte_end":15716,"line_start":519,"line_end":519,"column_start":3,"column_end":89}},{"value":"/ in SCALE encoded representation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":15719,"byte_end":15755,"line_start":520,"line_end":520,"column_start":3,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":1909},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":17220,"byte_end":17235,"line_start":568,"line_end":568,"column_start":9,"column_end":24},"name":"prove_execution","qualname":"::execution::prove_execution","value":"pub fn prove_execution<B, H, N, Exec,\n                       Spawn>(B, &mut OverlayedChanges, &Exec, Spawn, &str,\n                              &[u8], &RuntimeCode)\n-> Result<(Vec<u8>, StorageProof), Box<Error>> where B: Backend<H>, H: Hasher,\nH::Out: Ord + 'static + codec::Codec, Exec: CodeExecutor + Clone + 'static,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Prove execution using the given state backend, overlayed changes, and call executor.\n","sig":null,"attributes":[{"value":"/ Prove execution using the given state backend, overlayed changes, and call executor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":17123,"byte_end":17211,"line_start":567,"line_end":567,"column_start":2,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":1916},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18525,"byte_end":18556,"line_start":607,"line_end":607,"column_start":9,"column_end":40},"name":"prove_execution_on_trie_backend","qualname":"::execution::prove_execution_on_trie_backend","value":"pub fn prove_execution_on_trie_backend<S, H, N, Exec,\n                                       Spawn>(&TrieBackend<S, H>,\n                                              &mut OverlayedChanges, &Exec,\n                                              Spawn, &str, &[u8],\n                                              &RuntimeCode)\n-> Result<(Vec<u8>, StorageProof), Box<Error>> where\nS: trie_backend_essence::TrieBackendStorage<H>, H: Hasher, H::Out: Ord +\n'static + codec::Codec, Exec: CodeExecutor + 'static + Clone,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Prove execution using the given trie backend, overlayed changes, and call executor.\n Produces a state-backend-specific \"transaction\" which can be used to apply the changes\n to the backing store, such as the disk.\n Execution proof is the set of all 'touched' storage DBValues from the backend.","sig":null,"attributes":[{"value":"/ Prove execution using the given trie backend, overlayed changes, and call executor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":17958,"byte_end":18045,"line_start":598,"line_end":598,"column_start":2,"column_end":89}},{"value":"/ Produces a state-backend-specific \"transaction\" which can be used to apply the changes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18047,"byte_end":18137,"line_start":599,"line_end":599,"column_start":2,"column_end":92}},{"value":"/ to the backing store, such as the disk.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18139,"byte_end":18182,"line_start":600,"line_end":600,"column_start":2,"column_end":45}},{"value":"/ Execution proof is the set of all 'touched' storage DBValues from the backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18184,"byte_end":18266,"line_start":601,"line_end":601,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18268,"byte_end":18271,"line_start":602,"line_end":602,"column_start":2,"column_end":5}},{"value":"/ On an error, no prospective changes are written to the overlay.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18273,"byte_end":18340,"line_start":603,"line_end":603,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18342,"byte_end":18345,"line_start":604,"line_end":604,"column_start":2,"column_end":5}},{"value":"/ Note: changes to code will be in place if this call is made again. For running partial","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18347,"byte_end":18437,"line_start":605,"line_end":605,"column_start":2,"column_end":92}},{"value":"/ blocks (e.g. a transaction at a time), ensure a different method is used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":18439,"byte_end":18516,"line_start":606,"line_end":606,"column_start":2,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":1922},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":19681,"byte_end":19702,"line_start":648,"line_end":648,"column_start":9,"column_end":30},"name":"execution_proof_check","qualname":"::execution::execution_proof_check","value":"pub fn execution_proof_check<H, N, Exec,\n                             Spawn>(H::Out, StorageProof,\n                                    &mut OverlayedChanges, &Exec, Spawn, &str,\n                                    &[u8], &RuntimeCode)\n-> Result<Vec<u8>, Box<Error>> where H: Hasher, Exec: CodeExecutor + Clone +\n'static, H::Out: Ord + 'static + codec::Codec,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Check execution proof, generated by `prove_execution` call.\n","sig":null,"attributes":[{"value":"/ Check execution proof, generated by `prove_execution` call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":19609,"byte_end":19672,"line_start":647,"line_end":647,"column_start":2,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1927},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":20446,"byte_end":20483,"line_start":678,"line_end":678,"column_start":9,"column_end":46},"name":"execution_proof_check_on_trie_backend","qualname":"::execution::execution_proof_check_on_trie_backend","value":"pub fn execution_proof_check_on_trie_backend<H, N, Exec,\n                                             Spawn>(&TrieBackend<MemoryDB<H>,\n                                                                 H>,\n                                                    &mut OverlayedChanges,\n                                                    &Exec, Spawn, &str, &[u8],\n                                                    &RuntimeCode)\n-> Result<Vec<u8>, Box<Error>> where H: Hasher, H::Out: Ord + 'static +\ncodec::Codec, Exec: CodeExecutor + Clone + 'static,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Check execution proof on proving backend, generated by `prove_execution` call.\n","sig":null,"attributes":[{"value":"/ Check execution proof on proving backend, generated by `prove_execution` call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":20355,"byte_end":20437,"line_start":677,"line_end":677,"column_start":2,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":1932},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":21389,"byte_end":21399,"line_start":715,"line_end":715,"column_start":9,"column_end":19},"name":"prove_read","qualname":"::execution::prove_read","value":"pub fn prove_read<B, H, I>(B, I) -> Result<StorageProof, Box<Error>> where\nB: Backend<H>, H: Hasher, H::Out: Ord + Codec, I: IntoIterator,\nI::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate storage read proof.\n","sig":null,"attributes":[{"value":"/ Generate storage read proof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":21348,"byte_end":21380,"line_start":714,"line_end":714,"column_start":2,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1937},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":21832,"byte_end":21848,"line_start":734,"line_end":734,"column_start":9,"column_end":25},"name":"prove_child_read","qualname":"::execution::prove_child_read","value":"pub fn prove_child_read<B, H, I>(B, &ChildInfo, I)\n-> Result<StorageProof, Box<Error>> where B: Backend<H>, H: Hasher,\nH::Out: Ord + Codec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate child storage read proof.\n","sig":null,"attributes":[{"value":"/ Generate child storage read proof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":21785,"byte_end":21823,"line_start":733,"line_end":733,"column_start":2,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1942},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":22338,"byte_end":22364,"line_start":752,"line_end":752,"column_start":9,"column_end":35},"name":"prove_read_on_trie_backend","qualname":"::execution::prove_read_on_trie_backend","value":"pub fn prove_read_on_trie_backend<S, H, I>(&TrieBackend<S, H>, I)\n-> Result<StorageProof, Box<Error>> where\nS: trie_backend_essence::TrieBackendStorage<H>, H: Hasher, H::Out: Ord +\nCodec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate storage read proof on pre-created trie backend.\n","sig":null,"attributes":[{"value":"/ Generate storage read proof on pre-created trie backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":22269,"byte_end":22329,"line_start":751,"line_end":751,"column_start":2,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1947},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":22932,"byte_end":22964,"line_start":773,"line_end":773,"column_start":9,"column_end":41},"name":"prove_child_read_on_trie_backend","qualname":"::execution::prove_child_read_on_trie_backend","value":"pub fn prove_child_read_on_trie_backend<S, H,\n                                        I>(&TrieBackend<S, H>, &ChildInfo, I)\n-> Result<StorageProof, Box<Error>> where\nS: trie_backend_essence::TrieBackendStorage<H>, H: Hasher, H::Out: Ord +\nCodec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate storage read proof on pre-created trie backend.\n","sig":null,"attributes":[{"value":"/ Generate storage read proof on pre-created trie backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":22863,"byte_end":22923,"line_start":772,"line_end":772,"column_start":2,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1952},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":23577,"byte_end":23593,"line_start":795,"line_end":795,"column_start":9,"column_end":25},"name":"read_proof_check","qualname":"::execution::read_proof_check","value":"pub fn read_proof_check<H, I>(H::Out, StorageProof, I)\n-> Result<HashMap<Vec<u8>, Option<Vec<u8>>>, Box<Error>> where H: Hasher,\nH::Out: Ord + Codec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check storage read proof, generated by `prove_read` call.\n","sig":null,"attributes":[{"value":"/ Check storage read proof, generated by `prove_read` call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":23507,"byte_end":23568,"line_start":794,"line_end":794,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":1955},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":24179,"byte_end":24201,"line_start":816,"line_end":816,"column_start":9,"column_end":31},"name":"read_child_proof_check","qualname":"::execution::read_child_proof_check","value":"pub fn read_child_proof_check<H, I>(H::Out, StorageProof, &ChildInfo, I)\n-> Result<HashMap<Vec<u8>, Option<Vec<u8>>>, Box<Error>> where H: Hasher,\nH::Out: Ord + Codec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check child storage read proof, generated by `prove_child_read` call.\n","sig":null,"attributes":[{"value":"/ Check child storage read proof, generated by `prove_child_read` call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":24097,"byte_end":24170,"line_start":815,"line_end":815,"column_start":2,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":1958},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":24836,"byte_end":24871,"line_start":842,"line_end":842,"column_start":9,"column_end":44},"name":"read_proof_check_on_proving_backend","qualname":"::execution::read_proof_check_on_proving_backend","value":"pub fn read_proof_check_on_proving_backend<H>(&TrieBackend<MemoryDB<H>, H>,\n                                              &[u8])\n-> Result<Option<Vec<u8>>, Box<Error>> where H: Hasher, H::Out: Ord + Codec","parent":null,"children":[],"decl_id":null,"docs":" Check storage read proof on pre-created proving backend.\n","sig":null,"attributes":[{"value":"/ Check storage read proof on pre-created proving backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":24767,"byte_end":24827,"line_start":841,"line_end":841,"column_start":2,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1961},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":25185,"byte_end":25226,"line_start":854,"line_end":854,"column_start":9,"column_end":50},"name":"read_child_proof_check_on_proving_backend","qualname":"::execution::read_child_proof_check_on_proving_backend","value":"pub fn read_child_proof_check_on_proving_backend<H>(&TrieBackend<MemoryDB<H>,\n                                                                 H>,\n                                                    &ChildInfo, &[u8])\n-> Result<Option<Vec<u8>>, Box<Error>> where H: Hasher, H::Out: Ord + Codec","parent":null,"children":[],"decl_id":null,"docs":" Check child storage read proof on pre-created proving backend.\n","sig":null,"attributes":[{"value":"/ Check child storage read proof on pre-created proving backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":25110,"byte_end":25176,"line_start":853,"line_end":853,"column_start":2,"column_end":68}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51259,"byte_end":51262,"line_start":341,"line_end":341,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51462,"byte_end":51477,"line_start":350,"line_end":350,"column_start":71,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52461,"byte_end":52479,"line_start":388,"line_end":388,"column_start":2,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52711,"byte_end":52729,"line_start":396,"line_end":396,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55353,"byte_end":55364,"line_start":72,"line_end":72,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57008,"byte_end":57019,"line_start":136,"line_end":136,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57199,"byte_end":57210,"line_start":145,"line_end":145,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57392,"byte_end":57403,"line_start":155,"line_end":155,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57731,"byte_end":57742,"line_start":166,"line_end":166,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":58117,"byte_end":58128,"line_start":178,"line_end":178,"column_start":62,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":58401,"byte_end":58412,"line_start":190,"line_end":190,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":106644,"byte_end":106654,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":108189,"byte_end":108210,"line_start":136,"line_end":136,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":109758,"byte_end":109783,"line_start":180,"line_end":180,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":114984,"byte_end":115003,"line_start":70,"line_end":70,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":115481,"byte_end":115500,"line_start":91,"line_end":91,"column_start":40,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":117029,"byte_end":117040,"line_start":144,"line_end":144,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":117216,"byte_end":117227,"line_start":154,"line_end":154,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":131676,"byte_end":131700,"line_start":208,"line_end":208,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":135574,"byte_end":135591,"line_start":321,"line_end":321,"column_start":55,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":136112,"byte_end":136136,"line_start":343,"line_end":343,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":136495,"byte_end":136519,"line_start":359,"line_end":359,"column_start":34,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":148756,"byte_end":148765,"line_start":86,"line_end":86,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149116,"byte_end":149125,"line_start":97,"line_end":97,"column_start":64,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149482,"byte_end":149491,"line_start":107,"line_end":107,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149789,"byte_end":149803,"line_start":117,"line_end":117,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149982,"byte_end":149996,"line_start":125,"line_end":125,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150188,"byte_end":150202,"line_start":133,"line_end":133,"column_start":49,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150241,"byte_end":150252,"line_start":135,"line_end":135,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150432,"byte_end":150443,"line_start":144,"line_end":144,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150613,"byte_end":150623,"line_start":152,"line_end":152,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150802,"byte_end":150812,"line_start":160,"line_end":160,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":151012,"byte_end":151023,"line_start":168,"line_end":168,"column_start":49,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":151073,"byte_end":151081,"line_start":170,"line_end":170,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160419,"byte_end":160434,"line_start":54,"line_end":54,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":163337,"byte_end":163352,"line_start":166,"line_end":166,"column_start":66,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":163926,"byte_end":163941,"line_start":179,"line_end":179,"column_start":61,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":164419,"byte_end":164437,"line_start":197,"line_end":197,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":164614,"byte_end":164632,"line_start":203,"line_end":203,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/surface_iterator.rs","byte_start":167397,"byte_end":167412,"line_start":70,"line_end":70,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63749,"byte_end":63750,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66396,"byte_end":66421,"line_start":167,"line_end":167,"column_start":70,"column_end":95},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67102,"byte_end":67107,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67368,"byte_end":67373,"line_start":204,"line_end":204,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175108,"byte_end":175109,"line_start":27,"line_end":27,"column_start":63,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175787,"byte_end":175801,"line_start":46,"line_end":46,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":178319,"byte_end":178324,"line_start":74,"line_end":74,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":178641,"byte_end":178646,"line_start":84,"line_end":84,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":179762,"byte_end":179765,"line_start":122,"line_end":122,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":181800,"byte_end":181803,"line_start":201,"line_end":201,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":811},{"krate":0,"index":816},{"krate":0,"index":820},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":847},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":194478,"byte_end":194495,"line_start":675,"line_end":675,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":194711,"byte_end":194724,"line_start":684,"line_end":684,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":196114,"byte_end":196117,"line_start":740,"line_end":740,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":207642,"byte_end":207659,"line_start":65,"line_end":65,"column_start":44,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211237,"byte_end":211254,"line_start":183,"line_end":183,"column_start":64,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211507,"byte_end":211524,"line_start":191,"line_end":191,"column_start":58,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211850,"byte_end":211867,"line_start":202,"line_end":202,"column_start":56,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":212043,"byte_end":212060,"line_start":209,"line_end":209,"column_start":62,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":212228,"byte_end":212245,"line_start":218,"line_end":218,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215280,"byte_end":215298,"line_start":45,"line_end":45,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216887,"byte_end":216905,"line_start":106,"line_end":106,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217122,"byte_end":217140,"line_start":113,"line_end":113,"column_start":51,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217312,"byte_end":217330,"line_start":121,"line_end":121,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217442,"byte_end":217460,"line_start":125,"line_end":125,"column_start":51,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217704,"byte_end":217722,"line_start":137,"line_end":137,"column_start":24,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":223340,"byte_end":223358,"line_start":337,"line_end":337,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259243,"byte_end":259256,"line_start":99,"line_end":99,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259309,"byte_end":259323,"line_start":105,"line_end":105,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":261207,"byte_end":261225,"line_start":166,"line_end":166,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228031,"byte_end":228041,"line_start":71,"line_end":71,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230484,"byte_end":230498,"line_start":137,"line_end":137,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232022,"byte_end":232045,"line_start":177,"line_end":177,"column_start":46,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232220,"byte_end":232243,"line_start":184,"line_end":184,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232628,"byte_end":232642,"line_start":199,"line_end":199,"column_start":67,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233086,"byte_end":233102,"line_start":216,"line_end":216,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1213},{"krate":0,"index":1215},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1239},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1252},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1272},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":284007,"byte_end":284029,"line_start":41,"line_end":41,"column_start":16,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286491,"byte_end":286505,"line_start":128,"line_end":128,"column_start":57,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":287498,"byte_end":287518,"line_start":163,"line_end":163,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":287960,"byte_end":287974,"line_start":178,"line_end":178,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":288123,"byte_end":288137,"line_start":185,"line_end":185,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297058,"byte_end":297069,"line_start":37,"line_end":37,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297873,"byte_end":297884,"line_start":71,"line_end":71,"column_start":66,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":298059,"byte_end":298070,"line_start":77,"line_end":77,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1479},{"krate":0,"index":1482},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307383,"byte_end":307401,"line_start":56,"line_end":56,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1558},{"krate":0,"index":1561},{"krate":0,"index":1565},{"krate":0,"index":1568},{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":314016,"byte_end":314025,"line_start":284,"line_end":284,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":314267,"byte_end":314276,"line_start":290,"line_end":290,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":314488,"byte_end":314497,"line_start":300,"line_end":300,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315410,"byte_end":315419,"line_start":334,"line_end":334,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316117,"byte_end":316120,"line_start":355,"line_end":355,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316407,"byte_end":316423,"line_start":364,"line_end":364,"column_start":43,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316635,"byte_end":316643,"line_start":372,"line_end":372,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316882,"byte_end":316900,"line_start":381,"line_end":381,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":317167,"byte_end":317185,"line_start":388,"line_end":388,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":317938,"byte_end":317956,"line_start":421,"line_end":421,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322854,"byte_end":322871,"line_start":81,"line_end":81,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1649}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323279,"byte_end":323288,"line_start":91,"line_end":91,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":324179,"byte_end":324196,"line_start":120,"line_end":120,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325968,"byte_end":325969,"line_start":43,"line_end":43,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326417,"byte_end":326438,"line_start":59,"line_end":59,"column_start":57,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326591,"byte_end":326612,"line_start":65,"line_end":65,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1693}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326934,"byte_end":326955,"line_start":74,"line_end":74,"column_start":59,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":330732,"byte_end":330753,"line_start":206,"line_end":206,"column_start":78,"column_end":99},"value":"","parent":null,"children":[{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7284,"byte_end":7301,"line_start":241,"line_end":241,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7671,"byte_end":7688,"line_start":252,"line_end":252,"column_start":7,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":9810,"byte_end":9822,"line_start":310,"line_end":310,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":10019,"byte_end":10031,"line_start":320,"line_end":320,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1901},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":806,"byte_end":813,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":42443,"byte_end":42448,"line_start":38,"line_end":38,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51259,"byte_end":51262,"line_start":341,"line_end":341,"column_start":22,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":51462,"byte_end":51477,"line_start":350,"line_end":350,"column_start":71,"column_end":86},"kind":{"Impl":{"id":1}},"from":{"krate":176,"index":242},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52461,"byte_end":52479,"line_start":388,"line_end":388,"column_start":2,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":116},"to":{"krate":25,"index":1763}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/backend.rs","byte_start":52711,"byte_end":52729,"line_start":396,"line_end":396,"column_start":36,"column_end":54},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":55353,"byte_end":55364,"line_start":72,"line_end":72,"column_start":17,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57008,"byte_end":57019,"line_start":136,"line_end":136,"column_start":27,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":1736}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57199,"byte_end":57210,"line_start":145,"line_end":145,"column_start":29,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57392,"byte_end":57403,"line_start":155,"line_end":155,"column_start":6,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":57731,"byte_end":57742,"line_start":166,"line_end":166,"column_start":35,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":58117,"byte_end":58128,"line_start":178,"line_end":178,"column_start":62,"column_end":73},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/in_memory_backend.rs","byte_start":58401,"byte_end":58412,"line_start":190,"line_end":190,"column_start":6,"column_end":17},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":106644,"byte_end":106654,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":108189,"byte_end":108210,"line_start":136,"line_end":136,"column_start":9,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_cache.rs","byte_start":109758,"byte_end":109783,"line_start":180,"line_end":180,"column_start":9,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":114984,"byte_end":115003,"line_start":70,"line_end":70,"column_start":27,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":115481,"byte_end":115500,"line_start":91,"line_end":91,"column_start":40,"column_end":59},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":117029,"byte_end":117040,"line_start":144,"line_end":144,"column_start":27,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/build_iterator.rs","byte_start":117216,"byte_end":117227,"line_start":154,"line_end":154,"column_start":40,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2045},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":131676,"byte_end":131700,"line_start":208,"line_end":208,"column_start":21,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":135574,"byte_end":135591,"line_start":321,"line_end":321,"column_start":55,"column_end":72},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":136112,"byte_end":136136,"line_start":343,"line_end":343,"column_start":21,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/changes_iterator.rs","byte_start":136495,"byte_end":136519,"line_start":359,"line_end":359,"column_start":34,"column_end":58},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":419},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":148756,"byte_end":148765,"line_start":86,"line_end":86,"column_start":27,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149116,"byte_end":149125,"line_start":97,"line_end":97,"column_start":64,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2130},"to":{"krate":2,"index":1953}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149482,"byte_end":149491,"line_start":107,"line_end":107,"column_start":54,"column_end":63},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2130},"to":{"krate":2,"index":1953}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149789,"byte_end":149803,"line_start":117,"line_end":117,"column_start":27,"column_end":41},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":149982,"byte_end":149996,"line_start":125,"line_end":125,"column_start":38,"column_end":52},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2053},"to":{"krate":19,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150188,"byte_end":150202,"line_start":133,"line_end":133,"column_start":49,"column_end":63},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2053},"to":{"krate":19,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150241,"byte_end":150252,"line_start":135,"line_end":135,"column_start":27,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2074},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150432,"byte_end":150443,"line_start":144,"line_end":144,"column_start":38,"column_end":49},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2074},"to":{"krate":19,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150613,"byte_end":150623,"line_start":152,"line_end":152,"column_start":27,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":150802,"byte_end":150812,"line_start":160,"line_end":160,"column_start":38,"column_end":48},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2095},"to":{"krate":19,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":151012,"byte_end":151023,"line_start":168,"line_end":168,"column_start":49,"column_end":60},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2074},"to":{"krate":19,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/input.rs","byte_start":151073,"byte_end":151081,"line_start":170,"line_end":170,"column_start":38,"column_end":46},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2161},"to":{"krate":19,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":160419,"byte_end":160434,"line_start":54,"line_end":54,"column_start":38,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":163337,"byte_end":163352,"line_start":166,"line_end":166,"column_start":66,"column_end":81},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":542},"to":{"krate":0,"index":670}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":163926,"byte_end":163941,"line_start":179,"line_end":179,"column_start":61,"column_end":76},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":542},"to":{"krate":0,"index":675}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":164419,"byte_end":164437,"line_start":197,"line_end":197,"column_start":42,"column_end":60},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/storage.rs","byte_start":164614,"byte_end":164632,"line_start":203,"line_end":203,"column_start":47,"column_end":65},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":547},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/surface_iterator.rs","byte_start":167397,"byte_end":167412,"line_start":70,"line_end":70,"column_start":44,"column_end":59},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":601},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63309,"byte_end":63313,"line_start":90,"line_end":90,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63316,"byte_end":63320,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63344,"byte_end":63351,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":6568},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63355,"byte_end":63360,"line_start":92,"line_end":92,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":1736},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63364,"byte_end":63368,"line_start":93,"line_end":93,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63376,"byte_end":63383,"line_start":93,"line_end":93,"column_start":14,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1959},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63391,"byte_end":63394,"line_start":93,"line_end":93,"column_start":29,"column_end":32},"kind":"SuperTrait","from":{"krate":37,"index":311},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63397,"byte_end":63401,"line_start":93,"line_end":93,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":37,"index":301},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63405,"byte_end":63414,"line_start":94,"line_end":94,"column_start":2,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1764},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63417,"byte_end":63420,"line_start":94,"line_end":94,"column_start":14,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63435,"byte_end":63439,"line_start":95,"line_end":95,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":6751},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63453,"byte_end":63456,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2103},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63490,"byte_end":63493,"line_start":96,"line_end":96,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2108},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63526,"byte_end":63529,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2113},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63563,"byte_end":63566,"line_start":97,"line_end":97,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2118},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63599,"byte_end":63602,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2124},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63635,"byte_end":63644,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":2134},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63666,"byte_end":63676,"line_start":100,"line_end":100,"column_start":14,"column_end":24},"kind":"SuperTrait","from":{"krate":37,"index":371},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63691,"byte_end":63701,"line_start":100,"line_end":100,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":37,"index":369},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63705,"byte_end":63711,"line_start":101,"line_end":101,"column_start":2,"column_end":8},"kind":"SuperTrait","from":{"krate":19,"index":130},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63714,"byte_end":63720,"line_start":101,"line_end":101,"column_start":11,"column_end":17},"kind":"SuperTrait","from":{"krate":19,"index":118},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":63749,"byte_end":63750,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":662},"to":{"krate":0,"index":660}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65058,"byte_end":65062,"line_start":141,"line_end":141,"column_start":57,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":670}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65065,"byte_end":65069,"line_start":141,"line_end":141,"column_start":64,"column_end":68},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":670}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":65600,"byte_end":65612,"line_start":150,"line_end":150,"column_start":52,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":670},"to":{"krate":0,"index":675}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":66396,"byte_end":66421,"line_start":167,"line_end":167,"column_start":70,"column_end":95},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":681},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67102,"byte_end":67107,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/changes_trie/mod.rs","byte_start":67368,"byte_end":67373,"line_start":204,"line_end":204,"column_start":38,"column_end":43},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":1736}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175014,"byte_end":175019,"line_start":25,"line_end":25,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":722}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175027,"byte_end":175034,"line_start":25,"line_end":25,"column_start":46,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":6568},"to":{"krate":0,"index":722}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175037,"byte_end":175041,"line_start":25,"line_end":25,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":722}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175108,"byte_end":175109,"line_start":27,"line_end":27,"column_start":63,"column_end":64},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":724},"to":{"krate":0,"index":722}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/error.rs","byte_start":175787,"byte_end":175801,"line_start":46,"line_end":46,"column_start":23,"column_end":37},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2208},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":178319,"byte_end":178324,"line_start":74,"line_end":74,"column_start":57,"column_end":62},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2227},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":178641,"byte_end":178646,"line_start":84,"line_end":84,"column_start":57,"column_end":62},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2227},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":179762,"byte_end":179765,"line_start":122,"line_end":122,"column_start":19,"column_end":22},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":181800,"byte_end":181803,"line_start":201,"line_end":201,"column_start":37,"column_end":40},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":779},"to":{"krate":68,"index":54}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":194478,"byte_end":194495,"line_start":675,"line_end":675,"column_start":17,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":862},"to":{"krate":19,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":194711,"byte_end":194724,"line_start":684,"line_end":684,"column_start":10,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/ext.rs","byte_start":196114,"byte_end":196117,"line_start":740,"line_end":740,"column_start":38,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":779},"to":{"krate":68,"index":33}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":207642,"byte_end":207659,"line_start":65,"line_end":65,"column_start":44,"column_end":61},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211237,"byte_end":211254,"line_start":183,"line_end":183,"column_start":64,"column_end":81},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":922},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211507,"byte_end":211524,"line_start":191,"line_end":191,"column_start":58,"column_end":75},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":922},"to":{"krate":2,"index":1764}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":211850,"byte_end":211867,"line_start":202,"line_end":202,"column_start":56,"column_end":73},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":922},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":212043,"byte_end":212060,"line_start":209,"line_end":209,"column_start":62,"column_end":79},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":922},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/testing.rs","byte_start":212228,"byte_end":212245,"line_start":218,"line_end":218,"column_start":49,"column_end":66},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":922},"to":{"krate":68,"index":33}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":215280,"byte_end":215298,"line_start":45,"line_end":45,"column_start":6,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":216887,"byte_end":216905,"line_start":106,"line_end":106,"column_start":20,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":1764}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217122,"byte_end":217140,"line_start":113,"line_end":113,"column_start":51,"column_end":69},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":5185}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217312,"byte_end":217330,"line_start":121,"line_end":121,"column_start":18,"column_end":36},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217442,"byte_end":217460,"line_start":125,"line_end":125,"column_start":51,"column_end":69},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":217704,"byte_end":217722,"line_start":137,"line_end":137,"column_start":24,"column_end":42},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2249},"to":{"krate":68,"index":54}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/basic.rs","byte_start":223340,"byte_end":223358,"line_start":337,"line_end":337,"column_start":43,"column_end":61},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2249},"to":{"krate":68,"index":33}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259243,"byte_end":259256,"line_start":99,"line_end":99,"column_start":18,"column_end":31},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2266},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":259309,"byte_end":259323,"line_start":105,"line_end":105,"column_start":6,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2285},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/changeset.rs","byte_start":261207,"byte_end":261225,"line_start":166,"line_end":166,"column_start":6,"column_end":24},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":228031,"byte_end":228041,"line_start":71,"line_end":71,"column_start":6,"column_end":16},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":230484,"byte_end":230498,"line_start":137,"line_end":137,"column_start":46,"column_end":60},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232022,"byte_end":232045,"line_start":177,"line_end":177,"column_start":46,"column_end":69},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232220,"byte_end":232243,"line_start":184,"line_end":184,"column_start":58,"column_end":81},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":232628,"byte_end":232642,"line_start":199,"line_end":199,"column_start":67,"column_end":81},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1165},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/overlayed_changes/mod.rs","byte_start":233086,"byte_end":233102,"line_start":216,"line_end":216,"column_start":6,"column_end":22},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":284007,"byte_end":284029,"line_start":41,"line_end":41,"column_start":16,"column_end":38},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":286491,"byte_end":286505,"line_start":128,"line_end":128,"column_start":57,"column_end":71},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":287498,"byte_end":287518,"line_start":163,"line_end":163,"column_start":6,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":287960,"byte_end":287974,"line_start":178,"line_end":178,"column_start":6,"column_end":20},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1344},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/proving_backend.rs","byte_start":288123,"byte_end":288137,"line_start":185,"line_end":185,"column_start":31,"column_end":45},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1344},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297058,"byte_end":297069,"line_start":37,"line_end":37,"column_start":43,"column_end":54},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":297873,"byte_end":297884,"line_start":71,"line_end":71,"column_start":66,"column_end":77},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend.rs","byte_start":298059,"byte_end":298070,"line_start":77,"line_end":77,"column_start":58,"column_end":69},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307066,"byte_end":307070,"line_start":44,"line_end":44,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":1527}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307073,"byte_end":307077,"line_start":44,"line_end":44,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1527}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":307383,"byte_end":307401,"line_start":56,"line_end":56,"column_start":43,"column_end":61},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":314016,"byte_end":314025,"line_start":284,"line_end":284,"column_start":6,"column_end":15},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1573},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":314267,"byte_end":314276,"line_start":290,"line_end":290,"column_start":47,"column_end":56},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":314488,"byte_end":314497,"line_start":300,"line_end":300,"column_start":6,"column_end":15},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1573},"to":{"krate":18,"index":40}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315410,"byte_end":315419,"line_start":334,"line_end":334,"column_start":6,"column_end":15},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1573},"to":{"krate":18,"index":48}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315764,"byte_end":315768,"line_start":346,"line_end":346,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":315771,"byte_end":315775,"line_start":346,"line_end":346,"column_start":49,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316117,"byte_end":316120,"line_start":355,"line_end":355,"column_start":43,"column_end":46},"kind":{"Impl":{"id":88}},"from":{"krate":5,"index":4219},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316407,"byte_end":316423,"line_start":364,"line_end":364,"column_start":43,"column_end":59},"kind":{"Impl":{"id":89}},"from":{"krate":176,"index":238},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316635,"byte_end":316643,"line_start":372,"line_end":372,"column_start":43,"column_end":51},"kind":{"Impl":{"id":90}},"from":{"krate":176,"index":240},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":316882,"byte_end":316900,"line_start":381,"line_end":381,"column_start":6,"column_end":24},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1530},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":317167,"byte_end":317185,"line_start":388,"line_end":388,"column_start":6,"column_end":24},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1530},"to":{"krate":18,"index":40}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/trie_backend_essence.rs","byte_start":317938,"byte_end":317956,"line_start":421,"line_end":421,"column_start":6,"column_end":24},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1530},"to":{"krate":18,"index":48}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":322854,"byte_end":322871,"line_start":81,"line_end":81,"column_start":6,"column_end":23},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":323279,"byte_end":323288,"line_start":91,"line_end":91,"column_start":6,"column_end":15},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/stats.rs","byte_start":324179,"byte_end":324196,"line_start":120,"line_end":120,"column_start":6,"column_end":23},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":325968,"byte_end":325969,"line_start":43,"line_end":43,"column_start":55,"column_end":56},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1681},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326417,"byte_end":326438,"line_start":59,"line_end":59,"column_start":57,"column_end":78},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2366},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326591,"byte_end":326612,"line_start":65,"line_end":65,"column_start":41,"column_end":62},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":326934,"byte_end":326955,"line_start":74,"line_end":74,"column_start":59,"column_end":80},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2366},"to":{"krate":68,"index":54}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/read_only.rs","byte_start":330732,"byte_end":330753,"line_start":206,"line_end":206,"column_start":78,"column_end":99},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2366},"to":{"krate":68,"index":33}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7284,"byte_end":7301,"line_start":241,"line_end":241,"column_start":48,"column_end":65},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2377},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":7671,"byte_end":7688,"line_start":252,"line_end":252,"column_start":7,"column_end":24},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":9810,"byte_end":9822,"line_start":310,"line_end":310,"column_start":35,"column_end":47},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1860},"to":{"krate":2,"index":2257}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.8.1/src/lib.rs","byte_start":10019,"byte_end":10031,"line_start":320,"line_end":320,"column_start":26,"column_end":38},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}}]}