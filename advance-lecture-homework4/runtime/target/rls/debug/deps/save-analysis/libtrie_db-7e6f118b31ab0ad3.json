{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","trie_db","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"rustc-hex\"","--cfg","feature=\"std\"","-C","metadata=7e6f118b31ab0ad3","-C","extra-filename=-7e6f118b31ab0ad3","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps","--extern","hash_db=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libhash_db-172c87e1e8122abf.rmeta","--extern","hashbrown=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libhashbrown-f2615ef2d32a6429.rmeta","--extern","log=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/liblog-d3884e8e45296dbc.rmeta","--extern","rustc_hex=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/librustc_hex-32bdb7c61f477bf3.rmeta","--extern","smallvec=/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libsmallvec-ec7d1f646ba11906.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/lecture-demo/runtime/target/rls/debug/deps/libtrie_db-7e6f118b31ab0ad3.rmeta"},"prelude":{"crate_id":{"name":"trie_db","disambiguator":[5847857945225075340,13761773541602902262]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","num":18,"id":{"name":"hash_db","disambiguator":[13517902938452566921,2430099571671870727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","num":19,"id":{"name":"hashbrown","disambiguator":[17462571530905447101,18073003546295628071]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","num":20,"id":{"name":"ahash","disambiguator":[2391589251574575903,4260304121454177733]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","num":21,"id":{"name":"log","disambiguator":[17254312244691266404,17120298729262202934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","num":22,"id":{"name":"cfg_if","disambiguator":[502369263979125416,6128217184247387066]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","num":23,"id":{"name":"rustc_hex","disambiguator":[10677294477045725496,7865879812543119472]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","num":24,"id":{"name":"smallvec","disambiguator":[2602844660267825758,15179553114549196714]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":602,"byte_end":14114,"line_start":14,"line_end":452,"column_start":1,"column_end":69}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23743,"byte_end":23757,"line_start":33,"line_end":33,"column_start":25,"column_end":39},"alias_span":null,"name":"generate_proof","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23782,"byte_end":23787,"line_start":34,"line_end":34,"column_start":24,"column_end":29},"alias_span":null,"name":"VerifyError","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23804,"byte_end":23816,"line_start":34,"line_end":34,"column_start":46,"column_end":58},"alias_span":null,"name":"verify_proof","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":18,"index":40},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1553,"byte_end":1559,"line_start":60,"line_end":60,"column_start":19,"column_end":25},"alias_span":null,"name":"HashDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":48},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1561,"byte_end":1570,"line_start":60,"line_end":60,"column_start":27,"column_end":36},"alias_span":null,"name":"HashDBRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":11},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1572,"byte_end":1578,"line_start":60,"line_end":60,"column_start":38,"column_end":44},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1604,"byte_end":1610,"line_start":61,"line_end":61,"column_start":24,"column_end":30},"alias_span":null,"name":"TrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1612,"byte_end":1626,"line_start":61,"line_end":61,"column_start":32,"column_end":46},"alias_span":null,"name":"TrieDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":491},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1655,"byte_end":1664,"line_start":62,"line_end":62,"column_start":27,"column_end":36},"alias_span":null,"name":"TrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1593},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1666,"byte_end":1680,"line_start":62,"line_end":62,"column_start":38,"column_end":52},"alias_span":null,"name":"ChildReference","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1711,"byte_end":1723,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"alias_span":null,"name":"SecTrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":565},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1750,"byte_end":1759,"line_start":64,"line_end":64,"column_start":26,"column_end":35},"alias_span":null,"name":"SecTrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":648},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1783,"byte_end":1788,"line_start":65,"line_end":65,"column_start":23,"column_end":28},"alias_span":null,"name":"FatDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":669},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1790,"byte_end":1803,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"alias_span":null,"name":"FatDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":702},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1830,"byte_end":1838,"line_start":66,"line_end":66,"column_start":25,"column_end":33},"alias_span":null,"name":"FatDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1652},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1865,"byte_end":1873,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"alias_span":null,"name":"Recorder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1875,"byte_end":1881,"line_start":67,"line_end":67,"column_start":36,"column_end":42},"alias_span":null,"name":"Record","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":929},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1906,"byte_end":1912,"line_start":68,"line_end":68,"column_start":23,"column_end":29},"alias_span":null,"name":"Lookup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1714},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1937,"byte_end":1948,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"alias_span":null,"name":"NibbleSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1950,"byte_end":1959,"line_start":69,"line_end":69,"column_start":37,"column_end":46},"alias_span":null,"name":"NibbleVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1078},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1961,"byte_end":1971,"line_start":69,"line_end":69,"column_start":48,"column_end":58},"alias_span":null,"name":"nibble_ops","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2002,"byte_end":2011,"line_start":70,"line_end":70,"column_start":29,"column_end":38},"alias_span":null,"name":"NodeCodec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2013,"byte_end":2020,"line_start":70,"line_end":70,"column_start":40,"column_end":47},"alias_span":null,"name":"Partial","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":782},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2051,"byte_end":2061,"line_start":71,"line_end":71,"column_start":29,"column_end":39},"alias_span":null,"name":"trie_visit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":788},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2063,"byte_end":2081,"line_start":71,"line_end":71,"column_start":41,"column_end":59},"alias_span":null,"name":"ProcessEncodedNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2085,"byte_end":2096,"line_start":72,"line_end":72,"column_start":3,"column_end":14},"alias_span":null,"name":"TrieBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":813},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2098,"byte_end":2106,"line_start":72,"line_end":72,"column_start":16,"column_end":24},"alias_span":null,"name":"TrieRoot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2108,"byte_end":2124,"line_start":72,"line_end":72,"column_start":26,"column_end":42},"alias_span":null,"name":"TrieRootUnhashed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2152,"byte_end":2170,"line_start":73,"line_end":73,"column_start":26,"column_end":44},"alias_span":null,"name":"TrieDBNodeIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1201},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2200,"byte_end":2214,"line_start":74,"line_end":74,"column_start":29,"column_end":43},"alias_span":null,"name":"decode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2216,"byte_end":2230,"line_start":74,"line_end":74,"column_start":45,"column_end":59},"alias_span":null,"name":"encode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":832},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2285,"byte_end":2298,"line_start":77,"line_end":77,"column_start":28,"column_end":41},"alias_span":null,"name":"TrieRootPrint","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":602,"byte_end":14114,"line_start":14,"line_end":452,"column_start":1,"column_end":69},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":67},{"krate":0,"index":237},{"krate":0,"index":333},{"krate":0,"index":549},{"krate":0,"index":586},{"krate":0,"index":620},{"krate":0,"index":631},{"krate":0,"index":689},{"krate":0,"index":724},{"krate":0,"index":847},{"krate":0,"index":912},{"krate":0,"index":944},{"krate":0,"index":1104},{"krate":0,"index":1135},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1723},{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1748},{"krate":0,"index":1744},{"krate":0,"index":1245},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1256},{"krate":0,"index":1260},{"krate":0,"index":1265},{"krate":0,"index":1271},{"krate":0,"index":1278},{"krate":0,"index":1286},{"krate":0,"index":1302},{"krate":0,"index":1313},{"krate":0,"index":1767},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1776},{"krate":0,"index":1774},{"krate":0,"index":1316},{"krate":0,"index":1781},{"krate":0,"index":1788},{"krate":0,"index":1785},{"krate":0,"index":1318},{"krate":0,"index":1331},{"krate":0,"index":1343},{"krate":0,"index":1351},{"krate":0,"index":1356},{"krate":0,"index":1375},{"krate":0,"index":1377}],"decl_id":null,"docs":" Trie interface and implementation.\n","sig":null,"attributes":[{"value":"/ Trie interface and implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":646,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"node","qualname":"::node","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":1379},{"krate":0,"index":1403},{"krate":0,"index":1400},{"krate":0,"index":1398},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":38},{"krate":0,"index":1406},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1432},{"krate":0,"index":1429},{"krate":0,"index":1448},{"krate":0,"index":1464},{"krate":0,"index":1462},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":40},{"krate":0,"index":1466},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1471},{"krate":0,"index":1469},{"krate":0,"index":44},{"krate":0,"index":1480},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1500},{"krate":0,"index":1498},{"krate":0,"index":50},{"krate":0,"index":1511},{"krate":0,"index":1526},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":60}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15043,"byte_end":15050,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"name":"NodeKey","qualname":"::node::NodeKey","value":"(usize, nibble::BackingByteVec)","parent":null,"children":[],"decl_id":null,"docs":" Partial node key type: offset and owned value of a nibbleslice.\n Offset is applied on first byte of array (bytes are right aligned).\n","sig":null,"attributes":[{"value":"/ Partial node key type: offset and owned value of a nibbleslice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":14894,"byte_end":14961,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/ Offset is applied on first byte of array (bytes are right aligned).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":14962,"byte_end":15033,"line_start":23,"line_end":23,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1381},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15236,"byte_end":15240,"line_start":29,"line_end":29,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandle::Hash","value":"NodeHandle::Hash(&'a [u8])","parent":{"krate":0,"index":1379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1384},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15253,"byte_end":15259,"line_start":30,"line_end":30,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandle::Inline","value":"NodeHandle::Inline(&'a [u8])","parent":{"krate":0,"index":1379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1379},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15218,"byte_end":15228,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"NodeHandle","qualname":"::node::NodeHandle","value":"pub enum NodeHandle<'a> { Hash(&'a [u8]), Inline(&'a [u8]), }","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1384}],"decl_id":null,"docs":" A reference to a trie node which may be stored within another trie node.\n","sig":null,"attributes":[{"value":"/ A reference to a trie node which may be stored within another trie node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15087,"byte_end":15163,"line_start":26,"line_end":26,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15379,"byte_end":15390,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"decode_hash","qualname":"::node::decode_hash","value":"pub fn decode_hash<H: Hasher>(&[u8]) -> Option<H::Out>","parent":null,"children":[],"decl_id":null,"docs":" Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.\n","sig":null,"attributes":[{"value":"/ Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15274,"byte_end":15371,"line_start":33,"line_end":33,"column_start":1,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1408},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15802,"byte_end":15807,"line_start":48,"line_end":48,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::Node::Empty","value":"Node::Empty","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15732,"byte_end":15800,"line_start":47,"line_end":47,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15875,"byte_end":15879,"line_start":50,"line_end":50,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::Node::Leaf","value":"Node::Leaf(NibbleSlice, &'a [u8])","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Leaf node; has key slice and value. Value may not be empty.\n","sig":null,"attributes":[{"value":"/ Leaf node; has key slice and value. Value may not be empty.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15810,"byte_end":15873,"line_start":49,"line_end":49,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1414},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15981,"byte_end":15990,"line_start":52,"line_end":52,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::Node::Extension","value":"Node::Extension(NibbleSlice, NodeHandle)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Extension node; has key slice and node data. Data may not be null.\n","sig":null,"attributes":[{"value":"/ Extension node; has key slice and node data. Data may not be null.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15909,"byte_end":15979,"line_start":51,"line_end":51,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1418},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16132,"byte_end":16138,"line_start":55,"line_end":55,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::Node::Branch","value":"Node::Branch([Option<NodeHandle>; ], Option<&'a [u8]>)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16026,"byte_end":16088,"line_start":53,"line_end":53,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16090,"byte_end":16130,"line_start":54,"line_end":54,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1423},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16292,"byte_end":16305,"line_start":57,"line_end":57,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::Node::NibbledBranch","value":"Node::NibbledBranch(NibbleSlice, [Option<NodeHandle>; ], Option<&'a [u8]>)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16212,"byte_end":16290,"line_start":56,"line_end":56,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":1406},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15720,"byte_end":15724,"line_start":46,"line_end":46,"column_start":10,"column_end":14},"name":"Node","qualname":"::node::Node","value":"pub enum Node<'a> {\n\n    /// Null trie node; could be an empty root or an empty branch entry.\n    Empty,\n\n    /// Leaf node; has key slice and value. Value may not be empty.\n    Leaf(NibbleSlice, &'a [u8]),\n\n    /// Extension node; has key slice and node data. Data may not be null.\n    Extension(NibbleSlice, NodeHandle),\n\n    /// Branch node; has slice of child nodes (each possibly null)\n    /// and an optional immediate node data.\n    Branch([Option<NodeHandle>; ], Option<&'a [u8]>),\n\n    /// Branch node with support for a nibble (when extension nodes are not used).\n    NibbledBranch(NibbleSlice, [Option<NodeHandle>; ], Option<&'a [u8]>),\n}","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1414},{"krate":0,"index":1418},{"krate":0,"index":1423}],"decl_id":null,"docs":" Type of node in the trie and essential information thereof.\n","sig":null,"attributes":[{"value":"/ Type of node in the trie and essential information thereof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":15571,"byte_end":15634,"line_start":43,"line_end":43,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1449},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16643,"byte_end":16647,"line_start":64,"line_end":64,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandlePlan::Hash","value":"NodeHandlePlan::Hash(Range<usize>)","parent":{"krate":0,"index":1448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1452},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16664,"byte_end":16670,"line_start":65,"line_end":65,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandlePlan::Inline","value":"NodeHandlePlan::Inline(Range<usize>)","parent":{"krate":0,"index":1448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1448},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16625,"byte_end":16639,"line_start":63,"line_end":63,"column_start":10,"column_end":24},"name":"NodeHandlePlan","qualname":"::node::NodeHandlePlan","value":"pub enum NodeHandlePlan { Hash(Range<usize>), Inline(Range<usize>), }","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1452}],"decl_id":null,"docs":" A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie\n node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.\n","sig":null,"attributes":[{"value":"/ A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16398,"byte_end":16492,"line_start":60,"line_end":60,"column_start":1,"column_end":95}},{"value":"/ node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16493,"byte_end":16576,"line_start":61,"line_end":61,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16969,"byte_end":16974,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"name":"build","qualname":"<NodeHandlePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> NodeHandle","parent":null,"children":[],"decl_id":null,"docs":" Build a node handle by decoding a byte slice according to the node handle plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node handle by decoding a byte slice according to the node handle plan. It is the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16712,"byte_end":16805,"line_start":69,"line_end":69,"column_start":2,"column_end":95}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16807,"byte_end":16897,"line_start":70,"line_end":70,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16899,"byte_end":16960,"line_start":71,"line_end":71,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17474,"byte_end":17489,"line_start":84,"line_end":84,"column_start":12,"column_end":27},"name":"NibbleSlicePlan","qualname":"::node::NibbleSlicePlan","value":"NibbleSlicePlan {  }","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468}],"decl_id":null,"docs":" A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The\n `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.\n","sig":null,"attributes":[{"value":"/ A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17206,"byte_end":17295,"line_start":80,"line_end":80,"column_start":1,"column_end":90}},{"value":"/ `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17296,"byte_end":17386,"line_start":81,"line_end":81,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17607,"byte_end":17610,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlicePlan>::new","value":"pub fn new(Range<usize>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a nibble slice decode plan.\n","sig":null,"attributes":[{"value":"/ Construct a nibble slice decode plan.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17557,"byte_end":17598,"line_start":90,"line_end":90,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17758,"byte_end":17761,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlicePlan>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the nibble length of the slice.\n","sig":null,"attributes":[{"value":"/ Returns the nibble length of the slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17706,"byte_end":17749,"line_start":98,"line_end":98,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18113,"byte_end":18118,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"name":"build","qualname":"<NibbleSlicePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Build a nibble slice by decoding a byte slice according to the plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a nibble slice by decoding a byte slice according to the plan. It is the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17867,"byte_end":17949,"line_start":103,"line_end":103,"column_start":2,"column_end":84}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17951,"byte_end":18041,"line_start":104,"line_end":104,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18043,"byte_end":18104,"line_start":105,"line_end":105,"column_start":2,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1481},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18822,"byte_end":18827,"line_start":121,"line_end":121,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::NodePlan::Empty","value":"NodePlan::Empty","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18752,"byte_end":18820,"line_start":120,"line_end":120,"column_start":2,"column_end":70}}]},{"kind":"StructVariant","id":{"krate":0,"index":1483},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18880,"byte_end":18884,"line_start":123,"line_end":123,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::NodePlan::Leaf","value":"NodePlan::Leaf { partial, value }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Leaf node; has a partial key plan and value.\n","sig":null,"attributes":[{"value":"/ Leaf node; has a partial key plan and value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18830,"byte_end":18878,"line_start":122,"line_end":122,"column_start":2,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":1486},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19003,"byte_end":19012,"line_start":128,"line_end":128,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::NodePlan::Extension","value":"NodePlan::Extension { partial, child }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Extension node; has a partial key plan and child data.\n","sig":null,"attributes":[{"value":"/ Extension node; has a partial key plan and child data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18943,"byte_end":19001,"line_start":127,"line_end":127,"column_start":2,"column_end":60}}]},{"kind":"StructVariant","id":{"krate":0,"index":1489},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19179,"byte_end":19185,"line_start":134,"line_end":134,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::NodePlan::Branch","value":"NodePlan::Branch { value, children }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19073,"byte_end":19135,"line_start":132,"line_end":132,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19137,"byte_end":19177,"line_start":133,"line_end":133,"column_start":2,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":1493},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19369,"byte_end":19382,"line_start":139,"line_end":139,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::NodePlan::NibbledBranch","value":"NodePlan::NibbledBranch { partial, value, children }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19289,"byte_end":19367,"line_start":138,"line_end":138,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":1480},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18740,"byte_end":18748,"line_start":119,"line_end":119,"column_start":10,"column_end":18},"name":"NodePlan","qualname":"::node::NodePlan","value":"pub enum NodePlan {\n\n    /// Null trie node; could be an empty root or an empty branch entry.\n    Empty,\n\n    /// Leaf node; has a partial key plan and value.\n    Leaf {\n        partial: NibbleSlicePlan,\n        value: Range<usize>,\n    },\n\n    /// Extension node; has a partial key plan and child data.\n    Extension {\n        partial: NibbleSlicePlan,\n        child: NodeHandlePlan,\n    },\n\n    /// Branch node; has slice of child nodes (each possibly null)\n    /// and an optional immediate node data.\n    Branch {\n        value: Option<Range<usize>>,\n        children: [Option<NodeHandlePlan>; ],\n    },\n\n    /// Branch node with support for a nibble (when extension nodes are not used).\n    NibbledBranch {\n        partial: NibbleSlicePlan,\n        value: Option<Range<usize>>,\n        children: [Option<NodeHandlePlan>; ],\n    },\n}","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1493}],"decl_id":null,"docs":" A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created\n by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows\n from a byte slice and this struct does not.","sig":null,"attributes":[{"value":"/ A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18246,"byte_end":18342,"line_start":111,"line_end":111,"column_start":1,"column_end":97}},{"value":"/ by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18343,"byte_end":18442,"line_start":112,"line_end":112,"column_start":1,"column_end":100}},{"value":"/ from a byte slice and this struct does not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18443,"byte_end":18490,"line_start":113,"line_end":113,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18491,"byte_end":18494,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ The enum values mirror those of `Node` except that instead of byte slices, this struct stores","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18495,"byte_end":18592,"line_start":115,"line_end":115,"column_start":1,"column_end":98}},{"value":"/ ranges that can be used to index into a large byte slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":18593,"byte_end":18654,"line_start":116,"line_end":116,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19776,"byte_end":19781,"line_start":150,"line_end":150,"column_start":9,"column_end":14},"name":"build","qualname":"<NodePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Build a node by decoding a byte slice according to the node plan. It is the responsibility\n of the caller to ensure that the node plan was created for the argument data, otherwise the\n call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node by decoding a byte slice according to the node plan. It is the responsibility","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19533,"byte_end":19627,"line_start":147,"line_end":147,"column_start":2,"column_end":96}},{"value":"/ of the caller to ensure that the node plan was created for the argument data, otherwise the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19629,"byte_end":19724,"line_start":148,"line_end":148,"column_start":2,"column_end":97}},{"value":"/ call may decode incorrectly or panic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19726,"byte_end":19767,"line_start":149,"line_end":149,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1511},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21066,"byte_end":21075,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"OwnedNode","qualname":"::node::OwnedNode","value":"OwnedNode {  }","parent":null,"children":[{"krate":0,"index":1513},{"krate":0,"index":1514}],"decl_id":null,"docs":" An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from\n the `OwnedNode`. This is useful for trie iterators.\n","sig":null,"attributes":[{"value":"/ An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":20831,"byte_end":20929,"line_start":177,"line_end":177,"column_start":1,"column_end":99}},{"value":"/ the `OwnedNode`. This is useful for trie iterators.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":20930,"byte_end":20985,"line_start":178,"line_end":178,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21258,"byte_end":21261,"line_start":188,"line_end":188,"column_start":9,"column_end":12},"name":"new","qualname":"<OwnedNode<D>>::new","value":"pub fn new<C: NodeCodec>(D) -> Result<Self, C::Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct an `OwnedNode` by decoding an owned data source according to some codec.\n","sig":null,"attributes":[{"value":"/ Construct an `OwnedNode` by decoding an owned data source according to some codec.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21163,"byte_end":21249,"line_start":187,"line_end":187,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21447,"byte_end":21451,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"name":"data","qualname":"<OwnedNode<D>>::data","value":"pub fn data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the backing data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the backing data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21394,"byte_end":21438,"line_start":193,"line_end":193,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21553,"byte_end":21562,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"name":"node_plan","qualname":"<OwnedNode<D>>::node_plan","value":"pub fn node_plan(&Self) -> &NodePlan","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the node decode plan.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the node decode plan.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21496,"byte_end":21544,"line_start":198,"line_end":198,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21670,"byte_end":21674,"line_start":204,"line_end":204,"column_start":9,"column_end":13},"name":"node","qualname":"<OwnedNode<D>>::node","value":"pub fn node(&Self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Node` by borrowing data from this struct.\n","sig":null,"attributes":[{"value":"/ Construct a `Node` by borrowing data from this struct.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21603,"byte_end":21661,"line_start":203,"line_end":203,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":154}],"decl_id":null,"docs":" Generation and verification of compact proofs for Merkle-Patricia tries.","sig":null,"attributes":[{"value":"/ Generation and verification of compact proofs for Merkle-Patricia tries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22339,"byte_end":22415,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22416,"byte_end":22419,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Using this module, it is possible to generate a logarithmic-space proof of inclusion or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22420,"byte_end":22511,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ non-inclusion of certain key-value pairs in a trie with a known root. The proof contains","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22512,"byte_end":22604,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ information so that the verifier can reconstruct the subset of nodes in the trie required to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22605,"byte_end":22701,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ lookup the keys. The trie nodes are not included in their entirety as data which the verifier","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22702,"byte_end":22799,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ can compute for themself is omitted. In particular, the values of included keys and and hashes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22800,"byte_end":22898,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ of other trie nodes in the proof are omitted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22899,"byte_end":22948,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22949,"byte_end":22952,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The proof is a sequence of the subset of nodes in the trie traversed while performing lookups","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":22953,"byte_end":23050,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ on all keys. The trie nodes are listed in pre-order traversal order with some values and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23051,"byte_end":23143,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ internal hashes omitted. In particular, values on leaf nodes, child references on extension","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23144,"byte_end":23239,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ nodes, values on branch nodes corresponding to a key in the statement, and child references on","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23240,"byte_end":23338,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ branch nodes corresponding to another node in the proof are all omitted. The proof is verified","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23339,"byte_end":23437,"line_start":28,"line_end":28,"column_start":1,"column_end":99}},{"value":"/ by iteratively reconstructing the trie nodes using the values proving as part of the statement","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23438,"byte_end":23536,"line_start":29,"line_end":29,"column_start":1,"column_end":99}},{"value":"/ and the hashes of other reconstructed nodes. Since the nodes in the proof are arranged in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23537,"byte_end":23630,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/ pre-order traversal order, the construction can be done efficiently using a stack.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/mod.rs","byte_start":23631,"byte_end":23717,"line_start":31,"line_end":31,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/generate.rs","byte_start":31417,"byte_end":31431,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"generate_proof","qualname":"::proof::generate::generate_proof","value":"pub fn generate_proof<'a, T, L, I, K>(&T, I)\n-> TrieResult<Vec<Vec<u8>>, TrieHash<L>, CError<L>> where T: Trie<L>,\nL: TrieLayout, I: IntoIterator<Item = &'a K>, K: 'a + AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate a compact proof for key-value pairs in a trie given a set of keys.","sig":null,"attributes":[{"value":"/ Generate a compact proof for key-value pairs in a trie given a set of keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/generate.rs","byte_start":31274,"byte_end":31353,"line_start":218,"line_end":218,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/generate.rs","byte_start":31354,"byte_end":31357,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Assumes inline nodes have only inline children.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/generate.rs","byte_start":31358,"byte_end":31409,"line_start":220,"line_end":220,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1533},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41465,"byte_end":41477,"line_start":33,"line_end":33,"column_start":2,"column_end":14},"name":"DuplicateKey","qualname":"::proof::verify::Error::DuplicateKey","value":"Error::DuplicateKey(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The statement being verified contains multiple key-value pairs with the same key. The\n parameter is the duplicated key.\n","sig":null,"attributes":[{"value":"/ The statement being verified contains multiple key-value pairs with the same key. The","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41336,"byte_end":41425,"line_start":31,"line_end":31,"column_start":2,"column_end":91}},{"value":"/ parameter is the duplicated key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41427,"byte_end":41463,"line_start":32,"line_end":32,"column_start":2,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1536},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41543,"byte_end":41557,"line_start":35,"line_end":35,"column_start":2,"column_end":16},"name":"ExtraneousNode","qualname":"::proof::verify::Error::ExtraneousNode","value":"Error::ExtraneousNode","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous node.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41489,"byte_end":41541,"line_start":34,"line_end":34,"column_start":2,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1538},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41666,"byte_end":41681,"line_start":38,"line_end":38,"column_start":2,"column_end":17},"name":"ExtraneousValue","qualname":"::proof::verify::Error::ExtraneousValue","value":"Error::ExtraneousValue(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous value which should have been omitted from the\n proof.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous value which should have been omitted from the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41560,"byte_end":41652,"line_start":36,"line_end":36,"column_start":2,"column_end":94}},{"value":"/ proof.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41654,"byte_end":41664,"line_start":37,"line_end":37,"column_start":2,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41786,"byte_end":41809,"line_start":40,"line_end":40,"column_start":2,"column_end":25},"name":"ExtraneousHashReference","qualname":"::proof::verify::Error::ExtraneousHashReference","value":"Error::ExtraneousHashReference(HO)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous hash reference the should have been omitted.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous hash reference the should have been omitted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41693,"byte_end":41784,"line_start":39,"line_end":39,"column_start":2,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1544},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41897,"byte_end":41918,"line_start":42,"line_end":42,"column_start":2,"column_end":23},"name":"InvalidChildReference","qualname":"::proof::verify::Error::InvalidChildReference","value":"Error::InvalidChildReference(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains an invalid child reference that exceeds the hash length.\n","sig":null,"attributes":[{"value":"/ The proof contains an invalid child reference that exceeds the hash length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41816,"byte_end":41895,"line_start":41,"line_end":41,"column_start":2,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1547},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42005,"byte_end":42018,"line_start":44,"line_end":44,"column_start":2,"column_end":15},"name":"ValueMismatch","qualname":"::proof::verify::Error::ValueMismatch","value":"Error::ValueMismatch(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof indicates that an expected value was not found in the trie.\n","sig":null,"attributes":[{"value":"/ The proof indicates that an expected value was not found in the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41930,"byte_end":42003,"line_start":43,"line_end":43,"column_start":2,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1550},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42087,"byte_end":42102,"line_start":46,"line_end":46,"column_start":2,"column_end":17},"name":"IncompleteProof","qualname":"::proof::verify::Error::IncompleteProof","value":"Error::IncompleteProof","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof is missing trie nodes required to verify.\n","sig":null,"attributes":[{"value":"/ The proof is missing trie nodes required to verify.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42030,"byte_end":42085,"line_start":45,"line_end":45,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1552},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42162,"byte_end":42174,"line_start":48,"line_end":48,"column_start":2,"column_end":14},"name":"RootMismatch","qualname":"::proof::verify::Error::RootMismatch","value":"Error::RootMismatch(HO)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The root hash computed from the proof is incorrect.\n","sig":null,"attributes":[{"value":"/ The root hash computed from the proof is incorrect.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42105,"byte_end":42160,"line_start":47,"line_end":47,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42231,"byte_end":42242,"line_start":50,"line_end":50,"column_start":2,"column_end":13},"name":"DecodeError","qualname":"::proof::verify::Error::DecodeError","value":"Error::DecodeError(CE)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" One of the proof nodes could not be decoded.\n","sig":null,"attributes":[{"value":"/ One of the proof nodes could not be decoded.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42181,"byte_end":42229,"line_start":49,"line_end":49,"column_start":2,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1530},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41319,"byte_end":41324,"line_start":30,"line_end":30,"column_start":10,"column_end":15},"name":"Error","qualname":"::proof::verify::Error","value":"pub enum Error<HO, CE> {\n\n    /// The statement being verified contains multiple key-value pairs with the same key. The\n    /// parameter is the duplicated key.\n    DuplicateKey(Vec<u8>),\n\n    /// The proof contains at least one extraneous node.\n    ExtraneousNode,\n\n    /// The proof contains at least one extraneous value which should have been omitted from the\n    /// proof.\n    ExtraneousValue(Vec<u8>),\n\n    /// The proof contains at least one extraneous hash reference the should have been omitted.\n    ExtraneousHashReference(HO),\n\n    /// The proof contains an invalid child reference that exceeds the hash length.\n    InvalidChildReference(Vec<u8>),\n\n    /// The proof indicates that an expected value was not found in the trie.\n    ValueMismatch(Vec<u8>),\n\n    /// The proof is missing trie nodes required to verify.\n    IncompleteProof,\n\n    /// The root hash computed from the proof is incorrect.\n    RootMismatch(HO),\n\n    /// One of the proof nodes could not be decoded.\n    DecodeError(CE),\n}","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1544},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1555}],"decl_id":null,"docs":" Errors that may occur during proof verification. Most of the errors types simply indicate that\n the proof is invalid with respect to the statement being verified, and the exact error type can\n be used for debugging.\n","sig":null,"attributes":[{"value":"/ Errors that may occur during proof verification. Most of the errors types simply indicate that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41015,"byte_end":41113,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ the proof is invalid with respect to the statement being verified, and the exact error type can","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41114,"byte_end":41213,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/ be used for debugging.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":41214,"byte_end":41240,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":52531,"byte_end":52543,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::proof::verify::verify_proof","value":"pub fn verify_proof<'a, L, I, K, V>(&<L::Hash as Hasher>::Out, &[Vec<u8>], I)\n-> Result<(), Error<TrieHash<L>, CError<L>>> where L: TrieLayout,\nI: IntoIterator<Item = &'a (K, Option<V>)>, K: 'a + AsRef<[u8]>, V: 'a +\nAsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Verify a compact proof for key-value pairs in a trie given a root hash.\n","sig":null,"attributes":[{"value":"/ Verify a compact proof for key-value pairs in a trie given a root hash.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":52448,"byte_end":52523,"line_start":390,"line_end":390,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":237},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedb","qualname":"::triedb","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":281},{"krate":0,"index":292},{"krate":0,"index":300},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":324},{"krate":0,"index":328}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":266},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57156,"byte_end":57162,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"TrieDB","qualname":"::triedb::TrieDB","value":"TrieDB {  }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`\n implementation to generate keys and a `NodeCodec` implementation to encode/decode\n the nodes.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56218,"byte_end":56299,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ implementation to generate keys and a `NodeCodec` implementation to encode/decode","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56300,"byte_end":56385,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ the nodes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56386,"byte_end":56400,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56401,"byte_end":56404,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56405,"byte_end":56496,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Use `get` and `contains` to query values associated with keys in the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56497,"byte_end":56575,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56576,"byte_end":56579,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56580,"byte_end":56593,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56594,"byte_end":56607,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56608,"byte_end":56632,"line_start":37,"line_end":37,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, RefTrieDB, Trie, TrieMut};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56633,"byte_end":56698,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56699,"byte_end":56724,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56725,"byte_end":56761,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56762,"byte_end":56783,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56784,"byte_end":56787,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, _>::default();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56788,"byte_end":56859,"line_start":43,"line_end":43,"column_start":1,"column_end":72}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56860,"byte_end":56898,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ RefTrieDBMut::new(&mut memdb, &mut root).insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56899,"byte_end":56976,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ let t = RefTrieDB::new(&memdb, &root).unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":56977,"byte_end":57028,"line_start":46,"line_end":46,"column_start":1,"column_end":52}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57029,"byte_end":57070,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57071,"byte_end":57136,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57137,"byte_end":57144,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57529,"byte_end":57532,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDB>::new","value":"pub fn new(&'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`\n Returns an error if `root` does not exist\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57410,"byte_end":57473,"line_start":64,"line_end":64,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57475,"byte_end":57520,"line_start":65,"line_end":65,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57839,"byte_end":57841,"line_start":78,"line_end":78,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDB>::db","value":"pub fn db(&'db Self) -> &'db HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57801,"byte_end":57830,"line_start":77,"line_end":77,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63280,"byte_end":63294,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"TrieDBIterator","qualname":"::triedb::TrieDBIterator","value":"TrieDBIterator {  }","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Iterator for going through all values in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all values in the trie in pre-order traversal order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63185,"byte_end":63268,"line_start":264,"line_end":264,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63438,"byte_end":63441,"line_start":271,"line_end":271,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBIterator>::new","value":"pub fn new(&'a TrieDB<, L>) -> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63403,"byte_end":63429,"line_start":270,"line_end":270,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63666,"byte_end":63678,"line_start":277,"line_end":277,"column_start":9,"column_end":21},"name":"new_prefixed","qualname":"<TrieDBIterator>::new_prefixed","value":"pub fn new_prefixed(&'a TrieDB<, L>, &[u8])\n-> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63600,"byte_end":63657,"line_start":276,"line_end":276,"column_start":2,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedbmut","qualname":"::triedbmut","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":2025},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":2041},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1590},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":441},{"krate":0,"index":451},{"krate":0,"index":459},{"krate":0,"index":463},{"krate":0,"index":1593},{"krate":0,"index":1607},{"krate":0,"index":1605},{"krate":0,"index":1602},{"krate":0,"index":472},{"krate":0,"index":477},{"krate":0,"index":481},{"krate":0,"index":486},{"krate":0,"index":491},{"krate":0,"index":500},{"krate":0,"index":533},{"krate":0,"index":543},{"krate":0,"index":547}],"decl_id":null,"docs":" In-memory trie representation.\n","sig":null,"attributes":[{"value":"/ In-memory trie representation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":65766,"byte_end":65800,"line_start":15,"line_end":15,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1595},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":74545,"byte_end":74549,"line_start":310,"line_end":310,"column_start":2,"column_end":6},"name":"Hash","qualname":"::triedbmut::ChildReference::Hash","value":"ChildReference::Hash(HO)","parent":{"krate":0,"index":1593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1598},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":74556,"byte_end":74562,"line_start":311,"line_end":311,"column_start":2,"column_end":8},"name":"Inline","qualname":"::triedbmut::ChildReference::Inline","value":"ChildReference::Inline(HO, usize)","parent":{"krate":0,"index":1593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1593},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":74469,"byte_end":74483,"line_start":309,"line_end":309,"column_start":10,"column_end":24},"name":"ChildReference","qualname":"::triedbmut::ChildReference","value":"pub enum ChildReference<HO> { Hash(HO), Inline(HO, usize), }","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1598}],"decl_id":null,"docs":" Used to build a collection of child nodes from a collection of `NodeHandle`s\n","sig":null,"attributes":[{"value":"/ Used to build a collection of child nodes from a collection of `NodeHandle`s","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":74312,"byte_end":74392,"line_start":306,"line_end":306,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77541,"byte_end":77550,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"TrieDBMut","qualname":"::triedbmut::TrieDBMut","value":"TrieDBMut {  }","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76515,"byte_end":76585,"line_start":387,"line_end":387,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76586,"byte_end":76589,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ Use it as a `TrieMut` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76590,"byte_end":76684,"line_start":389,"line_end":389,"column_start":1,"column_end":95}},{"value":"/ Note that changes are not committed to the database until `commit` is called.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76685,"byte_end":76766,"line_start":390,"line_end":390,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76767,"byte_end":76770,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Querying the root or dropping the trie will commit automatically.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76771,"byte_end":76840,"line_start":392,"line_end":392,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76841,"byte_end":76844,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76845,"byte_end":76848,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76849,"byte_end":76862,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/ ```ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76863,"byte_end":76876,"line_start":396,"line_end":396,"column_start":1,"column_end":14}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76877,"byte_end":76901,"line_start":397,"line_end":397,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, TrieMut};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76902,"byte_end":76950,"line_start":398,"line_end":398,"column_start":1,"column_end":49}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76951,"byte_end":76976,"line_start":399,"line_end":399,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76977,"byte_end":77013,"line_start":400,"line_end":400,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77014,"byte_end":77035,"line_start":401,"line_end":401,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77036,"byte_end":77039,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, DBValue>::default();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77040,"byte_end":77117,"line_start":403,"line_end":403,"column_start":1,"column_end":78}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77118,"byte_end":77156,"line_start":404,"line_end":404,"column_start":1,"column_end":39}},{"value":"/ let mut t = RefTrieDBMut::new(&mut memdb, &mut root);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77157,"byte_end":77214,"line_start":405,"line_end":405,"column_start":1,"column_end":58}},{"value":"/ assert!(t.is_empty());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77215,"byte_end":77241,"line_start":406,"line_end":406,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(*t.root(), KeccakHasher::hash(&[0u8][..]));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77242,"byte_end":77300,"line_start":407,"line_end":407,"column_start":1,"column_end":59}},{"value":"/ t.insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77301,"byte_end":77339,"line_start":408,"line_end":408,"column_start":1,"column_end":39}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77340,"byte_end":77381,"line_start":409,"line_end":409,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77382,"byte_end":77447,"line_start":410,"line_end":410,"column_start":1,"column_end":66}},{"value":"/ t.remove(b\"foo\").unwrap();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77448,"byte_end":77478,"line_start":411,"line_end":411,"column_start":1,"column_end":31}},{"value":"/ assert!(!t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77479,"byte_end":77521,"line_start":412,"line_end":412,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77522,"byte_end":77529,"line_start":413,"line_end":413,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":78069,"byte_end":78072,"line_start":433,"line_end":433,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBMut>::new","value":"pub fn new(&'a mut HashDB<L::Hash, DBValue>, &'a mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with backing database `db` and empty `root`.\n","sig":null,"attributes":[{"value":"/ Create a new trie with backing database `db` and empty `root`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77994,"byte_end":78060,"line_start":432,"line_end":432,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":78518,"byte_end":78531,"line_start":449,"line_end":449,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieDBMut>::from_existing","value":"pub fn from_existing(&'a mut HashDB<L::Hash, DBValue>, &'a mut TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root.\n Returns an error if `root` does not exist.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":78398,"byte_end":78461,"line_start":447,"line_end":447,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":78463,"byte_end":78509,"line_start":448,"line_end":448,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":78980,"byte_end":78982,"line_start":468,"line_end":468,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDBMut>::db","value":"pub fn db(&Self) -> &HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":78942,"byte_end":78971,"line_start":467,"line_end":467,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":79086,"byte_end":79092,"line_start":473,"line_end":473,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<TrieDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database mutably.\n","sig":null,"attributes":[{"value":"/ Get the backing database mutably.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":79040,"byte_end":79077,"line_start":472,"line_end":472,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":109393,"byte_end":109399,"line_start":1406,"line_end":1406,"column_start":9,"column_end":15},"name":"commit","qualname":"<TrieDBMut>::commit","value":"pub fn commit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Commit the in-memory changes to disk, freeing their storage and\n updating the state root.\n","sig":null,"attributes":[{"value":"/ Commit the in-memory changes to disk, freeing their storage and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":109287,"byte_end":109354,"line_start":1404,"line_end":1404,"column_start":2,"column_end":69}},{"value":"/ updating the state root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":109356,"byte_end":109384,"line_start":1405,"line_end":1405,"column_start":2,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":549},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedb","qualname":"::sectriedb","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":569},{"krate":0,"index":575}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":565},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117019,"byte_end":117028,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"SecTrieDB","qualname":"::sectriedb::SecTrieDB","value":"SecTrieDB {  }","parent":null,"children":[{"krate":0,"index":568}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":116819,"byte_end":116910,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":116911,"byte_end":116914,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `raw()` to get the backing `TrieDB` object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":116915,"byte_end":117007,"line_start":22,"line_end":22,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117380,"byte_end":117383,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDB>::new","value":"pub fn new(&'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117141,"byte_end":117210,"line_start":34,"line_end":34,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117212,"byte_end":117215,"line_start":35,"line_end":35,"column_start":2,"column_end":5}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117217,"byte_end":117275,"line_start":36,"line_end":36,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117277,"byte_end":117325,"line_start":37,"line_end":37,"column_start":2,"column_end":50}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117327,"byte_end":117371,"line_start":38,"line_end":38,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117620,"byte_end":117623,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"raw","qualname":"<SecTrieDB>::raw","value":"pub fn raw(&Self) -> &TrieDB<, L>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117553,"byte_end":117611,"line_start":46,"line_end":46,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117739,"byte_end":117746,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"raw_mut","qualname":"<SecTrieDB>::raw_mut","value":"pub fn raw_mut(&mut Self) -> &mut TrieDB","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117664,"byte_end":117730,"line_start":51,"line_end":51,"column_start":2,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":586},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedbmut","qualname":"::sectriedbmut","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":602},{"krate":0,"index":609}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119387,"byte_end":119399,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"SecTrieDBMut","qualname":"::sectriedbmut::SecTrieDBMut","value":"SecTrieDBMut {  }","parent":null,"children":[{"krate":0,"index":601}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119159,"byte_end":119258,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119259,"byte_end":119262,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object. You can use `raw()` to get the backing `TrieDBMut`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119263,"byte_end":119363,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119364,"byte_end":119375,"line_start":21,"line_end":21,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119704,"byte_end":119707,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDBMut>::new","value":"pub fn new(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119516,"byte_end":119585,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119587,"byte_end":119645,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119647,"byte_end":119695,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119967,"byte_end":119980,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<SecTrieDBMut>::from_existing","value":"pub fn from_existing(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119843,"byte_end":119907,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119909,"byte_end":119912,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119914,"byte_end":119958,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":120209,"byte_end":120211,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<SecTrieDBMut>::db","value":"pub fn db(&Self) -> &HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":120171,"byte_end":120200,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":120310,"byte_end":120316,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<SecTrieDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":120272,"byte_end":120301,"line_start":53,"line_end":53,"column_start":2,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":620},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"recorder","qualname":"::recorder","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":1630},{"krate":0,"index":1649},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1635},{"krate":0,"index":1652},{"krate":0,"index":1656},{"krate":0,"index":622},{"krate":0,"index":625}],"decl_id":null,"docs":" Trie query recorder.\n","sig":null,"attributes":[{"value":"/ Trie query recorder.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":121785,"byte_end":121809,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":121958,"byte_end":121964,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Record","qualname":"::recorder::Record","value":"Record { depth, data, hash }","parent":null,"children":[{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634}],"decl_id":null,"docs":" A record of a visited node.\n","sig":null,"attributes":[{"value":"/ A record of a visited node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":121839,"byte_end":121870,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1632},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122005,"byte_end":122010,"line_start":24,"line_end":24,"column_start":6,"column_end":11},"name":"depth","qualname":"::recorder::Record::depth","value":"u32","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The depth of this node.\n","sig":null,"attributes":[{"value":"/ The depth of this node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":121972,"byte_end":121999,"line_start":23,"line_end":23,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1633},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122054,"byte_end":122058,"line_start":27,"line_end":27,"column_start":6,"column_end":10},"name":"data","qualname":"::recorder::Record::data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The raw data of the node.\n","sig":null,"attributes":[{"value":"/ The raw data of the node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122019,"byte_end":122048,"line_start":26,"line_end":26,"column_start":2,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1634},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122102,"byte_end":122106,"line_start":30,"line_end":30,"column_start":6,"column_end":10},"name":"hash","qualname":"::recorder::Record::hash","value":"HO","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The hash of the data.\n","sig":null,"attributes":[{"value":"/ The hash of the data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122071,"byte_end":122096,"line_start":29,"line_end":29,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1652},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122210,"byte_end":122218,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Recorder","qualname":"::recorder::Recorder","value":"Recorder {  }","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655}],"decl_id":null,"docs":" Records trie nodes as they pass it.\n","sig":null,"attributes":[{"value":"/ Records trie nodes as they pass it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122115,"byte_end":122154,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122469,"byte_end":122472,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<Recorder<HO>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Recorder` which records all given nodes.\n","sig":null,"attributes":[{"value":"/ Create a new `Recorder` which records all given nodes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122391,"byte_end":122449,"line_start":47,"line_end":47,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122451,"byte_end":122460,"line_start":48,"line_end":48,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122595,"byte_end":122605,"line_start":54,"line_end":54,"column_start":9,"column_end":19},"name":"with_depth","qualname":"<Recorder<HO>>::with_depth","value":"pub fn with_depth(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Recorder` which only records nodes beyond a given depth.\n","sig":null,"attributes":[{"value":"/ Create a `Recorder` which only records nodes beyond a given depth.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122516,"byte_end":122586,"line_start":53,"line_end":53,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122761,"byte_end":122767,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"name":"record","qualname":"<Recorder<HO>>::record","value":"pub fn record(&mut Self, &HO, &[u8], u32)","parent":null,"children":[],"decl_id":null,"docs":" Record a visited node, given its hash, data, and depth.\n","sig":null,"attributes":[{"value":"/ Record a visited node, given its hash, data, and depth.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122693,"byte_end":122752,"line_start":61,"line_end":61,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122981,"byte_end":122986,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"name":"drain","qualname":"<Recorder<HO>>::drain","value":"pub fn drain(&mut Self) -> Vec<Record<HO>>","parent":null,"children":[],"decl_id":null,"docs":" Drain all visited records.\n","sig":null,"attributes":[{"value":"/ Drain all visited records.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122942,"byte_end":122972,"line_start":72,"line_end":72,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124103,"byte_end":124108,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"FatDB","qualname":"::fatdb::FatDB","value":"FatDB {  }","parent":null,"children":[{"krate":0,"index":651}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":123872,"byte_end":123963,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":123964,"byte_end":124037,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124038,"byte_end":124041,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124042,"byte_end":124091,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124406,"byte_end":124409,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDB>::new","value":"pub fn new(&'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124218,"byte_end":124287,"line_start":36,"line_end":36,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124289,"byte_end":124347,"line_start":37,"line_end":37,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124349,"byte_end":124397,"line_start":38,"line_end":38,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124613,"byte_end":124615,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDB>::db","value":"pub fn db(&Self) -> &HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124575,"byte_end":124604,"line_start":46,"line_end":46,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":669},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125415,"byte_end":125428,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"name":"FatDBIterator","qualname":"::fatdb::FatDBIterator","value":"FatDBIterator {  }","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"decl_id":null,"docs":" Itarator over inserted pairs of key values.\n","sig":null,"attributes":[{"value":"/ Itarator over inserted pairs of key values.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125356,"byte_end":125403,"line_start":76,"line_end":76,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125626,"byte_end":125629,"line_start":90,"line_end":90,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBIterator>::new","value":"pub fn new(&'db TrieDB<, L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Creates new iterator.\n","sig":null,"attributes":[{"value":"/ Creates new iterator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125592,"byte_end":125617,"line_start":89,"line_end":89,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127417,"byte_end":127425,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"FatDBMut","qualname":"::fatdbmut::FatDBMut","value":"FatDBMut {  }","parent":null,"children":[{"krate":0,"index":705}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127178,"byte_end":127277,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127278,"byte_end":127351,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127352,"byte_end":127355,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127356,"byte_end":127405,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127729,"byte_end":127732,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBMut>::new","value":"pub fn new(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127541,"byte_end":127610,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127612,"byte_end":127670,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127672,"byte_end":127720,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127988,"byte_end":128001,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<FatDBMut>::from_existing","value":"pub fn from_existing(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127864,"byte_end":127928,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127930,"byte_end":127933,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127935,"byte_end":127979,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":128225,"byte_end":128227,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDBMut>::db","value":"pub fn db(&Self) -> &HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":128187,"byte_end":128216,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":128329,"byte_end":128335,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<FatDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":128291,"byte_end":128320,"line_start":55,"line_end":55,"column_start":2,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":137001,"byte_end":137011,"line_start":250,"line_end":250,"column_start":8,"column_end":18},"name":"trie_visit","qualname":"::iter_build::trie_visit","value":"pub fn trie_visit<T, I, A, B, F>(I, &mut F) where T: TrieLayout,\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>,\nF: ProcessEncodedNode<TrieHash<T>>","parent":null,"children":[],"decl_id":null,"docs":" Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.\n This is the main entry point of this module.\n Calls to each node occurs ordered by byte key value but with longest keys first (from node to\n branch to root), this differs from standard byte array ordering a bit.\n","sig":null,"attributes":[{"value":"/ Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":136684,"byte_end":136771,"line_start":246,"line_end":246,"column_start":1,"column_end":88}},{"value":"/ This is the main entry point of this module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":136772,"byte_end":136820,"line_start":247,"line_end":247,"column_start":1,"column_end":49}},{"value":"/ Calls to each node occurs ordered by byte key value but with longest keys first (from node to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":136821,"byte_end":136918,"line_start":248,"line_end":248,"column_start":1,"column_end":98}},{"value":"/ branch to root), this differs from standard byte array ordering a bit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":136919,"byte_end":136993,"line_start":249,"line_end":249,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":788},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139332,"byte_end":139350,"line_start":312,"line_end":312,"column_start":11,"column_end":29},"name":"ProcessEncodedNode","qualname":"::iter_build::ProcessEncodedNode","value":"ProcessEncodedNode<HO>","parent":null,"children":[{"krate":0,"index":790}],"decl_id":null,"docs":" Visitor trait to implement when using `trie_visit`.\n","sig":null,"attributes":[{"value":"/ Visitor trait to implement when using `trie_visit`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139266,"byte_end":139321,"line_start":311,"line_end":311,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139762,"byte_end":139769,"line_start":320,"line_end":320,"column_start":5,"column_end":12},"name":"process","qualname":"::iter_build::ProcessEncodedNode::process","value":"pub fn process(&mut Self, Prefix, Vec<u8>, bool) -> ChildReference<HO>","parent":{"krate":0,"index":788},"children":[],"decl_id":null,"docs":" Function call with prefix, encoded value and a boolean indicating if the\n node is the root for each node of the trie.","sig":null,"attributes":[{"value":"/ Function call with prefix, encoded value and a boolean indicating if the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139358,"byte_end":139434,"line_start":313,"line_end":313,"column_start":2,"column_end":78}},{"value":"/ node is the root for each node of the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139436,"byte_end":139483,"line_start":314,"line_end":314,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139485,"byte_end":139488,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ Note that the returned value can change depending on implementation,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139490,"byte_end":139562,"line_start":316,"line_end":316,"column_start":2,"column_end":74}},{"value":"/ but usually it should be the Hash of encoded node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139564,"byte_end":139618,"line_start":317,"line_end":317,"column_start":2,"column_end":56}},{"value":"/ This is not something direcly related to encoding but is here for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139620,"byte_end":139689,"line_start":318,"line_end":318,"column_start":2,"column_end":71}},{"value":"/ optimisation purpose (builder hash_db does return this value).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139691,"byte_end":139757,"line_start":319,"line_end":319,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":791},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140038,"byte_end":140049,"line_start":326,"line_end":326,"column_start":12,"column_end":23},"name":"TrieBuilder","qualname":"::iter_build::TrieBuilder","value":"TrieBuilder { root }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799}],"decl_id":null,"docs":" Get trie root and insert visited node in a hash_db.\n As for all `ProcessEncodedNode` implementation, it\n is only for full trie parsing (not existing trie).\n","sig":null,"attributes":[{"value":"/ Get trie root and insert visited node in a hash_db.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139861,"byte_end":139916,"line_start":323,"line_end":323,"column_start":1,"column_end":56}},{"value":"/ As for all `ProcessEncodedNode` implementation, it","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139917,"byte_end":139971,"line_start":324,"line_end":324,"column_start":1,"column_end":55}},{"value":"/ is only for full trie parsing (not existing trie).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":139972,"byte_end":140026,"line_start":325,"line_end":325,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":798},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140092,"byte_end":140096,"line_start":328,"line_end":328,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieBuilder::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140203,"byte_end":140206,"line_start":333,"line_end":333,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBuilder>::new","value":"pub fn new(&'a mut DB) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":813},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140987,"byte_end":140995,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"TrieRoot","qualname":"::iter_build::TrieRoot","value":"TrieRoot { root }","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n","sig":null,"attributes":[{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140935,"byte_end":140975,"line_start":361,"line_end":361,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":816},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141035,"byte_end":141039,"line_start":364,"line_end":364,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRoot::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141006,"byte_end":141029,"line_start":363,"line_end":363,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141839,"byte_end":141855,"line_start":397,"line_end":397,"column_start":12,"column_end":28},"name":"TrieRootUnhashed","qualname":"::iter_build::TrieRootUnhashed","value":"TrieRootUnhashed { root }","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"decl_id":null,"docs":" Get the trie root node encoding.\n","sig":null,"attributes":[{"value":"/ Get the trie root node encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141791,"byte_end":141827,"line_start":396,"line_end":396,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":827},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141899,"byte_end":141903,"line_start":399,"line_end":399,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootUnhashed::root","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" The resulting encoded root.\n","sig":null,"attributes":[{"value":"/ The resulting encoded root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141862,"byte_end":141893,"line_start":398,"line_end":398,"column_start":2,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142172,"byte_end":142185,"line_start":412,"line_end":412,"column_start":12,"column_end":25},"name":"TrieRootPrint","qualname":"::iter_build::TrieRootPrint","value":"TrieRootPrint { root }","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n Print a debug trace.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142071,"byte_end":142094,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142095,"byte_end":142135,"line_start":410,"line_end":410,"column_start":1,"column_end":41}},{"value":"/ Print a debug trace.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142136,"byte_end":142160,"line_start":411,"line_end":411,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":835},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142225,"byte_end":142229,"line_start":414,"line_end":414,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootPrint::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":832},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142196,"byte_end":142219,"line_start":413,"line_end":413,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145784,"byte_end":145802,"line_start":58,"line_end":58,"column_start":12,"column_end":30},"name":"TrieDBNodeIterator","qualname":"::iterator::TrieDBNodeIterator","value":"TrieDBNodeIterator {  }","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879}],"decl_id":null,"docs":" Iterator for going through all nodes in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all nodes in the trie in pre-order traversal order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145690,"byte_end":145772,"line_start":57,"line_end":57,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145993,"byte_end":145996,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBNodeIterator>::new","value":"pub fn new(&'a TrieDB<, L>)\n-> Result<TrieDBNodeIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145958,"byte_end":145984,"line_start":65,"line_end":65,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":150749,"byte_end":150755,"line_start":234,"line_end":234,"column_start":9,"column_end":15},"name":"prefix","qualname":"<TrieDBNodeIterator>::prefix","value":"pub fn prefix(&mut Self, &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator into a prefix, no value out of the prefix will be accessed\n or returned after this operation.\n","sig":null,"attributes":[{"value":"/ Advance the iterator into a prefix, no value out of the prefix will be accessed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":150618,"byte_end":150701,"line_start":232,"line_end":232,"column_start":2,"column_end":85}},{"value":"/ or returned after this operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":150703,"byte_end":150740,"line_start":233,"line_end":233,"column_start":2,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":929},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156127,"byte_end":156133,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Lookup","qualname":"::lookup::Lookup","value":"Lookup { db, query, hash }","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"decl_id":null,"docs":" Trie lookup helper object.\n","sig":null,"attributes":[{"value":"/ Trie lookup helper object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156085,"byte_end":156115,"line_start":24,"line_end":24,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":933},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156208,"byte_end":156210,"line_start":27,"line_end":27,"column_start":6,"column_end":8},"name":"db","qualname":"::lookup::Lookup::db","value":"&'a (dyn hash_db::HashDBRef<<L as TrieLayout>::Hash, std::vec::Vec<u8>> + 'a)","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" database to query from.\n","sig":null,"attributes":[{"value":"/ database to query from.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156175,"byte_end":156202,"line_start":26,"line_end":26,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":934},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156308,"byte_end":156313,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"name":"query","qualname":"::lookup::Lookup::query","value":"Q","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Query object to record nodes and transform data.\n","sig":null,"attributes":[{"value":"/ Query object to record nodes and transform data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156250,"byte_end":156302,"line_start":28,"line_end":28,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":935},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156345,"byte_end":156349,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"name":"hash","qualname":"::lookup::Lookup::hash","value":"<<L as TrieLayout>::Hash as hash_db::Hasher>::Out","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Hash to start at\n","sig":null,"attributes":[{"value":"/ Hash to start at","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156319,"byte_end":156339,"line_start":30,"line_end":30,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156566,"byte_end":156573,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"look_up","qualname":"<Lookup>::look_up","value":"pub fn look_up(Self, NibbleSlice)\n-> Result<Option<Q::Item>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Look up the given key. If the value is found, it will be passed to the given\n function to decode or copy.\n","sig":null,"attributes":[{"value":"/ Look up the given key. If the value is found, it will be passed to the given","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156444,"byte_end":156524,"line_start":39,"line_end":39,"column_start":2,"column_end":82}},{"value":"/ function to decode or copy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156526,"byte_end":156557,"line_start":40,"line_end":40,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165461,"byte_end":165464,"line_start":31,"line_end":31,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleVec>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a new `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Make a new `NibbleVec`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165425,"byte_end":165452,"line_start":30,"line_end":30,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165602,"byte_end":165605,"line_start":40,"line_end":40,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Length of the `NibbleVec`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165544,"byte_end":165574,"line_start":38,"line_end":38,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165576,"byte_end":165593,"line_start":39,"line_end":39,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165695,"byte_end":165703,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrurns true if `NibbleVec` has zero length.\n","sig":null,"attributes":[{"value":"/ Retrurns true if `NibbleVec` has zero length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165637,"byte_end":165686,"line_start":42,"line_end":42,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165805,"byte_end":165807,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleVec>::at","value":"pub fn at(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Try to get the nibble at the given offset.\n","sig":null,"attributes":[{"value":"/ Try to get the nibble at the given offset.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165739,"byte_end":165785,"line_start":45,"line_end":45,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165787,"byte_end":165796,"line_start":46,"line_end":46,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":166055,"byte_end":166059,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"push","qualname":"<NibbleVec>::push","value":"pub fn push(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.\n","sig":null,"attributes":[{"value":"/ Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165982,"byte_end":166046,"line_start":53,"line_end":53,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":166497,"byte_end":166500,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"pop","qualname":"<NibbleVec>::pop","value":"pub fn pop(&mut Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to pop a nibble off the `NibbleVec`. Fails if len == 0.\n","sig":null,"attributes":[{"value":"/ Try to pop a nibble off the `NibbleVec`. Fails if len == 0.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":166425,"byte_end":166488,"line_start":67,"line_end":67,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":166917,"byte_end":166927,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"name":"drop_lasts","qualname":"<NibbleVec>::drop_lasts","value":"pub fn drop_lasts(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Remove then n last nibbles in a faster way than popping n times.\n","sig":null,"attributes":[{"value":"/ Remove then n last nibbles in a faster way than popping n times.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":166840,"byte_end":166908,"line_start":81,"line_end":81,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":167488,"byte_end":167497,"line_start":101,"line_end":101,"column_start":9,"column_end":18},"name":"as_prefix","qualname":"<NibbleVec>::as_prefix","value":"pub fn as_prefix(&Self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Get `Prefix` representation of this `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Get `Prefix` representation of this `NibbleVec`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":167427,"byte_end":167479,"line_start":100,"line_end":100,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":167852,"byte_end":167858,"line_start":112,"line_end":112,"column_start":9,"column_end":15},"name":"append","qualname":"<NibbleVec>::append","value":"pub fn append(&mut Self, &NibbleVec)","parent":null,"children":[],"decl_id":null,"docs":" Append another `NibbleVec`. Can be slow (alignement of second vec).\n","sig":null,"attributes":[{"value":"/ Append another `NibbleVec`. Can be slow (alignement of second vec).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":167772,"byte_end":167843,"line_start":111,"line_end":111,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":168650,"byte_end":168664,"line_start":135,"line_end":135,"column_start":9,"column_end":23},"name":"append_partial","qualname":"<NibbleVec>::append_partial","value":"pub fn append_partial(&mut Self, Partial)","parent":null,"children":[],"decl_id":null,"docs":" Append a `Partial`. Can be slow (alignement of partial).\n","sig":null,"attributes":[{"value":"/ Append a `Partial`. Can be slow (alignement of partial).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":168581,"byte_end":168641,"line_start":134,"line_end":134,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170123,"byte_end":170128,"line_start":188,"line_end":188,"column_start":9,"column_end":14},"name":"inner","qualname":"<NibbleVec>::inner","value":"pub fn inner(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying byte slice.\n","sig":null,"attributes":[{"value":"/ Get the underlying byte slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170080,"byte_end":170114,"line_start":187,"line_end":187,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170188,"byte_end":170193,"line_start":193,"line_end":193,"column_start":9,"column_end":14},"name":"clear","qualname":"<NibbleVec>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" clear\n","sig":null,"attributes":[{"value":"/ clear","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170170,"byte_end":170179,"line_start":192,"line_end":192,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170347,"byte_end":170361,"line_start":199,"line_end":199,"column_start":9,"column_end":23},"name":"as_nibbleslice","qualname":"<NibbleVec>::as_nibbleslice","value":"pub fn as_nibbleslice(&Self) -> Option<NibbleSlice>","parent":null,"children":[],"decl_id":null,"docs":" Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.\n","sig":null,"attributes":[{"value":"/ Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170250,"byte_end":170338,"line_start":198,"line_end":198,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170583,"byte_end":170594,"line_start":208,"line_end":208,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleVec>::starts_with","value":"pub fn starts_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":170513,"byte_end":170574,"line_start":207,"line_end":207,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174245,"byte_end":174248,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlice>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174180,"byte_end":174236,"line_start":35,"line_end":35,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174397,"byte_end":174407,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"new_offset","qualname":"<NibbleSlice>::new_offset","value":"pub fn new_offset(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice with a nibble offset.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice with a nibble offset.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174311,"byte_end":174388,"line_start":38,"line_end":38,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174640,"byte_end":174644,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"name":"iter","qualname":"<NibbleSlice>::iter","value":"pub fn iter(&'a Self) -> NibbleSliceIterator","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator for the series of nibbles.\n","sig":null,"attributes":[{"value":"/ Get an iterator for the series of nibbles.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174585,"byte_end":174631,"line_start":50,"line_end":50,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174776,"byte_end":174787,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"name":"from_stored","qualname":"<NibbleSlice>::from_stored","value":"pub fn from_stored(&NodeKey) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Get nibble slice from a `NodeKey`.\n","sig":null,"attributes":[{"value":"/ Get nibble slice from a `NodeKey`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174729,"byte_end":174767,"line_start":55,"line_end":55,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174945,"byte_end":174954,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"to_stored","qualname":"<NibbleSlice>::to_stored","value":"pub fn to_stored(&Self) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174864,"byte_end":174936,"line_start":60,"line_end":60,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":175351,"byte_end":175366,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"name":"to_stored_range","qualname":"<NibbleSlice>::to_stored_range","value":"pub fn to_stored_range(&Self, usize) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`,\n and for a given number of nibble.\n Warning this method can be slow (number of nibble does not align the\n original padding).\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":175133,"byte_end":175205,"line_start":67,"line_end":67,"column_start":2,"column_end":74}},{"value":"/ and for a given number of nibble.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":175207,"byte_end":175244,"line_start":68,"line_end":68,"column_start":2,"column_end":39}},{"value":"/ Warning this method can be slow (number of nibble does not align the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":175246,"byte_end":175318,"line_start":69,"line_end":69,"column_start":2,"column_end":74}},{"value":"/ original padding).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":175320,"byte_end":175342,"line_start":70,"line_end":70,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176264,"byte_end":176272,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleSlice>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the slice contains no nibbles.\n","sig":null,"attributes":[{"value":"/ Return true if the slice contains no nibbles.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176206,"byte_end":176255,"line_start":95,"line_end":95,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176387,"byte_end":176390,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlice>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length (in nibbles, naturally) of this slice.\n","sig":null,"attributes":[{"value":"/ Get the length (in nibbles, naturally) of this slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176310,"byte_end":176367,"line_start":98,"line_end":98,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176369,"byte_end":176378,"line_start":99,"line_end":99,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176536,"byte_end":176538,"line_start":104,"line_end":104,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleSlice>::at","value":"pub fn at(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the nibble at position `i`.\n","sig":null,"attributes":[{"value":"/ Get the nibble at position `i`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176473,"byte_end":176508,"line_start":102,"line_end":102,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176510,"byte_end":176527,"line_start":103,"line_end":103,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176696,"byte_end":176699,"line_start":109,"line_end":109,"column_start":9,"column_end":12},"name":"mid","qualname":"<NibbleSlice>::mid","value":"pub fn mid(&Self, usize) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Return object which represents a view on to this slice (further) offset by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Return object which represents a view on to this slice (further) offset by `i` nibbles.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176596,"byte_end":176687,"line_start":108,"line_end":108,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176869,"byte_end":176876,"line_start":117,"line_end":117,"column_start":9,"column_end":16},"name":"advance","qualname":"<NibbleSlice>::advance","value":"pub fn advance(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Advance the view on the slice by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Advance the view on the slice by `i` nibbles.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176811,"byte_end":176860,"line_start":116,"line_end":116,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177024,"byte_end":177028,"line_start":123,"line_end":123,"column_start":9,"column_end":13},"name":"back","qualname":"<NibbleSlice>::back","value":"pub fn back(&Self, usize) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Move back to a previously valid fix offset position.\n","sig":null,"attributes":[{"value":"/ Move back to a previously valid fix offset position.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":176959,"byte_end":177015,"line_start":122,"line_end":122,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177196,"byte_end":177207,"line_start":131,"line_end":131,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleSlice>::starts_with","value":"pub fn starts_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177126,"byte_end":177187,"line_start":130,"line_end":130,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177364,"byte_end":177377,"line_start":134,"line_end":134,"column_start":9,"column_end":22},"name":"common_prefix","qualname":"<NibbleSlice>::common_prefix","value":"pub fn common_prefix(&Self, &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many of the same nibbles at the beginning do we match with `them`?\n","sig":null,"attributes":[{"value":"/ How many of the same nibbles at the beginning do we match with `them`?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177281,"byte_end":177355,"line_start":133,"line_end":133,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177656,"byte_end":177661,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"name":"right","qualname":"<NibbleSlice>::right","value":"pub fn right(&'a Self) -> Partial","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` representation of this slice:\n first encoded byte and following slice.\n","sig":null,"attributes":[{"value":"/ Return `Partial` representation of this slice:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177552,"byte_end":177602,"line_start":144,"line_end":144,"column_start":2,"column_end":52}},{"value":"/ first encoded byte and following slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177604,"byte_end":177647,"line_start":145,"line_end":145,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":178015,"byte_end":178025,"line_start":157,"line_end":157,"column_start":9,"column_end":19},"name":"right_iter","qualname":"<NibbleSlice>::right_iter","value":"pub fn right_iter(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over `Partial` bytes representation.\n","sig":null,"attributes":[{"value":"/ Return an iterator over `Partial` bytes representation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":177947,"byte_end":178006,"line_start":156,"line_end":156,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":178482,"byte_end":178498,"line_start":175,"line_end":175,"column_start":9,"column_end":25},"name":"right_range_iter","qualname":"<NibbleSlice>::right_range_iter","value":"pub fn right_range_iter(&'a Self, usize) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` bytes iterator over a range of byte..\n Warning can be slow when unaligned (similar to `to_stored_range`).\n","sig":null,"attributes":[{"value":"/ Return `Partial` bytes iterator over a range of byte..","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":178343,"byte_end":178401,"line_start":173,"line_end":173,"column_start":2,"column_end":60}},{"value":"/ Warning can be slow when unaligned (similar to `to_stored_range`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":178403,"byte_end":178473,"line_start":174,"line_end":174,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":179620,"byte_end":179624,"line_start":217,"line_end":217,"column_start":9,"column_end":13},"name":"left","qualname":"<NibbleSlice>::left","value":"pub fn left(&'a Self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Return left portion of `NibbleSlice`, if the slice\n originates from a full key it will be the `Prefix of\n the node`.\n","sig":null,"attributes":[{"value":"/ Return left portion of `NibbleSlice`, if the slice","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":179483,"byte_end":179537,"line_start":214,"line_end":214,"column_start":2,"column_end":56}},{"value":"/ originates from a full key it will be the `Prefix of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":179539,"byte_end":179595,"line_start":215,"line_end":215,"column_start":2,"column_end":58}},{"value":"/ the node`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":179597,"byte_end":179611,"line_start":216,"line_end":216,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":179970,"byte_end":179980,"line_start":228,"line_end":228,"column_start":9,"column_end":19},"name":"left_owned","qualname":"<NibbleSlice>::left_owned","value":"pub fn left_owned(&'a Self) -> (BackingByteVec, Option<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Owned version of a `Prefix` from a `left` method call.\n","sig":null,"attributes":[{"value":"/ Owned version of a `Prefix` from a `left` method call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":179903,"byte_end":179961,"line_start":227,"line_end":227,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":1078},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":159922,"byte_end":159932,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"nibble_ops","qualname":"::nibble::nibble_ops","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095}],"decl_id":null,"docs":" Utility methods to work on radix 16 nibble.\n","sig":null,"attributes":[{"value":"/ Utility methods to work on radix 16 nibble.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":159866,"byte_end":159913,"line_start":26,"line_end":26,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1080},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":159996,"byte_end":160010,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"BIT_PER_NIBBLE","qualname":"::nibble::nibble_ops::BIT_PER_NIBBLE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Single nibble length in bit.\n","sig":null,"attributes":[{"value":"/ Single nibble length in bit.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":159952,"byte_end":159984,"line_start":30,"line_end":30,"column_start":2,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":1081},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160067,"byte_end":160082,"line_start":33,"line_end":33,"column_start":12,"column_end":27},"name":"NIBBLE_PER_BYTE","qualname":"::nibble::nibble_ops::NIBBLE_PER_BYTE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of nibble per byte.\n","sig":null,"attributes":[{"value":"/ Number of nibble per byte.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160025,"byte_end":160055,"line_start":32,"line_end":32,"column_start":2,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1082},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160155,"byte_end":160168,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"NIBBLE_LENGTH","qualname":"::nibble::nibble_ops::NIBBLE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of child for a branch (trie radix).\n","sig":null,"attributes":[{"value":"/ Number of child for a branch (trie radix).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160097,"byte_end":160143,"line_start":34,"line_end":34,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1083},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160221,"byte_end":160236,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"PADDING_BITMASK","qualname":"::nibble::nibble_ops::PADDING_BITMASK","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Nibble (half a byte).\n","sig":null,"attributes":[{"value":"/ Nibble (half a byte).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160184,"byte_end":160209,"line_start":36,"line_end":36,"column_start":2,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":1084},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160281,"byte_end":160300,"line_start":39,"line_end":39,"column_start":12,"column_end":31},"name":"CONTENT_HEADER_SIZE","qualname":"::nibble::nibble_ops::CONTENT_HEADER_SIZE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Size of header.\n","sig":null,"attributes":[{"value":"/ Size of header.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160250,"byte_end":160269,"line_start":38,"line_end":38,"column_start":2,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1085},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160377,"byte_end":160385,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"pad_left","qualname":"::nibble::nibble_ops::pad_left","value":"pub fn pad_left(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping left nibble.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping left nibble.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160312,"byte_end":160349,"line_start":41,"line_end":41,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160351,"byte_end":160368,"line_start":42,"line_end":42,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1086},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160493,"byte_end":160502,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"name":"pad_right","qualname":"::nibble::nibble_ops::pad_right","value":"pub fn pad_right(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping right byte.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping right byte.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160429,"byte_end":160465,"line_start":47,"line_end":47,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160467,"byte_end":160484,"line_start":48,"line_end":48,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1087},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160624,"byte_end":160631,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"at_left","qualname":"::nibble::nibble_ops::at_left","value":"pub fn at_left(u8, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index of a byte.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index of a byte.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160545,"byte_end":160596,"line_start":53,"line_end":53,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160598,"byte_end":160615,"line_start":54,"line_end":54,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1088},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160829,"byte_end":160843,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"name":"left_nibble_at","qualname":"::nibble::nibble_ops::left_nibble_at","value":"pub fn left_nibble_at(&[u8], usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a left aligned array.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a left aligned array.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160736,"byte_end":160801,"line_start":63,"line_end":63,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160803,"byte_end":160820,"line_start":64,"line_end":64,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1089},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161043,"byte_end":161045,"line_start":74,"line_end":74,"column_start":9,"column_end":11},"name":"at","qualname":"::nibble::nibble_ops::at","value":"pub fn at(&NibbleSlice, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a `NibbleSlice`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":160955,"byte_end":161015,"line_start":72,"line_end":72,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161017,"byte_end":161034,"line_start":73,"line_end":73,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1090},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161302,"byte_end":161314,"line_start":82,"line_end":82,"column_start":9,"column_end":21},"name":"push_at_left","qualname":"::nibble::nibble_ops::push_at_left","value":"pub fn push_at_left(u8, u8, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Push u8 nibble value at a given index into an existing byte.\n","sig":null,"attributes":[{"value":"/ Push u8 nibble value at a given index into an existing byte.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161210,"byte_end":161274,"line_start":80,"line_end":80,"column_start":2,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161276,"byte_end":161293,"line_start":81,"line_end":81,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1091},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161510,"byte_end":161524,"line_start":92,"line_end":92,"column_start":9,"column_end":23},"name":"number_padding","qualname":"::nibble::nibble_ops::number_padding","value":"pub fn number_padding(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of needed padding a array of nibble length `i`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161418,"byte_end":161427,"line_start":90,"line_end":90,"column_start":2,"column_end":11}},{"value":"/ Calculate the number of needed padding a array of nibble length `i`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161429,"byte_end":161501,"line_start":91,"line_end":91,"column_start":2,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":1092},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161703,"byte_end":161715,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"SPLIT_SHIFTS","qualname":"::nibble::nibble_ops::SPLIT_SHIFTS","value":"(usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The nibble shifts needed to align.\n We use two value, one is a left shift and\n the other is a right shift.\n","sig":null,"attributes":[{"value":"/ The nibble shifts needed to align.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161573,"byte_end":161611,"line_start":96,"line_end":96,"column_start":2,"column_end":40}},{"value":"/ We use two value, one is a left shift and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161613,"byte_end":161658,"line_start":97,"line_end":97,"column_start":2,"column_end":47}},{"value":"/ the other is a right shift.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161660,"byte_end":161691,"line_start":98,"line_end":98,"column_start":2,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1093},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161833,"byte_end":161846,"line_start":102,"line_end":102,"column_start":9,"column_end":22},"name":"biggest_depth","qualname":"::nibble::nibble_ops::biggest_depth","value":"pub fn biggest_depth(&[u8], &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the biggest common depth between two left aligned packed nibble slice.\n","sig":null,"attributes":[{"value":"/ Count the biggest common depth between two left aligned packed nibble slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":161744,"byte_end":161824,"line_start":101,"line_end":101,"column_start":2,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1094},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162190,"byte_end":162201,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"left_common","qualname":"::nibble::nibble_ops::left_common","value":"pub fn left_common(u8, u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of common nibble between two left aligned bytes.\n","sig":null,"attributes":[{"value":"/ Calculate the number of common nibble between two left aligned bytes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162089,"byte_end":162162,"line_start":112,"line_end":112,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162164,"byte_end":162181,"line_start":113,"line_end":113,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1095},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162486,"byte_end":162495,"line_start":127,"line_end":127,"column_start":9,"column_end":18},"name":"shift_key","qualname":"::nibble::nibble_ops::shift_key","value":"pub fn shift_key(&mut NodeKey, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Shifts right aligned key to add a given left offset.\n Resulting in possibly padding at both left and right\n (example usage when combining two keys).\n","sig":null,"attributes":[{"value":"/ Shifts right aligned key to add a given left offset.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162317,"byte_end":162373,"line_start":124,"line_end":124,"column_start":2,"column_end":58}},{"value":"/ Resulting in possibly padding at both left and right","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162375,"byte_end":162431,"line_start":125,"line_end":125,"column_start":2,"column_end":58}},{"value":"/ (example usage when combining two keys).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":162433,"byte_end":162477,"line_start":126,"line_end":126,"column_start":2,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1700},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163452,"byte_end":163461,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"name":"NibbleVec","qualname":"::nibble::NibbleVec","value":"NibbleVec {  }","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702}],"decl_id":null,"docs":" Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.\n Nibbles are always left aligned, so making a `NibbleVec` from\n a `NibbleSlice` can get costy.\n","sig":null,"attributes":[{"value":"/ Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163193,"byte_end":163263,"line_start":154,"line_end":154,"column_start":1,"column_end":71}},{"value":"/ Nibbles are always left aligned, so making a `NibbleVec` from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163264,"byte_end":163329,"line_start":155,"line_end":155,"column_start":1,"column_end":66}},{"value":"/ a `NibbleSlice` can get costy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163330,"byte_end":163364,"line_start":156,"line_end":156,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1714},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164355,"byte_end":164366,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"NibbleSlice","qualname":"::nibble::NibbleSlice","value":"NibbleSlice {  }","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717}],"decl_id":null,"docs":" Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","sig":null,"attributes":[{"value":"/ Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163504,"byte_end":163582,"line_start":164,"line_end":164,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163583,"byte_end":163586,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This is an immutable struct. No operations actually change it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163587,"byte_end":163653,"line_start":166,"line_end":166,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163654,"byte_end":163657,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163658,"byte_end":163671,"line_start":168,"line_end":168,"column_start":1,"column_end":14}},{"value":"/ ```snippet","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163672,"byte_end":163686,"line_start":169,"line_end":169,"column_start":1,"column_end":15}},{"value":"/ use patricia_trie::nibbleslice::NibbleSlice;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163687,"byte_end":163735,"line_start":170,"line_end":170,"column_start":1,"column_end":49}},{"value":"/ fn main() {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163736,"byte_end":163751,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"/   let d1 = &[0x01u8, 0x23, 0x45];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163752,"byte_end":163789,"line_start":172,"line_end":172,"column_start":1,"column_end":38}},{"value":"/   let d2 = &[0x34u8, 0x50, 0x12];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163790,"byte_end":163827,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/   let d3 = &[0x00u8, 0x12];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163828,"byte_end":163859,"line_start":174,"line_end":174,"column_start":1,"column_end":32}},{"value":"/   let n1 = NibbleSlice::new(d1);\t\t\t// 0,1,2,3,4,5","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163860,"byte_end":163913,"line_start":175,"line_end":175,"column_start":1,"column_end":54}},{"value":"/   let n2 = NibbleSlice::new(d2);\t\t\t// 3,4,5,0,1,2","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163914,"byte_end":163967,"line_start":176,"line_end":176,"column_start":1,"column_end":54}},{"value":"/   let n3 = NibbleSlice::new_offset(d3, 1);\t// 0,1,2","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":163968,"byte_end":164023,"line_start":177,"line_end":177,"column_start":1,"column_end":56}},{"value":"/   assert!(n1 > n3);\t\t\t\t\t\t\t// 0,1,2,... > 0,1,2","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164024,"byte_end":164074,"line_start":178,"line_end":178,"column_start":1,"column_end":51}},{"value":"/   assert!(n1 < n2);\t\t\t\t\t\t\t// 0,... < 3,...","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164075,"byte_end":164121,"line_start":179,"line_end":179,"column_start":1,"column_end":47}},{"value":"/   assert!(n2.mid(3) == n3);\t\t\t\t\t// 0,1,2 == 0,1,2","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164122,"byte_end":164175,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/   assert!(n1.starts_with(&n3));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164176,"byte_end":164211,"line_start":181,"line_end":181,"column_start":1,"column_end":36}},{"value":"/   assert_eq!(n1.common_prefix(&n3), 3);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164212,"byte_end":164255,"line_start":182,"line_end":182,"column_start":1,"column_end":44}},{"value":"/   assert_eq!(n2.mid(3).common_prefix(&n1), 3);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164256,"byte_end":164306,"line_start":183,"line_end":183,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164307,"byte_end":164312,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164313,"byte_end":164320,"line_start":185,"line_end":185,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164458,"byte_end":164477,"line_start":193,"line_end":193,"column_start":12,"column_end":31},"name":"NibbleSliceIterator","qualname":"::nibble::NibbleSliceIterator","value":"NibbleSliceIterator {  }","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103}],"decl_id":null,"docs":" Iterator type for a nibble slice.\n","sig":null,"attributes":[{"value":"/ Iterator type for a nibble slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/mod.rs","byte_start":164409,"byte_end":164446,"line_start":192,"line_end":192,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1115},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192026,"byte_end":192033,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"Partial","qualname":"::node_codec::Partial","value":"((u8, u8), &'a [u8])","parent":null,"children":[],"decl_id":null,"docs":" Representation of a nible slice (right aligned).\n It contains a right aligned padded first byte (first pair element is the number of nibbles\n (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over\n the remaining bytes.\n","sig":null,"attributes":[{"value":"/ Representation of a nible slice (right aligned).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":191754,"byte_end":191806,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ It contains a right aligned padded first byte (first pair element is the number of nibbles","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":191807,"byte_end":191901,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":191902,"byte_end":191991,"line_start":27,"line_end":27,"column_start":1,"column_end":90}},{"value":"/ the remaining bytes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":191992,"byte_end":192016,"line_start":28,"line_end":28,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":1117},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192115,"byte_end":192124,"line_start":32,"line_end":32,"column_start":11,"column_end":20},"name":"NodeCodec","qualname":"::node_codec::NodeCodec","value":"NodeCodec: Sized","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1131}],"decl_id":null,"docs":" Trait for trie node encoding/decoding.\n","sig":null,"attributes":[{"value":"/ Trait for trie node encoding/decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192062,"byte_end":192104,"line_start":31,"line_end":31,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1118},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192163,"byte_end":192168,"line_start":34,"line_end":34,"column_start":7,"column_end":12},"name":"Error","qualname":"::node_codec::NodeCodec::Error","value":"type Error: Error;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Codec error type.\n","sig":null,"attributes":[{"value":"/ Codec error type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192135,"byte_end":192156,"line_start":33,"line_end":33,"column_start":2,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1119},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192225,"byte_end":192232,"line_start":37,"line_end":37,"column_start":7,"column_end":14},"name":"HashOut","qualname":"::node_codec::NodeCodec::HashOut","value":"type HashOut: AsRef<[u8]> + AsMut<[u8]> + Default + MaybeDebug + PartialEq + Eq\n\t\t+ hash::Hash + Send + Sync + Clone + Copy;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Output type of encoded node hasher.\n","sig":null,"attributes":[{"value":"/ Output type of encoded node hasher.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192179,"byte_end":192218,"line_start":36,"line_end":36,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192381,"byte_end":192397,"line_start":41,"line_end":41,"column_start":5,"column_end":21},"name":"hashed_null_node","qualname":"::node_codec::NodeCodec::hashed_null_node","value":"pub fn hashed_null_node() -> Self::HashOut","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Get the hashed null node.\n","sig":null,"attributes":[{"value":"/ Get the hashed null node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192347,"byte_end":192376,"line_start":40,"line_end":40,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192488,"byte_end":192499,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"decode_plan","qualname":"::node_codec::NodeCodec::decode_plan","value":"pub fn decode_plan(&[u8]) -> Result<NodePlan, Self::Error>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Decode bytes to a `NodePlan`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `NodePlan`. Returns `Self::E` on failure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192420,"byte_end":192483,"line_start":43,"line_end":43,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192613,"byte_end":192619,"line_start":47,"line_end":47,"column_start":5,"column_end":11},"name":"decode","qualname":"::node_codec::NodeCodec::decode","value":"pub fn decode(&[u8]) -> Result<Node, Self::Error>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Decode bytes to a `Node`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `Node`. Returns `Self::E` on failure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192549,"byte_end":192608,"line_start":46,"line_end":46,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192787,"byte_end":192800,"line_start":52,"line_end":52,"column_start":5,"column_end":18},"name":"is_empty_node","qualname":"::node_codec::NodeCodec::is_empty_node","value":"pub fn is_empty_node(&[u8]) -> bool","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Check if the provided bytes correspond to the codecs \"empty\" node.\n","sig":null,"attributes":[{"value":"/ Check if the provided bytes correspond to the codecs \"empty\" node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192712,"byte_end":192782,"line_start":51,"line_end":51,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192864,"byte_end":192874,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"empty_node","qualname":"::node_codec::NodeCodec::empty_node","value":"pub fn empty_node() -> &'static [u8]","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded empty node.\n","sig":null,"attributes":[{"value":"/ Returns an encoded empty node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192825,"byte_end":192859,"line_start":54,"line_end":54,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192934,"byte_end":192943,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"leaf_node","qualname":"::node_codec::NodeCodec::leaf_node","value":"pub fn leaf_node(Partial, &[u8]) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded leaf node\n","sig":null,"attributes":[{"value":"/ Returns an encoded leaf node","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192897,"byte_end":192929,"line_start":57,"line_end":57,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193220,"byte_end":193234,"line_start":64,"line_end":64,"column_start":5,"column_end":19},"name":"extension_node","qualname":"::node_codec::NodeCodec::extension_node","value":"pub fn extension_node<impl Iterator<Item = u8>: Iterator<Item =\n                      u8>>(impl Iterator<Item = u8>, usize,\n                           ChildReference<Self::HashOut>) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded extension node\n Note that number_nibble is the number of element of the iterator\n it can possibly be obtain by `Iterator` `size_hint`, but\n for simplicity it is used directly as a parameter.\n","sig":null,"attributes":[{"value":"/ Returns an encoded extension node","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192990,"byte_end":193027,"line_start":60,"line_end":60,"column_start":2,"column_end":39}},{"value":"/ Note that number_nibble is the number of element of the iterator","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193029,"byte_end":193097,"line_start":61,"line_end":61,"column_start":2,"column_end":70}},{"value":"/ it can possibly be obtain by `Iterator` `size_hint`, but","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193099,"byte_end":193159,"line_start":62,"line_end":62,"column_start":2,"column_end":62}},{"value":"/ for simplicity it is used directly as a parameter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193161,"byte_end":193215,"line_start":63,"line_end":63,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193485,"byte_end":193496,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"branch_node","qualname":"::node_codec::NodeCodec::branch_node","value":"pub fn branch_node<impl Borrow<Option<ChildReference<Self::HashOut>>>: Borrow<Option<ChildReference<Self::HashOut>>>,\n                   impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>: Iterator<Item\n                   =\n                   impl Borrow<Option<ChildReference<Self::HashOut>>>>>(impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>,\n                                                                        Option<&[u8]>)\n-> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded branch node.\n Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193358,"byte_end":193393,"line_start":70,"line_end":70,"column_start":2,"column_end":37}},{"value":"/ Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193395,"byte_end":193480,"line_start":71,"line_end":71,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193766,"byte_end":193785,"line_start":79,"line_end":79,"column_start":5,"column_end":24},"name":"branch_node_nibbled","qualname":"::node_codec::NodeCodec::branch_node_nibbled","value":"pub fn branch_node_nibbled<impl Iterator<Item = u8>: Iterator<Item = u8>,\n                           impl Borrow<Option<ChildReference<Self::HashOut>>>: Borrow<Option<ChildReference<Self::HashOut>>>,\n                           impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>: Iterator<Item\n                           =\n                           impl Borrow<Option<ChildReference<Self::HashOut>>>>>(impl Iterator<Item = u8>,\n                                                                                usize,\n                                                                                impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>,\n                                                                                Option<&[u8]>)\n-> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded branch node with a possible partial path.\n `number_nibble` is the partial path length as in `extension_node`.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node with a possible partial path.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193625,"byte_end":193689,"line_start":77,"line_end":77,"column_start":2,"column_end":66}},{"value":"/ `number_nibble` is the partial path length as in `extension_node`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":193691,"byte_end":193761,"line_start":78,"line_end":78,"column_start":2,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1183},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200775,"byte_end":200789,"line_start":168,"line_end":168,"column_start":8,"column_end":22},"name":"encode_compact","qualname":"::trie_codec::encode_compact","value":"pub fn encode_compact<L>(&TrieDB<, L>)\n-> Result<Vec<Vec<u8>>, TrieHash<L>, CError<L>> where L: TrieLayout","parent":null,"children":[],"decl_id":null,"docs":" Generates a compact representation of the partial trie stored in the given DB. The encoding\n is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes\n are listed in pre-order traversal order so that the full nodes can be efficiently\n reconstructed recursively.","sig":null,"attributes":[{"value":"/ Generates a compact representation of the partial trie stored in the given DB. The encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200338,"byte_end":200433,"line_start":161,"line_end":161,"column_start":1,"column_end":96}},{"value":"/ is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200434,"byte_end":200531,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ are listed in pre-order traversal order so that the full nodes can be efficiently","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200532,"byte_end":200617,"line_start":163,"line_end":163,"column_start":1,"column_end":86}},{"value":"/ reconstructed recursively.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200618,"byte_end":200648,"line_start":164,"line_end":164,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200649,"byte_end":200652,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200653,"byte_end":200751,"line_start":166,"line_end":166,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":200752,"byte_end":200767,"line_start":167,"line_end":167,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1201},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208530,"byte_end":208544,"line_start":388,"line_end":388,"column_start":8,"column_end":22},"name":"decode_compact","qualname":"::trie_codec::decode_compact","value":"pub fn decode_compact<L, DB, T>(&mut DB, &[Vec<u8>])\n-> Result<(TrieHash<L>, usize), TrieHash<L>, CError<L>> where L: TrieLayout,\nDB: HashDB<L::Hash, T>","parent":null,"children":[],"decl_id":null,"docs":" Reconstructs a partial trie DB from a compact representation. The encoding is a vector of\n mutated trie nodes with those child references omitted. The decode function reads them in order\n from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.\n It stops after fully constructing one partial trie and returns the root hash and the number of\n nodes read. If an error occurs during decoding, there are no guarantees about which entries\n were or were not added to the DB.","sig":null,"attributes":[{"value":"/ Reconstructs a partial trie DB from a compact representation. The encoding is a vector of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":207684,"byte_end":207777,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"/ mutated trie nodes with those child references omitted. The decode function reads them in order","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":207778,"byte_end":207877,"line_start":377,"line_end":377,"column_start":1,"column_end":100}},{"value":"/ from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":207878,"byte_end":207977,"line_start":378,"line_end":378,"column_start":1,"column_end":100}},{"value":"/ It stops after fully constructing one partial trie and returns the root hash and the number of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":207978,"byte_end":208076,"line_start":379,"line_end":379,"column_start":1,"column_end":99}},{"value":"/ nodes read. If an error occurs during decoding, there are no guarantees about which entries","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208077,"byte_end":208172,"line_start":380,"line_end":380,"column_start":1,"column_end":96}},{"value":"/ were or were not added to the DB.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208173,"byte_end":208210,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208211,"byte_end":208214,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ The number of nodes read may be fewer than the total number of items in `encoded`. This allows","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208215,"byte_end":208313,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ one to concatenate multiple compact encodings together and still reconstruct them all.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208314,"byte_end":208404,"line_start":384,"line_end":384,"column_start":1,"column_end":91}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208408,"byte_end":208506,"line_start":386,"line_end":386,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":208507,"byte_end":208522,"line_start":387,"line_end":387,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1244},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2329,"byte_end":2336,"line_start":80,"line_end":80,"column_start":10,"column_end":17},"name":"DBValue","qualname":"::DBValue","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Database value\n","sig":null,"attributes":[{"value":"/ Database value","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2301,"byte_end":2319,"line_start":79,"line_end":79,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2596,"byte_end":2612,"line_start":89,"line_end":89,"column_start":2,"column_end":18},"name":"InvalidStateRoot","qualname":"::TrieError::InvalidStateRoot","value":"TrieError::InvalidStateRoot(T)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" Attempted to create a trie with a state root not in the DB.\n","sig":null,"attributes":[{"value":"/ Attempted to create a trie with a state root not in the DB.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2531,"byte_end":2594,"line_start":88,"line_end":88,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1729},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2660,"byte_end":2678,"line_start":91,"line_end":91,"column_start":2,"column_end":20},"name":"IncompleteDatabase","qualname":"::TrieError::IncompleteDatabase","value":"TrieError::IncompleteDatabase(T)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" Trie item not found in the database,\n","sig":null,"attributes":[{"value":"/ Trie item not found in the database,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2618,"byte_end":2658,"line_start":90,"line_end":90,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2883,"byte_end":2903,"line_start":95,"line_end":95,"column_start":2,"column_end":22},"name":"ValueAtIncompleteKey","qualname":"::TrieError::ValueAtIncompleteKey","value":"TrieError::ValueAtIncompleteKey(Vec<u8>, u8)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" A value was found in the trie with a nibble key that was not byte-aligned.\n The first parameter is the byte-aligned part of the prefix and the second parameter is the\n remaining nibble.\n","sig":null,"attributes":[{"value":"/ A value was found in the trie with a nibble key that was not byte-aligned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2684,"byte_end":2762,"line_start":92,"line_end":92,"column_start":2,"column_end":80}},{"value":"/ The first parameter is the byte-aligned part of the prefix and the second parameter is the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2764,"byte_end":2858,"line_start":93,"line_end":93,"column_start":2,"column_end":96}},{"value":"/ remaining nibble.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2860,"byte_end":2881,"line_start":94,"line_end":94,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2942,"byte_end":2954,"line_start":97,"line_end":97,"column_start":2,"column_end":14},"name":"DecoderError","qualname":"::TrieError::DecoderError","value":"TrieError::DecoderError(T, E)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" Corrupt Trie item\n","sig":null,"attributes":[{"value":"/ Corrupt Trie item","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2919,"byte_end":2940,"line_start":96,"line_end":96,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2963,"byte_end":2974,"line_start":98,"line_end":98,"column_start":2,"column_end":13},"name":"InvalidHash","qualname":"::TrieError::InvalidHash","value":"TrieError::InvalidHash(T, Vec<u8>)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1723},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2512,"byte_end":2521,"line_start":87,"line_end":87,"column_start":10,"column_end":19},"name":"TrieError","qualname":"::TrieError","value":"pub enum TrieError<T, E> {\n\n    /// Attempted to create a trie with a state root not in the DB.\n    InvalidStateRoot(T),\n\n    /// Trie item not found in the database,\n    IncompleteDatabase(T),\n\n    /// A value was found in the trie with a nibble key that was not byte-aligned.\n    /// The first parameter is the byte-aligned part of the prefix and the second parameter is the\n    /// remaining nibble.\n    ValueAtIncompleteKey(Vec<u8>, u8),\n\n    /// Corrupt Trie item\n    DecoderError(T, E),\n    InvalidHash(T, Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1736},{"krate":0,"index":1740}],"decl_id":null,"docs":" Trie Errors.","sig":null,"attributes":[{"value":"/ Trie Errors.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2349,"byte_end":2365,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2366,"byte_end":2369,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ These borrow the data within them to avoid excessive copying on every","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2370,"byte_end":2443,"line_start":84,"line_end":84,"column_start":1,"column_end":74}},{"value":"/ trie operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":2444,"byte_end":2463,"line_start":85,"line_end":85,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1252},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4057,"byte_end":4063,"line_start":129,"line_end":129,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"crate::rstd::result::Result<T, Box<TrieError<H, E>>>","parent":null,"children":[],"decl_id":null,"docs":" Trie result type.\n Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.\n","sig":null,"attributes":[{"value":"/ Trie result type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":3933,"byte_end":3954,"line_start":127,"line_end":127,"column_start":1,"column_end":22}},{"value":"/ Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":3955,"byte_end":4047,"line_start":128,"line_end":128,"column_start":1,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":1256},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4194,"byte_end":4202,"line_start":133,"line_end":133,"column_start":10,"column_end":18},"name":"TrieItem","qualname":"::TrieItem","value":"Result<(Vec<u8>, DBValue), U, E>","parent":null,"children":[],"decl_id":null,"docs":" Trie-Item type used for iterators over trie data.\n","sig":null,"attributes":[{"value":"/ Trie-Item type used for iterators over trie data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4131,"byte_end":4184,"line_start":132,"line_end":132,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":1260},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4535,"byte_end":4540,"line_start":140,"line_end":140,"column_start":11,"column_end":16},"name":"Query","qualname":"::Query","value":"Query<H: Hasher>","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264}],"decl_id":null,"docs":" Description of what kind of query will be made to the trie.","sig":null,"attributes":[{"value":"/ Description of what kind of query will be made to the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4250,"byte_end":4313,"line_start":135,"line_end":135,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4314,"byte_end":4317,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is implemented for any &mut recorder (where the query will return","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4318,"byte_end":4392,"line_start":137,"line_end":137,"column_start":1,"column_end":75}},{"value":"/ a DBValue), any function taking raw bytes (where no recording will be made),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4393,"byte_end":4473,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ or any tuple of (&mut Recorder, FnOnce(&[u8]))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4474,"byte_end":4524,"line_start":139,"line_end":139,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1262},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4578,"byte_end":4582,"line_start":142,"line_end":142,"column_start":7,"column_end":11},"name":"Item","qualname":"::Query::Item","value":"type Item;","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Output item.\n","sig":null,"attributes":[{"value":"/ Output item.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4555,"byte_end":4571,"line_start":141,"line_end":141,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4637,"byte_end":4643,"line_start":145,"line_end":145,"column_start":5,"column_end":11},"name":"decode","qualname":"::Query::decode","value":"pub fn decode(Self, &[u8]) -> Self::Item","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Decode a byte-slice into the desired item.\n","sig":null,"attributes":[{"value":"/ Decode a byte-slice into the desired item.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4586,"byte_end":4632,"line_start":144,"line_end":144,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4732,"byte_end":4738,"line_start":148,"line_end":148,"column_start":5,"column_end":11},"name":"record","qualname":"::Query::record","value":"pub fn record(&mut Self, &H::Out, &[u8], u32)","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Record that a node has been passed through.\n","sig":null,"attributes":[{"value":"/ Record that a node has been passed through.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":4680,"byte_end":4727,"line_start":147,"line_end":147,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":1286},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5573,"byte_end":5577,"line_start":173,"line_end":173,"column_start":11,"column_end":15},"name":"Trie","qualname":"::Trie","value":"Trie<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1292},{"krate":0,"index":1296},{"krate":0,"index":1300}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5482,"byte_end":5562,"line_start":172,"line_end":172,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5633,"byte_end":5637,"line_start":175,"line_end":175,"column_start":5,"column_end":9},"name":"root","qualname":"::Trie::root","value":"pub fn root(&Self) -> &TrieHash<L>","parent":{"krate":0,"index":1286},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5596,"byte_end":5628,"line_start":174,"line_end":174,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5691,"byte_end":5699,"line_start":178,"line_end":178,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::Trie::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":1286},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5664,"byte_end":5686,"line_start":177,"line_end":177,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5809,"byte_end":5817,"line_start":181,"line_end":181,"column_start":5,"column_end":13},"name":"contains","qualname":"::Trie::contains","value":"pub fn contains(&Self, &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1286},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5766,"byte_end":5804,"line_start":180,"line_end":180,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5979,"byte_end":5982,"line_start":186,"line_end":186,"column_start":5,"column_end":8},"name":"get","qualname":"::Trie::get","value":"pub fn get<'a, 'key>(&'a Self, &'key [u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":1286},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5922,"byte_end":5974,"line_start":185,"line_end":185,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6262,"byte_end":6270,"line_start":195,"line_end":195,"column_start":5,"column_end":13},"name":"get_with","qualname":"::Trie::get_with","value":"pub fn get_with<'a, 'key, Q: Query<L::Hash>>(&'a Self, &'key [u8], Q)\n-> Result<Option<Q::Item>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":1286},"children":[],"decl_id":null,"docs":" Search for the key with the given query parameter. See the docs of the `Query`\n trait for more details.\n","sig":null,"attributes":[{"value":"/ Search for the key with the given query parameter. See the docs of the `Query`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6146,"byte_end":6228,"line_start":193,"line_end":193,"column_start":2,"column_end":84}},{"value":"/ trait for more details.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6230,"byte_end":6257,"line_start":194,"line_end":194,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6481,"byte_end":6485,"line_start":202,"line_end":202,"column_start":5,"column_end":9},"name":"iter","qualname":"::Trie::iter","value":"pub fn iter<'a>(&'a Self)\n->\n    Result<Box<TrieIterator<L, Item = TrieItem<, TrieHash<L>, CError<L>>> +\n               'a>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1286},"children":[],"decl_id":null,"docs":" Returns a depth-first iterator over the elements of trie.\n","sig":null,"attributes":[{"value":"/ Returns a depth-first iterator over the elements of trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6415,"byte_end":6476,"line_start":201,"line_end":201,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":1302},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6711,"byte_end":6718,"line_start":210,"line_end":210,"column_start":11,"column_end":18},"name":"TrieMut","qualname":"::TrieMut","value":"TrieMut<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6620,"byte_end":6700,"line_start":209,"line_end":209,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6774,"byte_end":6778,"line_start":212,"line_end":212,"column_start":5,"column_end":9},"name":"root","qualname":"::TrieMut::root","value":"pub fn root(&mut Self) -> &TrieHash<L>","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6737,"byte_end":6769,"line_start":211,"line_end":211,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6836,"byte_end":6844,"line_start":215,"line_end":215,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::TrieMut::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6809,"byte_end":6831,"line_start":214,"line_end":214,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6906,"byte_end":6914,"line_start":218,"line_end":218,"column_start":5,"column_end":13},"name":"contains","qualname":"::TrieMut::contains","value":"pub fn contains(&Self, &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":6863,"byte_end":6901,"line_start":217,"line_end":217,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7075,"byte_end":7078,"line_start":223,"line_end":223,"column_start":5,"column_end":8},"name":"get","qualname":"::TrieMut::get","value":"pub fn get<'a, 'key>(&'a Self, &'key [u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7018,"byte_end":7070,"line_start":222,"line_end":222,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7374,"byte_end":7380,"line_start":230,"line_end":230,"column_start":5,"column_end":11},"name":"insert","qualname":"::TrieMut::insert","value":"pub fn insert(&mut Self, &[u8], &[u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":" Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing\n `key` from the trie. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7193,"byte_end":7280,"line_start":228,"line_end":228,"column_start":2,"column_end":89}},{"value":"/ `key` from the trie. Returns the old value associated with this key, if it existed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7282,"byte_end":7369,"line_start":229,"line_end":229,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7638,"byte_end":7644,"line_start":238,"line_end":238,"column_start":5,"column_end":11},"name":"remove","qualname":"::TrieMut::remove","value":"pub fn remove(&mut Self, &[u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":" Remove a `key` from the trie. Equivalent to making it equal to the empty\n value. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Remove a `key` from the trie. Equivalent to making it equal to the empty","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7482,"byte_end":7558,"line_start":236,"line_end":236,"column_start":2,"column_end":78}},{"value":"/ value. Returns the old value associated with this key, if it existed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7560,"byte_end":7633,"line_start":237,"line_end":237,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1313},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7798,"byte_end":7810,"line_start":242,"line_end":242,"column_start":11,"column_end":23},"name":"TrieIterator","qualname":"::TrieIterator","value":"TrieIterator<L: TrieLayout>: Iterator","parent":null,"children":[{"krate":0,"index":1315}],"decl_id":null,"docs":" A trie iterator that also supports random access (`seek()`).\n","sig":null,"attributes":[{"value":"/ A trie iterator that also supports random access (`seek()`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7723,"byte_end":7787,"line_start":241,"line_end":241,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7908,"byte_end":7912,"line_start":244,"line_end":244,"column_start":5,"column_end":9},"name":"seek","qualname":"::TrieIterator::seek","value":"pub fn seek(&mut Self, &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" Position the iterator on the first element with key >= `key`\n","sig":null,"attributes":[{"value":"/ Position the iterator on the first element with key >= `key`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7839,"byte_end":7903,"line_start":243,"line_end":243,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1768},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8105,"byte_end":8112,"line_start":252,"line_end":252,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieSpec::Generic","value":"TrieSpec::Generic","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Generic trie.\n","sig":null,"attributes":[{"value":"/ Generic trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8086,"byte_end":8103,"line_start":251,"line_end":251,"column_start":2,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8133,"byte_end":8139,"line_start":254,"line_end":254,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieSpec::Secure","value":"TrieSpec::Secure","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Secure trie.\n","sig":null,"attributes":[{"value":"/ Secure trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8115,"byte_end":8131,"line_start":253,"line_end":253,"column_start":2,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8178,"byte_end":8181,"line_start":256,"line_end":256,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieSpec::Fat","value":"TrieSpec::Fat","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":"\tSecure trie with fat database.\n","sig":null,"attributes":[{"value":"/\tSecure trie with fat database.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8142,"byte_end":8176,"line_start":255,"line_end":255,"column_start":2,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1767},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8074,"byte_end":8082,"line_start":250,"line_end":250,"column_start":10,"column_end":18},"name":"TrieSpec","qualname":"::TrieSpec","value":"pub enum TrieSpec {\n\n    /// Generic trie.\n    Generic,\n\n    /// Secure trie.\n    Secure,\n\n    ///\tSecure trie with fat database.\n    Fat,\n}","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772}],"decl_id":null,"docs":" Trie types\n","sig":null,"attributes":[{"value":"/ Trie types","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7978,"byte_end":7992,"line_start":247,"line_end":247,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1781},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8322,"byte_end":8333,"line_start":267,"line_end":267,"column_start":12,"column_end":23},"name":"TrieFactory","qualname":"::TrieFactory","value":"TrieFactory {  }","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784}],"decl_id":null,"docs":" Trie factory.\n","sig":null,"attributes":[{"value":"/ Trie factory.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8267,"byte_end":8284,"line_start":265,"line_end":265,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1321},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8553,"byte_end":8560,"line_start":276,"line_end":276,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieKinds::Generic","value":"TrieKinds::Generic(TrieDB)","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" A generic trie db.\n","sig":null,"attributes":[{"value":"/ A generic trie db.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8529,"byte_end":8551,"line_start":275,"line_end":275,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1324},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8602,"byte_end":8608,"line_start":278,"line_end":278,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieKinds::Secure","value":"TrieKinds::Secure(SecTrieDB)","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" A secure trie db.\n","sig":null,"attributes":[{"value":"/ A secure trie db.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8579,"byte_end":8600,"line_start":277,"line_end":277,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1327},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8650,"byte_end":8653,"line_start":280,"line_end":280,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieKinds::Fat","value":"TrieKinds::Fat(FatDB)","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" A fat trie db.\n","sig":null,"attributes":[{"value":"/ A fat trie db.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8630,"byte_end":8648,"line_start":279,"line_end":279,"column_start":2,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1318},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8496,"byte_end":8505,"line_start":274,"line_end":274,"column_start":10,"column_end":19},"name":"TrieKinds","qualname":"::TrieKinds","value":"pub enum TrieKinds<'db, L: TrieLayout> {\n\n    /// A generic trie db.\n    Generic(TrieDB),\n\n    /// A secure trie db.\n    Secure(SecTrieDB),\n\n    /// A fat trie db.\n    Fat(FatDB),\n}","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1327}],"decl_id":null,"docs":" All different kinds of tries.\n This is used to prevent a heap allocation for every created trie.\n","sig":null,"attributes":[{"value":"/ All different kinds of tries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8383,"byte_end":8416,"line_start":272,"line_end":272,"column_start":1,"column_end":34}},{"value":"/ This is used to prevent a heap allocation for every created trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8417,"byte_end":8486,"line_start":273,"line_end":273,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9753,"byte_end":9756,"line_start":330,"line_end":330,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieFactory<L>>::new","value":"pub fn new(TrieSpec, L) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new factory.\n","sig":null,"attributes":[{"value":"/ Creates new factory.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9720,"byte_end":9744,"line_start":329,"line_end":329,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9881,"byte_end":9889,"line_start":335,"line_end":335,"column_start":9,"column_end":17},"name":"readonly","qualname":"<TrieFactory<L>>::readonly","value":"pub fn readonly(&Self, &'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<TrieKinds, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new immutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new immutable instance of Trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9830,"byte_end":9872,"line_start":334,"line_end":334,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":10313,"byte_end":10319,"line_start":348,"line_end":348,"column_start":9,"column_end":15},"name":"create","qualname":"<TrieFactory<L>>::create","value":"pub fn create(&Self, &'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Box<TrieMut<L> + 'db>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of Trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":10264,"byte_end":10304,"line_start":347,"line_end":347,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":10730,"byte_end":10743,"line_start":361,"line_end":361,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieFactory<L>>::from_existing","value":"pub fn from_existing(&Self, &'db mut HashDB<L::Hash, DBValue>,\n                     &'db mut TrieHash<L>)\n-> Result<Box<TrieMut<L> + 'db>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of trie and check for errors.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of trie and check for errors.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":10660,"byte_end":10721,"line_start":360,"line_end":360,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11244,"byte_end":11250,"line_start":374,"line_end":374,"column_start":9,"column_end":15},"name":"is_fat","qualname":"<TrieFactory<L>>::is_fat","value":"pub fn is_fat(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the trie DB is a fat DB (allows enumeration of keys).\n","sig":null,"attributes":[{"value":"/ Returns true iff the trie DB is a fat DB (allows enumeration of keys).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11161,"byte_end":11235,"line_start":373,"line_end":373,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":1351},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11438,"byte_end":11448,"line_start":380,"line_end":380,"column_start":11,"column_end":21},"name":"TrieLayout","qualname":"::TrieLayout","value":"TrieLayout","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355}],"decl_id":null,"docs":" Trait with definition of trie layout.\n Contains all associated trait needed for\n a trie definition or implementation.\n","sig":null,"attributes":[{"value":"/ Trait with definition of trie layout.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11300,"byte_end":11341,"line_start":377,"line_end":377,"column_start":1,"column_end":42}},{"value":"/ Contains all associated trait needed for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11342,"byte_end":11386,"line_start":378,"line_end":378,"column_start":1,"column_end":45}},{"value":"/ a trie definition or implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11387,"byte_end":11427,"line_start":379,"line_end":379,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":1352},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11613,"byte_end":11626,"line_start":384,"line_end":384,"column_start":8,"column_end":21},"name":"USE_EXTENSION","qualname":"::TrieLayout::USE_EXTENSION","value":"bool","parent":{"krate":0,"index":1351},"children":[],"decl_id":null,"docs":" If true, the trie will use extension nodes and\n no partial in branch, if false the trie will only\n use branch and node with partials in both.\n","sig":null,"attributes":[{"value":"/ If true, the trie will use extension nodes and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11452,"byte_end":11502,"line_start":381,"line_end":381,"column_start":2,"column_end":52}},{"value":"/ no partial in branch, if false the trie will only","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11504,"byte_end":11557,"line_start":382,"line_end":382,"column_start":2,"column_end":55}},{"value":"/ use branch and node with partials in both.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11559,"byte_end":11605,"line_start":383,"line_end":383,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1353},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11705,"byte_end":11716,"line_start":386,"line_end":386,"column_start":8,"column_end":19},"name":"ALLOW_EMPTY","qualname":"::TrieLayout::ALLOW_EMPTY","value":"bool","parent":{"krate":0,"index":1351},"children":[],"decl_id":null,"docs":" If true, the trie will allow empty values into `TrieDBMut`\n","sig":null,"attributes":[{"value":"/ If true, the trie will allow empty values into `TrieDBMut`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11635,"byte_end":11697,"line_start":385,"line_end":385,"column_start":2,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1354},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11772,"byte_end":11776,"line_start":388,"line_end":388,"column_start":7,"column_end":11},"name":"Hash","qualname":"::TrieLayout::Hash","value":"type Hash: Hasher;","parent":{"krate":0,"index":1351},"children":[],"decl_id":null,"docs":" Hasher to use for this trie.\n","sig":null,"attributes":[{"value":"/ Hasher to use for this trie.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11733,"byte_end":11765,"line_start":387,"line_end":387,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1355},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11850,"byte_end":11855,"line_start":390,"line_end":390,"column_start":7,"column_end":12},"name":"Codec","qualname":"::TrieLayout::Codec","value":"type Codec: NodeCodec<HashOut=<Self::Hash as Hasher>::Out>;","parent":{"krate":0,"index":1351},"children":[],"decl_id":null,"docs":" Codec to use (needs to match hasher and nibble ops).\n","sig":null,"attributes":[{"value":"/ Codec to use (needs to match hasher and nibble ops).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11787,"byte_end":11843,"line_start":389,"line_end":389,"column_start":2,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1356},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12090,"byte_end":12107,"line_start":396,"line_end":396,"column_start":11,"column_end":28},"name":"TrieConfiguration","qualname":"::TrieConfiguration","value":"TrieConfiguration: Sized + TrieLayout","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1362},{"krate":0,"index":1366},{"krate":0,"index":1370},{"krate":0,"index":1371}],"decl_id":null,"docs":" This trait associates a trie definition with preferred methods.\n It also contains own default implementations and can be\n used to allow switching implementation.\n","sig":null,"attributes":[{"value":"/ This trait associates a trie definition with preferred methods.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11908,"byte_end":11975,"line_start":393,"line_end":393,"column_start":1,"column_end":68}},{"value":"/ It also contains own default implementations and can be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":11976,"byte_end":12035,"line_start":394,"line_end":394,"column_start":1,"column_end":60}},{"value":"/ used to allow switching implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12036,"byte_end":12079,"line_start":395,"line_end":395,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12215,"byte_end":12225,"line_start":398,"line_end":398,"column_start":5,"column_end":15},"name":"trie_build","qualname":"::TrieConfiguration::trie_build","value":"pub fn trie_build<DB, I, A, B>(&mut DB, I) -> <Self::Hash as Hasher>::Out\nwhere DB: HashDB<Self::Hash, usize>, I: IntoIterator<Item = (A, B)>,\nA: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Operation to build a trie db from its ordered iterator over its key/values.\n","sig":null,"attributes":[{"value":"/ Operation to build a trie db from its ordered iterator over its key/values.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12131,"byte_end":12210,"line_start":397,"line_end":397,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12612,"byte_end":12621,"line_start":409,"line_end":409,"column_start":5,"column_end":14},"name":"trie_root","qualname":"::TrieConfiguration::trie_root","value":"pub fn trie_root<I, A, B>(I) -> <Self::Hash as Hasher>::Out where\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Determines a trie root given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root given its ordered contents, closed form.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12540,"byte_end":12607,"line_start":408,"line_end":408,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12987,"byte_end":13005,"line_start":419,"line_end":419,"column_start":5,"column_end":23},"name":"trie_root_unhashed","qualname":"::TrieConfiguration::trie_root_unhashed","value":"pub fn trie_root_unhashed<I, A, B>(I) -> Vec<u8> where I: IntoIterator<Item =\n(A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Determines a trie root node's data given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root node's data given its ordered contents, closed form.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12903,"byte_end":12982,"line_start":418,"line_end":418,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13358,"byte_end":13370,"line_start":430,"line_end":430,"column_start":5,"column_end":17},"name":"encode_index","qualname":"::TrieConfiguration::encode_index","value":"pub fn encode_index(u32) -> Vec<u8>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Encoding of index as a key (when reusing general trie for\n indexed trie).\n","sig":null,"attributes":[{"value":"/ Encoding of index as a key (when reusing general trie for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13272,"byte_end":13333,"line_start":428,"line_end":428,"column_start":2,"column_end":63}},{"value":"/ indexed trie).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13335,"byte_end":13353,"line_start":429,"line_end":429,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13595,"byte_end":13612,"line_start":436,"line_end":436,"column_start":5,"column_end":22},"name":"ordered_trie_root","qualname":"::TrieConfiguration::ordered_trie_root","value":"pub fn ordered_trie_root<I, A>(I) -> <Self::Hash as Hasher>::Out where\nI: IntoIterator<Item = A>, A: AsRef<[u8]>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" A trie root formed from the items, with keys attached according to their\n compact-encoded index (using `parity-codec` crate).\n","sig":null,"attributes":[{"value":"/ A trie root formed from the items, with keys attached according to their","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13457,"byte_end":13533,"line_start":434,"line_end":434,"column_start":2,"column_end":78}},{"value":"/ compact-encoded index (using `parity-codec` crate).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13535,"byte_end":13590,"line_start":435,"line_end":435,"column_start":2,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1375},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13911,"byte_end":13919,"line_start":450,"line_end":450,"column_start":10,"column_end":18},"name":"TrieHash","qualname":"::TrieHash","value":"<<L as TrieLayout>::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to hasher hash output type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to hasher hash output type from a `TrieLayout`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13835,"byte_end":13901,"line_start":449,"line_end":449,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1377},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":14055,"byte_end":14061,"line_start":452,"line_end":452,"column_start":10,"column_end":16},"name":"CError","qualname":"::CError","value":"<<L as TrieLayout>::Codec as NodeCodec>::Error","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":13967,"byte_end":14045,"line_start":451,"line_end":451,"column_start":1,"column_end":79}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16694,"byte_end":16708,"line_start":68,"line_end":68,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17538,"byte_end":17553,"line_start":89,"line_end":89,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19521,"byte_end":19529,"line_start":146,"line_end":146,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21147,"byte_end":21156,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/generate.rs","byte_start":25710,"byte_end":25720,"line_start":47,"line_end":47,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42346,"byte_end":42351,"line_start":54,"line_end":54,"column_start":72,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":43549,"byte_end":43554,"line_start":88,"line_end":88,"column_start":82,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":44328,"byte_end":44338,"line_start":112,"line_end":112,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57370,"byte_end":57376,"line_start":60,"line_end":60,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":59334,"byte_end":59340,"line_start":118,"line_end":118,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":60177,"byte_end":60195,"line_start":161,"line_end":161,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":62834,"byte_end":62840,"line_start":247,"line_end":247,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63378,"byte_end":63392,"line_start":269,"line_end":269,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63934,"byte_end":63948,"line_start":288,"line_end":288,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":64182,"byte_end":64196,"line_start":295,"line_end":295,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":66812,"byte_end":66822,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":68118,"byte_end":68123,"line_start":91,"line_end":91,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":68353,"byte_end":68357,"line_start":102,"line_end":102,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":68994,"byte_end":68998,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":421},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":73803,"byte_end":73815,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":74691,"byte_end":74705,"line_start":314,"line_end":314,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":75552,"byte_end":75563,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76300,"byte_end":76311,"line_start":376,"line_end":376,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77952,"byte_end":77961,"line_start":428,"line_end":428,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":112663,"byte_end":112672,"line_start":1507,"line_end":1507,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":114622,"byte_end":114631,"line_start":1585,"line_end":1585,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117098,"byte_end":117107,"line_start":30,"line_end":30,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117830,"byte_end":117839,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119471,"byte_end":119483,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":120418,"byte_end":120430,"line_start":57,"line_end":57,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122297,"byte_end":122305,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122375,"byte_end":122383,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124179,"byte_end":124184,"line_start":32,"line_end":32,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124705,"byte_end":124710,"line_start":50,"line_end":50,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125545,"byte_end":125558,"line_start":85,"line_end":85,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125814,"byte_end":125827,"line_start":98,"line_end":98,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":126050,"byte_end":126063,"line_start":108,"line_end":108,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127499,"byte_end":127507,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":128440,"byte_end":128448,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":131657,"byte_end":131667,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140163,"byte_end":140174,"line_start":332,"line_end":332,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140375,"byte_end":140386,"line_start":339,"line_end":339,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141102,"byte_end":141110,"line_start":368,"line_end":368,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141253,"byte_end":141261,"line_start":374,"line_end":374,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141967,"byte_end":141983,"line_start":403,"line_end":403,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142316,"byte_end":142329,"line_start":419,"line_end":419,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142501,"byte_end":142514,"line_start":426,"line_end":426,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":143275,"byte_end":143291,"line_start":452,"line_end":452,"column_start":60,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145031,"byte_end":145036,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145929,"byte_end":145947,"line_start":64,"line_end":64,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":146618,"byte_end":146636,"line_start":91,"line_end":91,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":151046,"byte_end":151064,"line_start":249,"line_end":249,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":151237,"byte_end":151255,"line_start":259,"line_end":259,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156382,"byte_end":156388,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165346,"byte_end":165355,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165412,"byte_end":165421,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":171155,"byte_end":171164,"line_start":227,"line_end":227,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":173957,"byte_end":173976,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174161,"byte_end":174172,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180102,"byte_end":180113,"line_start":234,"line_end":234,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180211,"byte_end":180222,"line_start":240,"line_end":240,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180341,"byte_end":180352,"line_start":246,"line_end":246,"column_start":17,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180386,"byte_end":180397,"line_start":248,"line_end":248,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180508,"byte_end":180519,"line_start":254,"line_end":254,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180907,"byte_end":180918,"line_start":270,"line_end":270,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":185414,"byte_end":185429,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":187564,"byte_end":187579,"line_start":97,"line_end":97,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188211,"byte_end":188226,"line_start":123,"line_end":123,"column_start":17,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188259,"byte_end":188274,"line_start":125,"line_end":125,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188387,"byte_end":188402,"line_start":131,"line_end":131,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188529,"byte_end":188544,"line_start":138,"line_end":138,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":196527,"byte_end":196544,"line_start":53,"line_end":53,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":204243,"byte_end":204260,"line_start":263,"line_end":263,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":3043,"byte_end":3052,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":3883,"byte_end":3892,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5090,"byte_end":5091,"line_start":159,"line_end":159,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8203,"byte_end":8211,"line_start":259,"line_end":259,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9035,"byte_end":9044,"line_start":294,"line_end":294,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9674,"byte_end":9685,"line_start":325,"line_end":325,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1307,"byte_end":1311,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1321,"byte_end":1326,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1336,"byte_end":1342,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":237}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1352,"byte_end":1361,"line_start":46,"line_end":46,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":333}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1371,"byte_end":1380,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":549}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1390,"byte_end":1402,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":586}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":1412,"byte_end":1420,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":620}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":16694,"byte_end":16708,"line_start":68,"line_end":68,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":17538,"byte_end":17553,"line_start":89,"line_end":89,"column_start":6,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":19521,"byte_end":19529,"line_start":146,"line_end":146,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node.rs","byte_start":21147,"byte_end":21156,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/generate.rs","byte_start":25710,"byte_end":25720,"line_start":47,"line_end":47,"column_start":24,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":42346,"byte_end":42351,"line_start":54,"line_end":54,"column_start":72,"column_end":77},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1530},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":43549,"byte_end":43554,"line_start":88,"line_end":88,"column_start":82,"column_end":87},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1530},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/proof/verify.rs","byte_start":44328,"byte_end":44338,"line_start":112,"line_end":112,"column_start":24,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":57370,"byte_end":57376,"line_start":60,"line_end":60,"column_start":14,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":59334,"byte_end":59340,"line_start":118,"line_end":118,"column_start":26,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":266},"to":{"krate":0,"index":1286}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":60177,"byte_end":60195,"line_start":161,"line_end":161,"column_start":33,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":292},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":62834,"byte_end":62840,"line_start":247,"line_end":247,"column_start":29,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":266},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63378,"byte_end":63392,"line_start":269,"line_end":269,"column_start":25,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":63934,"byte_end":63948,"line_start":288,"line_end":288,"column_start":45,"column_end":59},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":315},"to":{"krate":0,"index":1313}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedb.rs","byte_start":64182,"byte_end":64196,"line_start":295,"line_end":295,"column_start":38,"column_end":52},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":315},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":66812,"byte_end":66822,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1582},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":68118,"byte_end":68123,"line_start":91,"line_end":91,"column_start":20,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":68353,"byte_end":68357,"line_start":102,"line_end":102,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":68994,"byte_end":68998,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":73803,"byte_end":73815,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":74691,"byte_end":74705,"line_start":314,"line_end":314,"column_start":49,"column_end":63},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1593},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":75552,"byte_end":75563,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":76300,"byte_end":76311,"line_start":376,"line_end":376,"column_start":42,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":477},"to":{"krate":2,"index":2314}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":77952,"byte_end":77961,"line_start":428,"line_end":428,"column_start":13,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":112663,"byte_end":112672,"line_start":1507,"line_end":1507,"column_start":28,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":491},"to":{"krate":0,"index":1302}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/triedbmut.rs","byte_start":114622,"byte_end":114631,"line_start":1585,"line_end":1585,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":491},"to":{"krate":2,"index":2257}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117098,"byte_end":117107,"line_start":30,"line_end":30,"column_start":14,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedb.rs","byte_start":117830,"byte_end":117839,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":565},"to":{"krate":0,"index":1286}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":119471,"byte_end":119483,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/sectriedbmut.rs","byte_start":120418,"byte_end":120430,"line_start":57,"line_end":57,"column_start":29,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":598},"to":{"krate":0,"index":1302}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122297,"byte_end":122305,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1652},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/recorder.rs","byte_start":122375,"byte_end":122383,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124179,"byte_end":124184,"line_start":32,"line_end":32,"column_start":14,"column_end":19},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":124705,"byte_end":124710,"line_start":50,"line_end":50,"column_start":26,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":648},"to":{"krate":0,"index":1286}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125545,"byte_end":125558,"line_start":85,"line_end":85,"column_start":14,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":125814,"byte_end":125827,"line_start":98,"line_end":98,"column_start":34,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":669},"to":{"krate":0,"index":1313}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdb.rs","byte_start":126050,"byte_end":126063,"line_start":108,"line_end":108,"column_start":27,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":669},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":127499,"byte_end":127507,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/fatdbmut.rs","byte_start":128440,"byte_end":128448,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":702},"to":{"krate":0,"index":1302}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":131657,"byte_end":131667,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140163,"byte_end":140174,"line_start":332,"line_end":332,"column_start":24,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":140375,"byte_end":140386,"line_start":339,"line_end":339,"column_start":6,"column_end":17},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":791},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141102,"byte_end":141110,"line_start":368,"line_end":368,"column_start":25,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":813},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141253,"byte_end":141261,"line_start":374,"line_end":374,"column_start":60,"column_end":68},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":813},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":141967,"byte_end":141983,"line_start":403,"line_end":403,"column_start":21,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142316,"byte_end":142329,"line_start":419,"line_end":419,"column_start":25,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":832},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":142501,"byte_end":142514,"line_start":426,"line_end":426,"column_start":60,"column_end":73},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iter_build.rs","byte_start":143275,"byte_end":143291,"line_start":452,"line_end":452,"column_start":60,"column_end":76},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":825},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145031,"byte_end":145036,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":145929,"byte_end":145947,"line_start":64,"line_end":64,"column_start":25,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":146618,"byte_end":146636,"line_start":91,"line_end":91,"column_start":25,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":151046,"byte_end":151064,"line_start":249,"line_end":249,"column_start":45,"column_end":63},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":874},"to":{"krate":0,"index":1313}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/iterator.rs","byte_start":151237,"byte_end":151255,"line_start":259,"line_end":259,"column_start":38,"column_end":56},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lookup.rs","byte_start":156382,"byte_end":156388,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165346,"byte_end":165355,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1700},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":165412,"byte_end":165421,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibblevec.rs","byte_start":171155,"byte_end":171164,"line_start":227,"line_end":227,"column_start":36,"column_end":45},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1700},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":173957,"byte_end":173976,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":174161,"byte_end":174172,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180102,"byte_end":180113,"line_start":234,"line_end":234,"column_start":28,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1953}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180211,"byte_end":180222,"line_start":240,"line_end":240,"column_start":24,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1764}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180341,"byte_end":180352,"line_start":246,"line_end":246,"column_start":17,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180386,"byte_end":180397,"line_start":248,"line_end":248,"column_start":25,"column_end":36},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1801}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180508,"byte_end":180519,"line_start":254,"line_end":254,"column_start":18,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/nibbleslice.rs","byte_start":180907,"byte_end":180918,"line_start":270,"line_end":270,"column_start":25,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":185414,"byte_end":185429,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":187564,"byte_end":187579,"line_start":97,"line_end":97,"column_start":24,"column_end":39},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1764}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188211,"byte_end":188226,"line_start":123,"line_end":123,"column_start":17,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188259,"byte_end":188274,"line_start":125,"line_end":125,"column_start":25,"column_end":40},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1801}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188387,"byte_end":188402,"line_start":131,"line_end":131,"column_start":18,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/nibble/leftnibbleslice.rs","byte_start":188529,"byte_end":188544,"line_start":138,"line_end":138,"column_start":30,"column_end":45},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/node_codec.rs","byte_start":192126,"byte_end":192131,"line_start":32,"line_end":32,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":196527,"byte_end":196544,"line_start":53,"line_end":53,"column_start":20,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/trie_codec.rs","byte_start":204243,"byte_end":204260,"line_start":263,"line_end":263,"column_start":24,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":3043,"byte_end":3052,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1723},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":3883,"byte_end":3892,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1723},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":5090,"byte_end":5091,"line_start":159,"line_end":159,"column_start":36,"column_end":37},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1272},"to":{"krate":0,"index":1260}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":7827,"byte_end":7835,"line_start":242,"line_end":242,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":5283},"to":{"krate":0,"index":1313}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":8203,"byte_end":8211,"line_start":259,"line_end":259,"column_start":18,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1767},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9035,"byte_end":9044,"line_start":294,"line_end":294,"column_start":38,"column_end":47},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1318},"to":{"krate":0,"index":1286}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":9674,"byte_end":9685,"line_start":325,"line_end":325,"column_start":14,"column_end":25},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12109,"byte_end":12114,"line_start":396,"line_end":396,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":1356}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.2/src/lib.rs","byte_start":12117,"byte_end":12127,"line_start":396,"line_end":396,"column_start":38,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1351},"to":{"krate":0,"index":1356}}]}