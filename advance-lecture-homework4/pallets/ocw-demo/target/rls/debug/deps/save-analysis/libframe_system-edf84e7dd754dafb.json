{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","frame_system","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=edf84e7dd754dafb","-C","extra-filename=-edf84e7dd754dafb","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps","--extern","frame_support=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libframe_support-03d568ed12cbb219.rmeta","--extern","impl_trait_for_tuples=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libimpl_trait_for_tuples-bcee771c5d5cb357.so","--extern","codec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libparity_scale_codec-c2a3c300da64cba4.rmeta","--extern","serde=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libserde-80263e68ba500d78.rmeta","--extern","sp_core=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libsp_core-717447d3c8b452e7.rmeta","--extern","sp_io=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libsp_io-6d638056bcc5e815.rmeta","--extern","sp_runtime=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libsp_runtime-da66cb9221848145.rmeta","--extern","sp_std=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libsp_std-e8e779e008c5c2c6.rmeta","--extern","sp_version=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libsp_version-4932c345c050c894.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libframe_system-edf84e7dd754dafb.rmeta"},"prelude":{"crate_id":{"name":"frame_system","disambiguator":[3587540443456070248,2611456031183558869]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":18,"id":{"name":"serde","disambiguator":[18094986483354249175,15403000118412511765]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":19,"id":{"name":"serde_derive","disambiguator":[2422799003874411447,4301428410593763920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":20,"id":{"name":"sp_std","disambiguator":[7356154292131214206,15539128417196248828]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":21,"id":{"name":"sp_version","disambiguator":[2120611964271652568,11843296012676663699]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":22,"id":{"name":"parity_scale_codec","disambiguator":[16439007312830197035,13769093477079864056]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":23,"id":{"name":"parity_scale_codec_derive","disambiguator":[15916895702609288415,13390909414312069258]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":24,"id":{"name":"arrayvec","disambiguator":[9711399210076819589,6533224003713073282]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":25,"id":{"name":"byte_slice_cast","disambiguator":[7351640255773626293,2315590138104183949]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":26,"id":{"name":"sp_runtime","disambiguator":[16022351216222556352,16416952812497401383]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":27,"id":{"name":"paste","disambiguator":[15401685209398254990,873450930854060675]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":28,"id":{"name":"proc_macro_hack","disambiguator":[16105205298844134494,461428951662562663]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":29,"id":{"name":"paste_impl","disambiguator":[11772883914023517439,10129306859390362089]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":30,"id":{"name":"sp_application_crypto","disambiguator":[12835149352766628184,13192684411583912951]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":31,"id":{"name":"sp_core","disambiguator":[11528989304794749901,4991667551486174003]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":32,"id":{"name":"sp_runtime_interface","disambiguator":[12255499159526350672,1465949469223168246]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":33,"id":{"name":"sp_wasm_interface","disambiguator":[1572342640069422977,5885890102663370953]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":34,"id":{"name":"impl_trait_for_tuples","disambiguator":[13508714756144950212,10399417239549626737]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":35,"id":{"name":"wasmi","disambiguator":[14702682962039512728,8205603541115655459]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":36,"id":{"name":"memory_units","disambiguator":[2681920765984350785,12479645465886095865]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":37,"id":{"name":"parity_wasm","disambiguator":[3627318675752641491,16087573038623804516]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":38,"id":{"name":"wasmi_validation","disambiguator":[10122444132145811748,13686239439309676495]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":39,"id":{"name":"num_rational","disambiguator":[14874358685442605711,14454857550384661125]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":40,"id":{"name":"num_bigint","disambiguator":[10424519725353920175,15970225686228915190]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":41,"id":{"name":"num_integer","disambiguator":[7545622164281545846,2648898713402766561]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":42,"id":{"name":"num_traits","disambiguator":[215404550585587115,5285806180049352428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":43,"id":{"name":"libc","disambiguator":[6571333170903906260,2103687221578517612]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":44,"id":{"name":"sp_tracing","disambiguator":[126940985002760439,9833769351350342315]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":45,"id":{"name":"tracing_core","disambiguator":[11099356479621910520,18239274797054692367]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":46,"id":{"name":"lazy_static","disambiguator":[16863586403248268720,14388819080293591203]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":47,"id":{"name":"tracing","disambiguator":[3149344748273194146,14186679869154291241]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":48,"id":{"name":"cfg_if","disambiguator":[7841183052640537120,5700978676433312502]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":49,"id":{"name":"tracing_attributes","disambiguator":[7168521433842290992,2127477278266717051]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":50,"id":{"name":"pin_project_lite","disambiguator":[11050117765846224188,12097442257352640106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":51,"id":{"name":"tracing_subscriber","disambiguator":[9358978854053975941,10302906392016292032]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":52,"id":{"name":"regex","disambiguator":[14166398965641423822,8934033390557199130]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":53,"id":{"name":"aho_corasick","disambiguator":[15910827016742496248,14514165624868714725]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":54,"id":{"name":"memchr","disambiguator":[8299827481518300842,8423653226847344489]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":55,"id":{"name":"regex_syntax","disambiguator":[10387838999179421385,14884883596696298333]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":56,"id":{"name":"thread_local","disambiguator":[972737615355812521,3494330021733074280]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":57,"id":{"name":"matchers","disambiguator":[16148120748263327968,10793795200785214139]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":58,"id":{"name":"regex_automata","disambiguator":[6713063222348330078,15962450321991702012]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":59,"id":{"name":"byteorder","disambiguator":[14496735423178217807,13585885797689701047]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":60,"id":{"name":"ansi_term","disambiguator":[18134670208497847193,6469936381989789516]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":61,"id":{"name":"tracing_log","disambiguator":[12555983769818244310,6947546561298633655]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":62,"id":{"name":"log","disambiguator":[7636163145545913312,4986669806278621293]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":63,"id":{"name":"cfg_if","disambiguator":[502369263979125416,6128217184247387066]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":64,"id":{"name":"serde_json","disambiguator":[13564730519325168607,8931654559015479844]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":65,"id":{"name":"itoa","disambiguator":[708245801620839046,10644891861074126777]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":66,"id":{"name":"ryu","disambiguator":[2595139073293063990,3633285781182786758]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":67,"id":{"name":"tracing_serde","disambiguator":[11704797471514300989,6477851010748340264]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":68,"id":{"name":"sharded_slab","disambiguator":[1434945501934548753,1609764728048645911]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":69,"id":{"name":"smallvec","disambiguator":[2602844660267825758,15179553114549196714]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":70,"id":{"name":"chrono","disambiguator":[1398100316059925436,10467824243359959529]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":71,"id":{"name":"time","disambiguator":[8823501580382950712,2504982711049837973]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":72,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[13822519134176450310,2862860596345121761]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":73,"id":{"name":"sp_externalities","disambiguator":[18150108195161110747,13250564693672382873]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":74,"id":{"name":"sp_storage","disambiguator":[12878955236357233593,16822974782930621063]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":75,"id":{"name":"sp_debug_derive","disambiguator":[11752057424767612336,6988741196861483299]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":76,"id":{"name":"ref_cast","disambiguator":[17238424032127906489,14681179534522775997]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":77,"id":{"name":"ref_cast_impl","disambiguator":[4857299677253861727,8902270623010207562]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":78,"id":{"name":"impl_serde","disambiguator":[6223019066819668752,3300984703168818873]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":79,"id":{"name":"environmental","disambiguator":[17937490940284361027,13093274495722560157]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":80,"id":{"name":"primitive_types","disambiguator":[6962691650698255454,13234617421742094078]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":81,"id":{"name":"fixed_hash","disambiguator":[10245915055372472413,1069574987168551768]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":82,"id":{"name":"static_assertions","disambiguator":[3780011359165158122,3262507017755003872]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":83,"id":{"name":"rustc_hex","disambiguator":[10677294477045725496,7865879812543119472]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":84,"id":{"name":"rand","disambiguator":[7383846236653092870,5177629652404358757]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":85,"id":{"name":"rand_core","disambiguator":[7787386706198440185,12678578198977233203]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":86,"id":{"name":"getrandom","disambiguator":[12258613803940040387,911838537080231532]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":87,"id":{"name":"rand_chacha","disambiguator":[4434170198255513034,5056478396886919284]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":88,"id":{"name":"ppv_lite86","disambiguator":[4955318928114684575,7768061473571892432]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":89,"id":{"name":"rand_pcg","disambiguator":[16660534335728405525,7074470424998610614]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":90,"id":{"name":"uint","disambiguator":[16896315795860882296,16425098083545408739]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":91,"id":{"name":"crunchy","disambiguator":[8074030940710953961,6579732958665489341]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":92,"id":{"name":"impl_codec","disambiguator":[11443448416482552248,8414137674207687421]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":93,"id":{"name":"blake2_rfc","disambiguator":[16318291045264156809,15238637185383600405]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":94,"id":{"name":"arrayvec","disambiguator":[13122490319398419543,2245831403817998155]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":95,"id":{"name":"nodrop","disambiguator":[15847319047609925228,7892947817709334700]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":96,"id":{"name":"constant_time_eq","disambiguator":[4123012020743147552,17233470839404695501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":97,"id":{"name":"sha2","disambiguator":[2453755181374717418,14347587692546718153]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":98,"id":{"name":"block_buffer","disambiguator":[16942864271414254883,5806726910624965455]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":99,"id":{"name":"block_padding","disambiguator":[6536457226507187524,13096456614147870598]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":100,"id":{"name":"byte_tools","disambiguator":[4563776192090798664,13975107662144777646]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":101,"id":{"name":"generic_array","disambiguator":[10217328049382864786,4581712530308178966]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":102,"id":{"name":"typenum","disambiguator":[2877625186163250866,4188862493781366168]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":103,"id":{"name":"fake_simd","disambiguator":[8529024942259881634,1036883736573479363]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":104,"id":{"name":"opaque_debug","disambiguator":[14296233586290889095,7185983566499738172]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":105,"id":{"name":"digest","disambiguator":[10339741361097660047,3253664700456863542]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":106,"id":{"name":"tiny_keccak","disambiguator":[8951611112105442366,1965224039660394079]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":107,"id":{"name":"twox_hash","disambiguator":[7304964477320420634,14353450951517215289]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":108,"id":{"name":"parking_lot","disambiguator":[4673953683555930918,2566291569203134280]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":109,"id":{"name":"lock_api","disambiguator":[12216129644845520116,17168985521050561292]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":110,"id":{"name":"scopeguard","disambiguator":[10393400622481042710,15774391541485536781]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":111,"id":{"name":"parking_lot_core","disambiguator":[9723357634030298779,6709165033563235635]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":112,"id":{"name":"base58","disambiguator":[1021050924381740148,14694021983045483675]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":113,"id":{"name":"zeroize","disambiguator":[12293724131559688162,14607591128595310952]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":114,"id":{"name":"zeroize_derive","disambiguator":[2502408763374724958,13277304647653553031]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":115,"id":{"name":"secrecy","disambiguator":[17095926779506074658,7537668124013333220]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":116,"id":{"name":"ed25519_dalek","disambiguator":[15558391115965967113,3378155016804440964]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":117,"id":{"name":"ed25519","disambiguator":[17902604484033039668,17597880322881036383]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":118,"id":{"name":"signature","disambiguator":[11156352833949250189,12745597200273491384]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":119,"id":{"name":"curve25519_dalek","disambiguator":[2809248406966777197,8813816561018099626]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":120,"id":{"name":"digest","disambiguator":[7153347457544459114,4850652739674458903]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":121,"id":{"name":"generic_array","disambiguator":[785913366860281496,3566111910551851268]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":122,"id":{"name":"subtle","disambiguator":[17342818449220861691,9110388592586064331]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":123,"id":{"name":"sha2","disambiguator":[1377922229528131517,491842461206503580]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":124,"id":{"name":"block_buffer","disambiguator":[5863490318768043264,9384554601350983024]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":125,"id":{"name":"opaque_debug","disambiguator":[5955724391880543345,12225655711726523850]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":126,"id":{"name":"cpuid_bool","disambiguator":[3944863459372053080,10012978824416111698]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":127,"id":{"name":"substrate_bip39","disambiguator":[17869869569785452858,17634889153902495303]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":128,"id":{"name":"hmac","disambiguator":[13299399138808770209,8486335613303949460]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":129,"id":{"name":"crypto_mac","disambiguator":[5021103083656845048,9272942338553678022]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":130,"id":{"name":"subtle","disambiguator":[2461963045928777698,9783036260425898804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":131,"id":{"name":"pbkdf2","disambiguator":[1585251910033992458,4658055053388768448]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":132,"id":{"name":"schnorrkel","disambiguator":[16756806575561678970,14458639493351552668]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":133,"id":{"name":"arrayref","disambiguator":[12864533597306545026,8294063698849415262]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":134,"id":{"name":"curve25519_dalek","disambiguator":[6977723647751213875,9340163827551043317]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":135,"id":{"name":"merlin","disambiguator":[9377376087280658574,8799116673561925753]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":136,"id":{"name":"keccak","disambiguator":[7922441978553466502,10628234470639316489]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":137,"id":{"name":"bip39","disambiguator":[1314823592052820078,5424826910968609762]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":138,"id":{"name":"failure","disambiguator":[14582756781862167549,11010751447158768529]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":139,"id":{"name":"failure_derive","disambiguator":[16915148327015633678,6325708317200431250]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":140,"id":{"name":"backtrace","disambiguator":[9482193228311631792,18299589283485015896]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":141,"id":{"name":"rustc_demangle","disambiguator":[4050923033623787977,6585868120045361612]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":142,"id":{"name":"addr2line","disambiguator":[3660529096934478798,18165035533582110625]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":143,"id":{"name":"gimli","disambiguator":[467126543121056434,10447895090847301584]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":144,"id":{"name":"object","disambiguator":[12217760478832808573,5860930654909093820]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":145,"id":{"name":"miniz_oxide","disambiguator":[17514238117289429065,16538556448136967903]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":146,"id":{"name":"adler","disambiguator":[10300648466069169448,3652155315817441043]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":147,"id":{"name":"rustc_hash","disambiguator":[2899680881299965521,3351650253772854689]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":148,"id":{"name":"once_cell","disambiguator":[14043164444755290385,2267165041750352920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":149,"id":{"name":"parking_lot","disambiguator":[13413556939081280175,6595608378640516759]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":150,"id":{"name":"instant","disambiguator":[16657590810520803667,6600116491891240348]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":151,"id":{"name":"lock_api","disambiguator":[1370039747192521928,13370481355962836312]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":152,"id":{"name":"parking_lot_core","disambiguator":[6910326554005380636,13334944336695677100]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":153,"id":{"name":"unicode_normalization","disambiguator":[5195362221549747439,14521615614827495836]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":154,"id":{"name":"tinyvec","disambiguator":[14392653114268736918,7149426386502746538]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":155,"id":{"name":"tinyvec_macros","disambiguator":[12069190721701906036,1989476166457901195]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":156,"id":{"name":"secp256k1","disambiguator":[7408403086072926232,10619138547561338344]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":157,"id":{"name":"hmac_drbg","disambiguator":[2354928866440715200,11965278983472350123]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":158,"id":{"name":"hash_db","disambiguator":[1694494872242499477,7973777796579231756]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":159,"id":{"name":"hash256_std_hasher","disambiguator":[6334138255241792746,1846295599312392070]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":160,"id":{"name":"parity_util_mem","disambiguator":[3040824742387538142,13160465756699134223]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":161,"id":{"name":"parity_util_mem_derive","disambiguator":[18323117741153977268,3575845138050348775]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":162,"id":{"name":"hashbrown","disambiguator":[8514644902414888020,14821523315265927041]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":163,"id":{"name":"ahash","disambiguator":[11645240038511292298,1901198331339866248]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":164,"id":{"name":"derive_more","disambiguator":[2698756104843969994,14444477136067550206]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":165,"id":{"name":"dyn_clonable","disambiguator":[8242438631393957323,14003146638030063325]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":166,"id":{"name":"dyn_clone","disambiguator":[4691791614177411806,10864154608713969261]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":167,"id":{"name":"dyn_clonable_impl","disambiguator":[4615130658418671392,6958782800412037695]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":168,"id":{"name":"hex","disambiguator":[1554532179233287652,7706981720287221831]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":169,"id":{"name":"futures","disambiguator":[7191882713553373375,5784363091584244339]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":170,"id":{"name":"futures_core","disambiguator":[18128997065636809979,13049398925650811592]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":171,"id":{"name":"futures_util","disambiguator":[6826120639398116430,15849646236374289672]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":172,"id":{"name":"pin_utils","disambiguator":[14006933666536538846,10325894616585527374]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":173,"id":{"name":"futures_task","disambiguator":[17591182617236407828,908714568475142235]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":174,"id":{"name":"futures_sink","disambiguator":[18304585830995575034,16327236895633893015]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":175,"id":{"name":"futures_channel","disambiguator":[6517228745129513001,1111405895964483599]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":176,"id":{"name":"slab","disambiguator":[7754159738850082191,972067075306833933]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":177,"id":{"name":"futures_io","disambiguator":[8909187937396878977,2922841661346725167]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":178,"id":{"name":"futures_macro","disambiguator":[7362818316734880593,477739355724548135]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":179,"id":{"name":"futures_executor","disambiguator":[2718974542857099553,14805374385779778428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":180,"id":{"name":"num_cpus","disambiguator":[17237370829952825392,8933627738761765040]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":181,"id":{"name":"sp_io","disambiguator":[8095273759518359470,284860053986169440]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":182,"id":{"name":"sp_trie","disambiguator":[11252105861350862833,1708726736418102481]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":183,"id":{"name":"trie_db","disambiguator":[18271978803945158697,17262652499401197515]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":184,"id":{"name":"hashbrown","disambiguator":[5245551859052833817,6349580907210778731]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":185,"id":{"name":"ahash","disambiguator":[2391589251574575903,4260304121454177733]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":186,"id":{"name":"trie_root","disambiguator":[1580444581320396263,11318692011956243941]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":187,"id":{"name":"memory_db","disambiguator":[1774147319952519439,6218163937387775773]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":188,"id":{"name":"sp_state_machine","disambiguator":[16871039762670672788,2893481927570229250]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":189,"id":{"name":"sp_panic_handler","disambiguator":[1493573841702380073,2894375925513246248]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":190,"id":{"name":"sp_arithmetic","disambiguator":[11188263385090241613,11050410231310448845]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":191,"id":{"name":"integer_sqrt","disambiguator":[6159326418223766355,11569997483938519441]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":192,"id":{"name":"either","disambiguator":[11907231751799516344,6556694577995769697]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":193,"id":{"name":"frame_support","disambiguator":[12340206065294375437,12517115610589478589]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":194,"id":{"name":"bitmask","disambiguator":[5782473917540145618,17697772774806715406]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":195,"id":{"name":"frame_metadata","disambiguator":[14080957284037454698,12568029235722453335]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":196,"id":{"name":"sp_inherents","disambiguator":[10785847656675007332,11321297868410126711]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","num":197,"id":{"name":"frame_support_procedural","disambiguator":[9484197330836620554,1743859436921206163]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":686,"byte_end":46739,"line_start":18,"line_end":1377,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":4954,"byte_end":4968,"line_start":145,"line_end":145,"column_start":19,"column_end":33},"alias_span":null,"name":"CheckMortality","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":775},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":4985,"byte_end":4997,"line_start":145,"line_end":145,"column_start":50,"column_end":62},"alias_span":null,"name":"CheckGenesis","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":844},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5012,"byte_end":5022,"line_start":145,"line_end":145,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckNonce","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":880},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5045,"byte_end":5061,"line_start":146,"line_end":146,"column_start":22,"column_end":38},"alias_span":null,"name":"CheckSpecVersion","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":916},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5081,"byte_end":5095,"line_start":146,"line_end":146,"column_start":58,"column_end":72},"alias_span":null,"name":"CheckTxVersion","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":952},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5112,"byte_end":5123,"line_start":147,"line_end":147,"column_start":16,"column_end":27},"alias_span":null,"name":"CheckWeight","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5199,"byte_end":5213,"line_start":150,"line_end":150,"column_start":38,"column_end":52},"alias_span":null,"name":"CheckEra","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":686,"byte_end":46739,"line_start":18,"line_end":1377,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":2153},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":2159},{"krate":0,"index":8},{"krate":0,"index":2161},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":2185},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":2195},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":2269},{"krate":0,"index":70},{"krate":0,"index":2271},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":253},{"krate":0,"index":460},{"krate":0,"index":476},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":509},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":1018},{"krate":0,"index":1048},{"krate":0,"index":1043},{"krate":0,"index":1041},{"krate":0,"index":1035},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1026},{"krate":0,"index":541},{"krate":0,"index":1054},{"krate":0,"index":1098},{"krate":0,"index":1091},{"krate":0,"index":1087},{"krate":0,"index":1079},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1060},{"krate":0,"index":1108},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1134},{"krate":0,"index":1131},{"krate":0,"index":1123},{"krate":0,"index":1117},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":1148},{"krate":0,"index":1194},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1175},{"krate":0,"index":1171},{"krate":0,"index":1161},{"krate":0,"index":1154},{"krate":0,"index":1198},{"krate":0,"index":1216},{"krate":0,"index":1210},{"krate":0,"index":1205},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1244},{"krate":0,"index":1262},{"krate":0,"index":1279},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1317},{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1345},{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1443},{"krate":0,"index":1445},{"krate":0,"index":1447},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1489},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1722},{"krate":0,"index":1743},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1731},{"krate":0,"index":1726},{"krate":0,"index":1724},{"krate":0,"index":1506},{"krate":0,"index":1745},{"krate":0,"index":1808},{"krate":0,"index":1748},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1523},{"krate":0,"index":1527},{"krate":0,"index":1531},{"krate":0,"index":1535},{"krate":0,"index":1544},{"krate":0,"index":1547},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1564},{"krate":0,"index":1567},{"krate":0,"index":1574},{"krate":0,"index":1578},{"krate":0,"index":1582},{"krate":0,"index":1591},{"krate":0,"index":1594},{"krate":0,"index":1597},{"krate":0,"index":1605},{"krate":0,"index":1609},{"krate":0,"index":1617},{"krate":0,"index":1621},{"krate":0,"index":1629},{"krate":0,"index":1633},{"krate":0,"index":1641},{"krate":0,"index":1645},{"krate":0,"index":1653},{"krate":0,"index":1657},{"krate":0,"index":1665},{"krate":0,"index":1668},{"krate":0,"index":1675},{"krate":0,"index":1679},{"krate":0,"index":1683},{"krate":0,"index":1692},{"krate":0,"index":1695},{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":1822},{"krate":0,"index":1830},{"krate":0,"index":1875},{"krate":0,"index":1869},{"krate":0,"index":1871},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1856},{"krate":0,"index":1850},{"krate":0,"index":1847},{"krate":0,"index":1824},{"krate":0,"index":1827},{"krate":0,"index":1878},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1901},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":1940},{"krate":0,"index":1960},{"krate":0,"index":1958},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1944},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1973},{"krate":0,"index":1975},{"krate":0,"index":1977},{"krate":0,"index":1910},{"krate":0,"index":2029},{"krate":0,"index":2071},{"krate":0,"index":2065},{"krate":0,"index":1912},{"krate":0,"index":1915},{"krate":0,"index":1919},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1934},{"krate":0,"index":2079},{"krate":0,"index":2082},{"krate":0,"index":1937},{"krate":0,"index":557},{"krate":0,"index":561},{"krate":0,"index":567},{"krate":0,"index":571},{"krate":0,"index":577},{"krate":0,"index":582},{"krate":0,"index":589},{"krate":0,"index":593},{"krate":0,"index":599},{"krate":0,"index":603},{"krate":0,"index":608},{"krate":0,"index":614},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":645},{"krate":0,"index":688},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":706},{"krate":0,"index":730},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":742},{"krate":0,"index":745}],"decl_id":null,"docs":" # System Module","sig":null,"attributes":[{"value":"/ # System Module","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":686,"byte_end":705,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":706,"byte_end":709,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The System module provides low-level access to core types and cross-cutting utilities.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":710,"byte_end":800,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ It acts as the base layer for other pallets to interact with the Substrate framework components.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":801,"byte_end":901,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":902,"byte_end":905,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - [`system::Trait`](./trait.Trait.html)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":906,"byte_end":949,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":950,"byte_end":953,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":954,"byte_end":969,"line_start":25,"line_end":25,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":970,"byte_end":973,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The System module defines the core data types used in a Substrate runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":974,"byte_end":1052,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ It also provides several utility functions (see [`Module`](./struct.Module.html)) for other FRAME pallets.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1053,"byte_end":1163,"line_start":28,"line_end":28,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1164,"byte_end":1167,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In addition, it manages the storage items for extrinsics data, indexes, event records, and digest items,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1168,"byte_end":1276,"line_start":30,"line_end":30,"column_start":1,"column_end":109}},{"value":"/ among other things that support the execution of the current block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1277,"byte_end":1348,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1349,"byte_end":1352,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ It also handles low-level tasks like depositing logs, basic set up and take down of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1353,"byte_end":1440,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/ temporary storage entries, and access to previous block hashes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1441,"byte_end":1508,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1509,"byte_end":1512,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Interface","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1513,"byte_end":1529,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ### Dispatchable Functions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1534,"byte_end":1564,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1565,"byte_end":1568,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The System module does not implement any dispatchable functions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1569,"byte_end":1637,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1638,"byte_end":1641,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ### Public Functions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1642,"byte_end":1666,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1667,"byte_end":1670,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ See the [`Module`](./struct.Module.html) struct for details of publicly available functions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1671,"byte_end":1767,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1768,"byte_end":1771,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ### Signed Extensions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1772,"byte_end":1797,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ The System module defines the following extensions:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1802,"byte_end":1857,"line_start":48,"line_end":48,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1858,"byte_end":1861,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/   - [`CheckWeight`]: Checks the weight and length of the block and ensure that it does not","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1862,"byte_end":1956,"line_start":50,"line_end":50,"column_start":1,"column_end":95}},{"value":"/     exceed the limits.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1957,"byte_end":1983,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/   - [`CheckNonce`]: Checks the nonce of the transaction. Contains a single payload of type","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":1984,"byte_end":2078,"line_start":52,"line_end":52,"column_start":1,"column_end":95}},{"value":"/     `T::Index`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2079,"byte_end":2098,"line_start":53,"line_end":53,"column_start":1,"column_end":20}},{"value":"/   - [`CheckEra`]: Checks the era of the transaction. Contains a single payload of type `Era`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2099,"byte_end":2196,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/   - [`CheckGenesis`]: Checks the provided genesis hash of the transaction. Must be a part of the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2197,"byte_end":2297,"line_start":55,"line_end":55,"column_start":1,"column_end":101}},{"value":"/     signed payload of the transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2298,"byte_end":2340,"line_start":56,"line_end":56,"column_start":1,"column_end":43}},{"value":"/   - [`CheckSpecVersion`]: Checks that the runtime version is the same as the one used to sign the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2341,"byte_end":2442,"line_start":57,"line_end":57,"column_start":1,"column_end":102}},{"value":"/     transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2443,"byte_end":2463,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/   - [`CheckTxVersion`]: Checks that the transaction version is the same as the one used to sign the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2464,"byte_end":2567,"line_start":59,"line_end":59,"column_start":1,"column_end":104}},{"value":"/     transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2568,"byte_end":2588,"line_start":60,"line_end":60,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2589,"byte_end":2592,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Lookup the runtime aggregator file (e.g. `node/runtime`) to see the full list of signed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2593,"byte_end":2684,"line_start":62,"line_end":62,"column_start":1,"column_end":92}},{"value":"/ extensions included in a chain.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2685,"byte_end":2720,"line_start":63,"line_end":63,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2721,"byte_end":2724,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2725,"byte_end":2737,"line_start":65,"line_end":65,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2738,"byte_end":2741,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ### Prerequisites","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2742,"byte_end":2763,"line_start":67,"line_end":67,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2764,"byte_end":2767,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Import the System module and derive your module's configuration trait from the system trait.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2768,"byte_end":2864,"line_start":69,"line_end":69,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2865,"byte_end":2868,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ### Example - Get extrinsic count and parent hash for the current block","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2869,"byte_end":2944,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2945,"byte_end":2948,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2949,"byte_end":2956,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use frame_support::{decl_module, dispatch};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":2957,"byte_end":3004,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/ use frame_system::{self as system, ensure_signed};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3005,"byte_end":3059,"line_start":75,"line_end":75,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3060,"byte_end":3063,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ pub trait Trait: system::Trait {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3064,"byte_end":3101,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3102,"byte_end":3105,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ decl_module! {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3106,"byte_end":3124,"line_start":79,"line_end":79,"column_start":1,"column_end":19}},{"value":"/ \tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3125,"byte_end":3197,"line_start":80,"line_end":80,"column_start":1,"column_end":73}},{"value":"/ \t\t#[weight = 0]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3198,"byte_end":3217,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/ \t\tpub fn system_module_example(origin) -> dispatch::DispatchResult {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3218,"byte_end":3290,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/ \t\t\tlet _sender = ensure_signed(origin)?;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3291,"byte_end":3335,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ \t\t\tlet _extrinsic_count = <system::Module<T>>::extrinsic_count();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3336,"byte_end":3405,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ \t\t\tlet _parent_hash = <system::Module<T>>::parent_hash();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3406,"byte_end":3467,"line_start":85,"line_end":85,"column_start":1,"column_end":62}},{"value":"/ \t\t\tOk(())","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3468,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":14}},{"value":"/ \t\t}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3482,"byte_end":3489,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ \t}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3490,"byte_end":3496,"line_start":88,"line_end":88,"column_start":1,"column_end":7}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3497,"byte_end":3502,"line_start":89,"line_end":89,"column_start":1,"column_end":6}},{"value":"/ # fn main() { }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3503,"byte_end":3522,"line_start":90,"line_end":90,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":3523,"byte_end":3530,"line_start":91,"line_end":91,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":74},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offchain","qualname":"::offchain","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":2279},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":750},{"krate":0,"index":756},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":124},{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":148},{"krate":0,"index":158},{"krate":0,"index":166},{"krate":0,"index":174},{"krate":0,"index":184},{"krate":0,"index":761},{"krate":0,"index":772},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":220},{"krate":0,"index":227},{"krate":0,"index":235},{"krate":0,"index":244}],"decl_id":null,"docs":" Module helpers for off-chain calls.","sig":null,"attributes":[{"value":"/ Module helpers for off-chain calls.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47427,"byte_end":47466,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47467,"byte_end":47470,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47471,"byte_end":47486,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47487,"byte_end":47490,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This module provides transaction related helpers to:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47491,"byte_end":47547,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ - Submit a raw unsigned transaction","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47548,"byte_end":47587,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - Submit an unsigned transaction with a signed payload","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47588,"byte_end":47646,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ - Submit a signed transction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47647,"byte_end":47680,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47681,"byte_end":47684,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47685,"byte_end":47697,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47698,"byte_end":47701,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Please refer to [`example-offchain-worker`](../../pallet_example_offchain_worker/index.html) for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47702,"byte_end":47802,"line_start":29,"line_end":29,"column_start":1,"column_end":101}},{"value":"/ a concrete example usage of this crate.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47803,"byte_end":47846,"line_start":30,"line_end":30,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47847,"byte_end":47850,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ### Submit a raw unsigned transaction","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47851,"byte_end":47892,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47893,"byte_end":47896,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ To submit a raw unsigned transaction, [`SubmitTransaction`](./struct.SubmitTransaction.html)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47897,"byte_end":47993,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ can be used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":47994,"byte_end":48010,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48011,"byte_end":48014,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ### Signing transactions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48015,"byte_end":48043,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48044,"byte_end":48047,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ To be able to use signing, the following trait should be implemented:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48048,"byte_end":48121,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48122,"byte_end":48125,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - [`AppCrypto`](./trait.AppCrypto.html): where an application-specific key","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48126,"byte_end":48204,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/   is defined and can be used by this module's helpers for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48205,"byte_end":48275,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ - [`CreateSignedTransaction`](./trait.CreateSignedTransaction.html): where","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48276,"byte_end":48354,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   the manner in which the transaction is constructed is defined.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48355,"byte_end":48423,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48424,"byte_end":48427,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #### Submit an unsigned transaction with a signed payload","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48428,"byte_end":48489,"line_start":46,"line_end":46,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48490,"byte_end":48493,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Initially, a payload instance that implements the `SignedPayload` trait should be defined.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48494,"byte_end":48588,"line_start":48,"line_end":48,"column_start":1,"column_end":95}},{"value":"/ See [`PricePayload`](../../pallet_example_offchain_worker/struct.PricePayload.html)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48589,"byte_end":48676,"line_start":49,"line_end":49,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48677,"byte_end":48680,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The payload type that is defined defined can then be signed and submitted onchain.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48681,"byte_end":48767,"line_start":51,"line_end":51,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48768,"byte_end":48771,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ #### Submit a signed transaction","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48772,"byte_end":48808,"line_start":53,"line_end":53,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48809,"byte_end":48812,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`Signer`](./struct.Signer.html) can be used to sign/verify payloads","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48813,"byte_end":48885,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48886,"byte_end":48889,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"warn(missing_docs)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":48891,"byte_end":48913,"line_start":58,"line_end":58,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49323,"byte_end":49329,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"ForAll","qualname":"::offchain::ForAll","value":"ForAll {  }","parent":null,"children":[],"decl_id":null,"docs":" Marker struct used to flag using all supported keys to sign a payload.\n","sig":null,"attributes":[{"value":"/ Marker struct used to flag using all supported keys to sign a payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49237,"byte_end":49311,"line_start":68,"line_end":68,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":93},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49426,"byte_end":49432,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"ForAny","qualname":"::offchain::ForAny","value":"ForAny {  }","parent":null,"children":[],"decl_id":null,"docs":" Marker struct used to flag using any of the supported keys to sign a payload.\n","sig":null,"attributes":[{"value":"/ Marker struct used to flag using any of the supported keys to sign a payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49333,"byte_end":49414,"line_start":70,"line_end":70,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49769,"byte_end":49786,"line_start":79,"line_end":79,"column_start":12,"column_end":29},"name":"SubmitTransaction","qualname":"::offchain::SubmitTransaction","value":"SubmitTransaction {  }","parent":null,"children":[{"krate":0,"index":97}],"decl_id":null,"docs":" Provides the ability to directly submit signed and unsigned\n transaction onchain.","sig":null,"attributes":[{"value":"/ Provides the ability to directly submit signed and unsigned","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49437,"byte_end":49500,"line_start":73,"line_end":73,"column_start":1,"column_end":64}},{"value":"/ transaction onchain.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49501,"byte_end":49525,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49526,"byte_end":49529,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ For submitting unsigned transactions, `submit_unsigned_transaction`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49530,"byte_end":49601,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/ utility function can be used. However, this struct is used by `Signer`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49602,"byte_end":49676,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ to submit a signed transactions providing the signature along with the call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49677,"byte_end":49757,"line_start":78,"line_end":78,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50096,"byte_end":50114,"line_start":88,"line_end":88,"column_start":9,"column_end":27},"name":"submit_transaction","qualname":"<SubmitTransaction<T, LocalCall>>::submit_transaction","value":"pub fn submit_transaction(<T as\n                          SendTransactionTypes<LocalCall>>::OverarchingCall,\n                          Option<<T::Extrinsic as\n                                 ExtrinsicT>::SignaturePayload>)\n-> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Submit transaction onchain by providing the call and an optional signature\n","sig":null,"attributes":[{"value":"/ Submit transaction onchain by providing the call and an optional signature","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50009,"byte_end":50087,"line_start":87,"line_end":87,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50470,"byte_end":50497,"line_start":97,"line_end":97,"column_start":9,"column_end":36},"name":"submit_unsigned_transaction","qualname":"<SubmitTransaction<T, LocalCall>>::submit_unsigned_transaction","value":"pub fn submit_unsigned_transaction(<T as\n                                   SendTransactionTypes<LocalCall>>::OverarchingCall)\n-> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" A convenience method to submit an unsigned transaction onchain.\n","sig":null,"attributes":[{"value":"/ A convenience method to submit an unsigned transaction onchain.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50394,"byte_end":50461,"line_start":96,"line_end":96,"column_start":2,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51165,"byte_end":51171,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Signer","qualname":"::offchain::Signer","value":"Signer {  }","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755}],"decl_id":null,"docs":" Provides an implementation for signing transaction payloads.","sig":null,"attributes":[{"value":"/ Provides an implementation for signing transaction payloads.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50661,"byte_end":50725,"line_start":104,"line_end":104,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50726,"byte_end":50729,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ Keys used for signing are defined when instantiating the signer object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50730,"byte_end":50805,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/ Signing can be done using:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50806,"byte_end":50836,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50837,"byte_end":50840,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ - All supported keys in the keystore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50841,"byte_end":50881,"line_start":109,"line_end":109,"column_start":1,"column_end":41}},{"value":"/ - Any of the supported keys in the keystore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50882,"byte_end":50929,"line_start":110,"line_end":110,"column_start":1,"column_end":48}},{"value":"/ - An intersection of in-keystore keys and the list of provided keys","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":50930,"byte_end":51001,"line_start":111,"line_end":111,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51002,"byte_end":51005,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ The signer is then able to:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51006,"byte_end":51037,"line_start":113,"line_end":113,"column_start":1,"column_end":32}},{"value":"/ - Submit a unsigned transaction with a signed payload","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51038,"byte_end":51095,"line_start":114,"line_end":114,"column_start":1,"column_end":58}},{"value":"/ - Submit a signed transaction","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51096,"byte_end":51129,"line_start":115,"line_end":115,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51662,"byte_end":51674,"line_start":133,"line_end":133,"column_start":9,"column_end":21},"name":"all_accounts","qualname":"<Signer<T, C, X>>::all_accounts","value":"pub fn all_accounts() -> Signer<T, C, ForAll>","parent":null,"children":[],"decl_id":null,"docs":" Use all available keys for signing.\n","sig":null,"attributes":[{"value":"/ Use all available keys for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51614,"byte_end":51653,"line_start":132,"line_end":132,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51784,"byte_end":51795,"line_start":138,"line_end":138,"column_start":9,"column_end":20},"name":"any_account","qualname":"<Signer<T, C, X>>::any_account","value":"pub fn any_account() -> Signer<T, C, ForAny>","parent":null,"children":[],"decl_id":null,"docs":" Use any of the available keys for signing.\n","sig":null,"attributes":[{"value":"/ Use any of the available keys for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51729,"byte_end":51775,"line_start":137,"line_end":137,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":52109,"byte_end":52120,"line_start":147,"line_end":147,"column_start":9,"column_end":20},"name":"with_filter","qualname":"<Signer<T, C, X>>::with_filter","value":"pub fn with_filter(Self, Vec<T::Public>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Use provided `accounts` for signing.","sig":null,"attributes":[{"value":"/ Use provided `accounts` for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51850,"byte_end":51890,"line_start":142,"line_end":142,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51892,"byte_end":51895,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ Note that not all keys will be necessarily used. The provided","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51897,"byte_end":51962,"line_start":144,"line_end":144,"column_start":2,"column_end":67}},{"value":"/ vector of accounts will be intersected with the supported keys","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51964,"byte_end":52030,"line_start":145,"line_end":145,"column_start":2,"column_end":68}},{"value":"/ in the keystore and the resulting list will be used for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":52032,"byte_end":52100,"line_start":146,"line_end":146,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":52285,"byte_end":52293,"line_start":153,"line_end":153,"column_start":9,"column_end":17},"name":"can_sign","qualname":"<Signer<T, C, X>>::can_sign","value":"pub fn can_sign(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if there are any keys that could be used for signing.\n","sig":null,"attributes":[{"value":"/ Check if there are any keys that could be used for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":52213,"byte_end":52276,"line_start":152,"line_end":152,"column_start":2,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":761},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57500,"byte_end":57507,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"name":"Account","qualname":"::offchain::Account","value":"Account { index, id, public }","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765}],"decl_id":null,"docs":" Details of an account for which a private key is contained in the keystore.\n","sig":null,"attributes":[{"value":"/ Details of an account for which a private key is contained in the keystore.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57374,"byte_end":57453,"line_start":338,"line_end":338,"column_start":1,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":763},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57601,"byte_end":57606,"line_start":342,"line_end":342,"column_start":6,"column_end":11},"name":"index","qualname":"::offchain::Account::index","value":"usize","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Index on the provided list of accounts or list of all accounts.\n","sig":null,"attributes":[{"value":"/ Index on the provided list of accounts or list of all accounts.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57528,"byte_end":57595,"line_start":341,"line_end":341,"column_start":2,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":764},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57655,"byte_end":57657,"line_start":344,"line_end":344,"column_start":6,"column_end":8},"name":"id","qualname":"::offchain::Account::id","value":"<T as Trait>::AccountId","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Runtime-specific `AccountId`.\n","sig":null,"attributes":[{"value":"/ Runtime-specific `AccountId`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57616,"byte_end":57649,"line_start":343,"line_end":343,"column_start":2,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":765},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57734,"byte_end":57740,"line_start":346,"line_end":346,"column_start":6,"column_end":12},"name":"public","qualname":"::offchain::Account::public","value":"<T as offchain::SigningTypes>::Public","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" A runtime-specific `Public` key for that key pair.\n","sig":null,"attributes":[{"value":"/ A runtime-specific `Public` key for that key pair.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57674,"byte_end":57728,"line_start":345,"line_end":345,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57834,"byte_end":57837,"line_start":351,"line_end":351,"column_start":9,"column_end":12},"name":"new","qualname":"<Account<T>>::new","value":"pub fn new(usize, T::AccountId, T::Public) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Account instance\n","sig":null,"attributes":[{"value":"/ Create a new Account instance","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57792,"byte_end":57825,"line_start":350,"line_end":350,"column_start":2,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":200},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59438,"byte_end":59447,"line_start":395,"line_end":395,"column_start":11,"column_end":20},"name":"AppCrypto","qualname":"::offchain::AppCrypto","value":"AppCrypto<Public, Signature>","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":208}],"decl_id":null,"docs":" A type binding runtime-level `Public/Signature` pair with crypto wrapped by `RuntimeAppPublic`.","sig":null,"attributes":[{"value":"/ A type binding runtime-level `Public/Signature` pair with crypto wrapped by `RuntimeAppPublic`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58150,"byte_end":58249,"line_start":369,"line_end":369,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58250,"byte_end":58253,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait should specify the app-specific public/signature types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58254,"byte_end":58343,"line_start":371,"line_end":371,"column_start":1,"column_end":90}},{"value":"/ This is merely a wrapper around an existing `RuntimeAppPublic` type, but with","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58344,"byte_end":58425,"line_start":372,"line_end":372,"column_start":1,"column_end":82}},{"value":"/ extra non-application-specific crypto type that is being wrapped (e.g. `sr25519`, `ed25519`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58426,"byte_end":58523,"line_start":373,"line_end":373,"column_start":1,"column_end":98}},{"value":"/ This is needed to later on convert into runtime-specific `Public` key, which might support","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58524,"byte_end":58618,"line_start":374,"line_end":374,"column_start":1,"column_end":95}},{"value":"/ multiple different crypto.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58619,"byte_end":58649,"line_start":375,"line_end":375,"column_start":1,"column_end":31}},{"value":"/ The point of this trait is to be able to easily convert between `RuntimeAppPublic`, the wrapped","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58650,"byte_end":58749,"line_start":376,"line_end":376,"column_start":1,"column_end":100}},{"value":"/ (generic = non application-specific) crypto types and the `Public` type required by the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58750,"byte_end":58850,"line_start":377,"line_end":377,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58851,"byte_end":58854,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ TODO [#5662] Potentially use `IsWrappedBy` types, or find some other way to make it easy to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58855,"byte_end":58950,"line_start":379,"line_end":379,"column_start":1,"column_end":96}},{"value":"/ obtain unwrapped crypto (and wrap it back).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58951,"byte_end":58998,"line_start":380,"line_end":380,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":58999,"byte_end":59002,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/\tExample (pseudo-)implementation:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59003,"byte_end":59039,"line_start":382,"line_end":382,"column_start":1,"column_end":37}},{"value":"/ ```ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59040,"byte_end":59053,"line_start":383,"line_end":383,"column_start":1,"column_end":14}},{"value":"/\t// im-online specific crypto","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59054,"byte_end":59086,"line_start":384,"line_end":384,"column_start":1,"column_end":33}},{"value":"/ type RuntimeAppPublic = ImOnline(sr25519::Public);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59087,"byte_end":59141,"line_start":385,"line_end":385,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59142,"byte_end":59145,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ // wrapped \"raw\" crypto","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59146,"byte_end":59173,"line_start":387,"line_end":387,"column_start":1,"column_end":28}},{"value":"/ type GenericPublic = sr25519::Public;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59174,"byte_end":59215,"line_start":388,"line_end":388,"column_start":1,"column_end":42}},{"value":"/ type GenericSignature = sr25519::Signature;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59216,"byte_end":59263,"line_start":389,"line_end":389,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59264,"byte_end":59267,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ // runtime-specific public key","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59268,"byte_end":59302,"line_start":391,"line_end":391,"column_start":1,"column_end":35}},{"value":"/ type Public = MultiSigner: From<sr25519::Public>;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59303,"byte_end":59356,"line_start":392,"line_end":392,"column_start":1,"column_end":54}},{"value":"/ type Signature = MulitSignature: From<sr25519::Signature>;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59357,"byte_end":59419,"line_start":393,"line_end":393,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59420,"byte_end":59427,"line_start":394,"line_end":394,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":203},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59511,"byte_end":59527,"line_start":397,"line_end":397,"column_start":7,"column_end":23},"name":"RuntimeAppPublic","qualname":"::offchain::AppCrypto::RuntimeAppPublic","value":"type RuntimeAppPublic: RuntimeAppPublic;","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" A application-specific crypto.\n","sig":null,"attributes":[{"value":"/ A application-specific crypto.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59470,"byte_end":59504,"line_start":396,"line_end":396,"column_start":2,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":204},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59614,"byte_end":59627,"line_start":400,"line_end":400,"column_start":7,"column_end":20},"name":"GenericPublic","qualname":"::offchain::AppCrypto::GenericPublic","value":"type GenericPublic:\n\t\tFrom<Self::RuntimeAppPublic>\n\t\t+ Into<Self::RuntimeAppPublic>\n\t\t+ TryFrom<Public>\n\t\t+ Into<Public>;","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" A raw crypto public key wrapped by `RuntimeAppPublic`.\n","sig":null,"attributes":[{"value":"/ A raw crypto public key wrapped by `RuntimeAppPublic`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59549,"byte_end":59607,"line_start":399,"line_end":399,"column_start":2,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":205},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59783,"byte_end":59799,"line_start":407,"line_end":407,"column_start":7,"column_end":23},"name":"GenericSignature","qualname":"::offchain::AppCrypto::GenericSignature","value":"type GenericSignature:\n\t\tFrom<<Self::RuntimeAppPublic as RuntimeAppPublic>::Signature>\n\t\t+ Into<<Self::RuntimeAppPublic as RuntimeAppPublic>::Signature>\n\t\t+ TryFrom<Signature>\n\t\t+ Into<Signature>;","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" A matching raw crypto `Signature` type.\n","sig":null,"attributes":[{"value":"/ A matching raw crypto `Signature` type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59733,"byte_end":59776,"line_start":406,"line_end":406,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":60055,"byte_end":60059,"line_start":414,"line_end":414,"column_start":5,"column_end":9},"name":"sign","qualname":"::offchain::AppCrypto::sign","value":"pub fn sign(&[u8], Public) -> Option<Signature>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Sign payload with the private key to maps to the provided public key.\n","sig":null,"attributes":[{"value":"/ Sign payload with the private key to maps to the provided public key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":59977,"byte_end":60050,"line_start":413,"line_end":413,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":60400,"byte_end":60406,"line_start":426,"line_end":426,"column_start":5,"column_end":11},"name":"verify","qualname":"::offchain::AppCrypto::verify","value":"pub fn verify(&[u8], Public, Signature) -> bool","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Verify signature against the provided public key.\n","sig":null,"attributes":[{"value":"/ Verify signature against the provided public key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":60342,"byte_end":60395,"line_start":425,"line_end":425,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":209},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61233,"byte_end":61245,"line_start":451,"line_end":451,"column_start":11,"column_end":23},"name":"SigningTypes","qualname":"::offchain::SigningTypes","value":"SigningTypes: crate::Trait","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211}],"decl_id":null,"docs":" A wrapper around the types which are used for signing.","sig":null,"attributes":[{"value":"/ A wrapper around the types which are used for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":60879,"byte_end":60937,"line_start":444,"line_end":444,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":60938,"byte_end":60941,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ This trait adds extra bounds to `Public` and `Signature` types of the runtime","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":60942,"byte_end":61023,"line_start":446,"line_end":446,"column_start":1,"column_end":82}},{"value":"/ that are necessary to use these types for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61024,"byte_end":61078,"line_start":447,"line_end":447,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61079,"byte_end":61082,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/\tTODO [#5663] Could this be just `T::Signature as traits::Verify>::Signer`?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61083,"byte_end":61161,"line_start":449,"line_end":449,"column_start":1,"column_end":79}},{"value":"/ Seems that this may cause issues with bounds resolution.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61162,"byte_end":61222,"line_start":450,"line_end":450,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":210},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61490,"byte_end":61496,"line_start":456,"line_end":456,"column_start":7,"column_end":13},"name":"Public","qualname":"::offchain::SigningTypes::Public","value":"type Public: Clone\n\t\t+ PartialEq\n\t\t+ IdentifyAccount<AccountId = Self::AccountId>\n\t\t+ core::fmt::Debug\n\t\t+ codec::Codec\n\t\t+ Ord;","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" A public key that is capable of identifing `AccountId`s.","sig":null,"attributes":[{"value":"/ A public key that is capable of identifing `AccountId`s.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61263,"byte_end":61323,"line_start":452,"line_end":452,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61325,"byte_end":61328,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ Usually that's either a raw crypto public key (e.g. `sr25519::Public`) or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61330,"byte_end":61407,"line_start":454,"line_end":454,"column_start":2,"column_end":79}},{"value":"/ an aggregate type for multiple crypto public keys, like `MulitSigner`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61409,"byte_end":61483,"line_start":455,"line_end":455,"column_start":2,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":211},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61655,"byte_end":61664,"line_start":464,"line_end":464,"column_start":7,"column_end":16},"name":"Signature","qualname":"::offchain::SigningTypes::Signature","value":"type Signature: Clone\n\t\t+ PartialEq\n\t\t+ core::fmt::Debug\n\t\t+ codec::Codec;","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" A matching `Signature` type.\n","sig":null,"attributes":[{"value":"/ A matching `Signature` type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61616,"byte_end":61648,"line_start":463,"line_end":463,"column_start":2,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":212},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61821,"byte_end":61841,"line_start":471,"line_end":471,"column_start":11,"column_end":31},"name":"SendTransactionTypes","qualname":"::offchain::SendTransactionTypes","value":"SendTransactionTypes<LocalCall>","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215}],"decl_id":null,"docs":" A definition of types required to submit transactions from within the runtime.\n","sig":null,"attributes":[{"value":"/ A definition of types required to submit transactions from within the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61728,"byte_end":61810,"line_start":470,"line_end":470,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61910,"byte_end":61919,"line_start":473,"line_end":473,"column_start":7,"column_end":16},"name":"Extrinsic","qualname":"::offchain::SendTransactionTypes::Extrinsic","value":"type Extrinsic: ExtrinsicT<Call=Self::OverarchingCall> + codec::Encode;","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" The extrinsic type expected by the runtime.\n","sig":null,"attributes":[{"value":"/ The extrinsic type expected by the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61856,"byte_end":61903,"line_start":472,"line_end":472,"column_start":2,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":215},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62106,"byte_end":62121,"line_start":477,"line_end":477,"column_start":7,"column_end":22},"name":"OverarchingCall","qualname":"::offchain::SendTransactionTypes::OverarchingCall","value":"type OverarchingCall: From<LocalCall>;","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" The runtime's call type.","sig":null,"attributes":[{"value":"/ The runtime's call type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61978,"byte_end":62006,"line_start":474,"line_end":474,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62008,"byte_end":62011,"line_start":475,"line_end":475,"column_start":2,"column_end":5}},{"value":"/ This has additional bound to be able to be created from pallet-local `Call` types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62013,"byte_end":62099,"line_start":476,"line_end":476,"column_start":2,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62588,"byte_end":62611,"line_start":487,"line_end":487,"column_start":11,"column_end":34},"name":"CreateSignedTransaction","qualname":"::offchain::CreateSignedTransaction","value":"CreateSignedTransaction<LocalCall>: SendTransactionTypes<LocalCall> + SigningTypes","parent":null,"children":[{"krate":0,"index":218}],"decl_id":null,"docs":" Create signed transaction.","sig":null,"attributes":[{"value":"/ Create signed transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62143,"byte_end":62173,"line_start":480,"line_end":480,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62174,"byte_end":62177,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ This trait is meant to be implemented by the runtime and is responsible for constructing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62178,"byte_end":62270,"line_start":482,"line_end":482,"column_start":1,"column_end":93}},{"value":"/ a payload to be signed and contained within the extrinsic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62271,"byte_end":62333,"line_start":483,"line_end":483,"column_start":1,"column_end":63}},{"value":"/ This will most likely include creation of `SignedExtra` (a set of `SignedExtensions`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62334,"byte_end":62424,"line_start":484,"line_end":484,"column_start":1,"column_end":91}},{"value":"/ Note that the result can be altered by inspecting the `Call` (for instance adjusting","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62425,"byte_end":62513,"line_start":485,"line_end":485,"column_start":1,"column_end":89}},{"value":"/ fees, or mortality depending on the `pallet` being called).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62514,"byte_end":62577,"line_start":486,"line_end":486,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63025,"byte_end":63043,"line_start":494,"line_end":494,"column_start":5,"column_end":23},"name":"create_transaction","qualname":"::offchain::CreateSignedTransaction::create_transaction","value":"pub fn create_transaction<C: AppCrypto<Self::Public,\n                                       Self::Signature>>(Self::OverarchingCall,\n                                                         Self::Public,\n                                                         Self::AccountId,\n                                                         Self::Index)\n->\n    Option<(Self::OverarchingCall,\n            <Self::Extrinsic as ExtrinsicT>::SignaturePayload)>","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Attempt to create signed extrinsic data that encodes call from given account.","sig":null,"attributes":[{"value":"/ Attempt to create signed extrinsic data that encodes call from given account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62674,"byte_end":62755,"line_start":488,"line_end":488,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62757,"byte_end":62760,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ Runtime implementation is free to construct the payload to sign and the signature","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62762,"byte_end":62847,"line_start":490,"line_end":490,"column_start":2,"column_end":87}},{"value":"/ in any way it wants.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62849,"byte_end":62873,"line_start":491,"line_end":491,"column_start":2,"column_end":26}},{"value":"/ Returns `None` if signed extrinsic could not be created (either because signing failed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62875,"byte_end":62965,"line_start":492,"line_end":492,"column_start":2,"column_end":92}},{"value":"/ or because of any other runtime-specific reason).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62967,"byte_end":63020,"line_start":493,"line_end":493,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":220},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63320,"byte_end":63331,"line_start":503,"line_end":503,"column_start":11,"column_end":22},"name":"SignMessage","qualname":"::offchain::SignMessage","value":"SignMessage<T: SigningTypes>","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224}],"decl_id":null,"docs":" A message signer.\n","sig":null,"attributes":[{"value":"/ A message signer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63288,"byte_end":63309,"line_start":502,"line_end":502,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":222},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63455,"byte_end":63468,"line_start":507,"line_end":507,"column_start":7,"column_end":20},"name":"SignatureData","qualname":"::offchain::SignMessage::SignatureData","value":"type SignatureData;","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" A signature data.","sig":null,"attributes":[{"value":"/ A signature data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63352,"byte_end":63373,"line_start":504,"line_end":504,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63375,"byte_end":63378,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ May contain account used for signing and the `Signature` itself.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63380,"byte_end":63448,"line_start":506,"line_end":506,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63590,"byte_end":63602,"line_start":513,"line_end":513,"column_start":5,"column_end":17},"name":"sign_message","qualname":"::offchain::SignMessage::sign_message","value":"pub fn sign_message(&Self, &[u8]) -> Self::SignatureData","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" Sign a message.","sig":null,"attributes":[{"value":"/ Sign a message.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63472,"byte_end":63491,"line_start":509,"line_end":509,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63493,"byte_end":63496,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ Implementation of this method should return","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63498,"byte_end":63545,"line_start":511,"line_end":511,"column_start":2,"column_end":49}},{"value":"/ a result containing the signature.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63547,"byte_end":63585,"line_start":512,"line_end":512,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63800,"byte_end":63804,"line_start":519,"line_end":519,"column_start":5,"column_end":9},"name":"sign","qualname":"::offchain::SignMessage::sign","value":"pub fn sign<TPayload, F>(&Self, F) -> Self::SignatureData where\nF: Fn(&Account<T>) -> TPayload, TPayload: SignedPayload<T>","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" Construct and sign given payload.","sig":null,"attributes":[{"value":"/ Construct and sign given payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63652,"byte_end":63689,"line_start":515,"line_end":515,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63691,"byte_end":63694,"line_start":516,"line_end":516,"column_start":2,"column_end":5}},{"value":"/ This method expects `f` to return a `SignedPayload`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63696,"byte_end":63751,"line_start":517,"line_end":517,"column_start":2,"column_end":57}},{"value":"/ object which is then used for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63753,"byte_end":63795,"line_start":518,"line_end":518,"column_start":2,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":227},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63998,"byte_end":64019,"line_start":526,"line_end":526,"column_start":11,"column_end":32},"name":"SendSignedTransaction","qualname":"::offchain::SendSignedTransaction","value":"SendSignedTransaction<T: SigningTypes + CreateSignedTransaction<LocalCall>,\n C: AppCrypto<T::Public, T::Signature>, LocalCall>","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":234}],"decl_id":null,"docs":" Submit a signed transaction to the transaction pool.\n","sig":null,"attributes":[{"value":"/ Submit a signed transaction to the transaction pool.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":63931,"byte_end":63987,"line_start":525,"line_end":525,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":231},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64261,"byte_end":64267,"line_start":534,"line_end":534,"column_start":7,"column_end":13},"name":"Result","qualname":"::offchain::SendSignedTransaction::Result","value":"type Result;","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" A submission result.","sig":null,"attributes":[{"value":"/ A submission result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64132,"byte_end":64156,"line_start":531,"line_end":531,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64158,"byte_end":64161,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ This should contain an indication of success and the account that was used for signing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64163,"byte_end":64254,"line_start":533,"line_end":533,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64568,"byte_end":64591,"line_start":542,"line_end":542,"column_start":5,"column_end":28},"name":"send_signed_transaction","qualname":"::offchain::SendSignedTransaction::send_signed_transaction","value":"pub fn send_signed_transaction<impl Fn(&Account<T>) -> LocalCall: Fn(&Account<T>)\n                               ->\n                               LocalCall>(&Self,\n                                          impl Fn(&Account<T>) -> LocalCall)\n-> Self::Result","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Submit a signed transaction to the local pool.","sig":null,"attributes":[{"value":"/ Submit a signed transaction to the local pool.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64271,"byte_end":64321,"line_start":536,"line_end":536,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64323,"byte_end":64326,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ Given `f` closure will be called for every requested account and expects a `Call` object","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64328,"byte_end":64420,"line_start":538,"line_end":538,"column_start":2,"column_end":94}},{"value":"/ to be returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64422,"byte_end":64441,"line_start":539,"line_end":539,"column_start":2,"column_end":21}},{"value":"/ The call is then wrapped into a transaction (see `#CreateSignedTransaction`), signed and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64443,"byte_end":64535,"line_start":540,"line_end":540,"column_start":2,"column_end":94}},{"value":"/ submitted to the pool.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64537,"byte_end":64563,"line_start":541,"line_end":541,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64756,"byte_end":64786,"line_start":548,"line_end":548,"column_start":5,"column_end":35},"name":"send_single_signed_transaction","qualname":"::offchain::SendSignedTransaction::send_single_signed_transaction","value":"pub fn send_single_signed_transaction(&Self, &Account<T>, LocalCall)\n-> Option<Result<(), ()>>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Wraps the call into transaction, signs using given account and submits to the pool.\n","sig":null,"attributes":[{"value":"/ Wraps the call into transaction, signs using given account and submits to the pool.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":64664,"byte_end":64751,"line_start":547,"line_end":547,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":235},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65685,"byte_end":65708,"line_start":581,"line_end":581,"column_start":11,"column_end":34},"name":"SendUnsignedTransaction","qualname":"::offchain::SendUnsignedTransaction","value":"SendUnsignedTransaction<T: SigningTypes + SendTransactionTypes<LocalCall>, LocalCall>","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":243}],"decl_id":null,"docs":" Submit an unsigned transaction onchain with a signed payload\n","sig":null,"attributes":[{"value":"/ Submit an unsigned transaction onchain with a signed payload","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65610,"byte_end":65674,"line_start":580,"line_end":580,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":238},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65901,"byte_end":65907,"line_start":588,"line_end":588,"column_start":7,"column_end":13},"name":"Result","qualname":"::offchain::SendUnsignedTransaction::Result","value":"type Result;","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" A submission result.","sig":null,"attributes":[{"value":"/ A submission result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65779,"byte_end":65803,"line_start":585,"line_end":585,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65805,"byte_end":65808,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ Should contain the submission result and the account(s) that signed the payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65810,"byte_end":65894,"line_start":587,"line_end":587,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66276,"byte_end":66301,"line_start":596,"line_end":596,"column_start":5,"column_end":30},"name":"send_unsigned_transaction","qualname":"::offchain::SendUnsignedTransaction::send_unsigned_transaction","value":"pub fn send_unsigned_transaction<TPayload, F,\n                                 impl Fn(TPayload, T::Signature) -> LocalCall: Fn(TPayload,\n                                                                                  T::Signature)\n                                 ->\n                                 LocalCall>(&Self, F,\n                                            impl Fn(TPayload, T::Signature) -> LocalCall)\n-> Self::Result where F: Fn(&Account<T>) -> TPayload,\nTPayload: SignedPayload<T>","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Send an unsigned transaction with a signed payload.","sig":null,"attributes":[{"value":"/ Send an unsigned transaction with a signed payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65911,"byte_end":65966,"line_start":590,"line_end":590,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65968,"byte_end":65971,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ This method takes `f` and `f2` where:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":65973,"byte_end":66014,"line_start":592,"line_end":592,"column_start":2,"column_end":43}},{"value":"/ - `f` is called for every account and is expected to return a `SignedPayload` object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66016,"byte_end":66105,"line_start":593,"line_end":593,"column_start":2,"column_end":91}},{"value":"/ - `f2` is then called with the `SignedPayload` returned by `f` and the signature and is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66107,"byte_end":66198,"line_start":594,"line_end":594,"column_start":2,"column_end":93}},{"value":"/ expected to return a `Call` object to be embedded into transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66200,"byte_end":66271,"line_start":595,"line_end":595,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66535,"byte_end":66562,"line_start":606,"line_end":606,"column_start":5,"column_end":32},"name":"submit_unsigned_transaction","qualname":"::offchain::SendUnsignedTransaction::submit_unsigned_transaction","value":"pub fn submit_unsigned_transaction(&Self, LocalCall) -> Option<Result<(), ()>>","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Submits an unsigned call to the transaction pool.\n","sig":null,"attributes":[{"value":"/ Submits an unsigned call to the transaction pool.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66477,"byte_end":66530,"line_start":605,"line_end":605,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":244},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66794,"byte_end":66807,"line_start":616,"line_end":616,"column_start":11,"column_end":24},"name":"SignedPayload","qualname":"::offchain::SignedPayload","value":"SignedPayload<T: SigningTypes>: Encode","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":250}],"decl_id":null,"docs":" Utility trait to be implemented on payloads that can be signed.\n","sig":null,"attributes":[{"value":"/ Utility trait to be implemented on payloads that can be signed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66716,"byte_end":66783,"line_start":615,"line_end":615,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66968,"byte_end":66974,"line_start":619,"line_end":619,"column_start":5,"column_end":11},"name":"public","qualname":"::offchain::SignedPayload::public","value":"pub fn public(&Self) -> T::Public","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Return a public key that is expected to have a matching key in the keystore,\n which should be used to sign the payload.\n","sig":null,"attributes":[{"value":"/ Return a public key that is expected to have a matching key in the keystore,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66836,"byte_end":66916,"line_start":617,"line_end":617,"column_start":2,"column_end":82}},{"value":"/ which should be used to sign the payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66918,"byte_end":66963,"line_start":618,"line_end":618,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67132,"byte_end":67136,"line_start":624,"line_end":624,"column_start":5,"column_end":9},"name":"sign","qualname":"::offchain::SignedPayload::sign","value":"pub fn sign<C: AppCrypto<T::Public, T::Signature>>(&Self)\n-> Option<T::Signature>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Sign the payload using the implementor's provided public key.","sig":null,"attributes":[{"value":"/ Sign the payload using the implementor's provided public key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66998,"byte_end":67063,"line_start":621,"line_end":621,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67065,"byte_end":67068,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ Returns `Some(signature)` if public key is supported.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67070,"byte_end":67127,"line_start":623,"line_end":623,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67395,"byte_end":67401,"line_start":631,"line_end":631,"column_start":5,"column_end":11},"name":"verify","qualname":"::offchain::SignedPayload::verify","value":"pub fn verify<C: AppCrypto<T::Public, T::Signature>>(&Self, T::Signature)\n-> bool","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Verify signature against payload.","sig":null,"attributes":[{"value":"/ Verify signature against payload.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67278,"byte_end":67315,"line_start":628,"line_end":628,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67317,"byte_end":67320,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ Returns a bool indicating whether the signature is valid or not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":67322,"byte_end":67390,"line_start":630,"line_end":630,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":775},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75249,"byte_end":75261,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"CheckGenesis","qualname":"::extensions::check_genesis::CheckGenesis","value":"","parent":null,"children":[],"decl_id":null,"docs":" Genesis hash check to provide replay protection between different networks.\n","sig":null,"attributes":[{"value":"/ Genesis hash check to provide replay protection between different networks.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75110,"byte_end":75189,"line_start":25,"line_end":25,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75749,"byte_end":75752,"line_start":43,"line_end":43,"column_start":9,"column_end":12},"name":"new","qualname":"<CheckGenesis<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new `SignedExtension` to check genesis hash.\n","sig":null,"attributes":[{"value":"/ Creates new `SignedExtension` to check genesis hash.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75684,"byte_end":75740,"line_start":42,"line_end":42,"column_start":2,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77290,"byte_end":77304,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"CheckMortality","qualname":"::extensions::check_mortality::CheckMortality","value":"","parent":null,"children":[],"decl_id":null,"docs":" Check for transaction mortality.\n","sig":null,"attributes":[{"value":"/ Check for transaction mortality.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77194,"byte_end":77230,"line_start":29,"line_end":29,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77485,"byte_end":77489,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"from","qualname":"<CheckMortality<T>>::from","value":"pub fn from(Era) -> Self","parent":null,"children":[],"decl_id":null,"docs":" utility constructor. Used only in client/factory code.\n","sig":null,"attributes":[{"value":"/ utility constructor. Used only in client/factory code.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77418,"byte_end":77476,"line_start":34,"line_end":34,"column_start":2,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":844},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81380,"byte_end":81390,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"CheckNonce","qualname":"::extensions::check_nonce::CheckNonce","value":"","parent":null,"children":[],"decl_id":null,"docs":" Nonce check and increment to give replay protection for transactions.","sig":null,"attributes":[{"value":"/ Nonce check and increment to give replay protection for transactions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81073,"byte_end":81146,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81147,"byte_end":81150,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Note that this does not set any priority by default. Make sure that AT LEAST one of the signed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81151,"byte_end":81249,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ extension sets some kind of priority upon validating transactions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81250,"byte_end":81320,"line_start":36,"line_end":36,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81530,"byte_end":81534,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"from","qualname":"<CheckNonce<T>>::from","value":"pub fn from(T::Index) -> Self","parent":null,"children":[],"decl_id":null,"docs":" utility constructor. Used only in client/factory code.\n","sig":null,"attributes":[{"value":"/ utility constructor. Used only in client/factory code.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81463,"byte_end":81521,"line_start":41,"line_end":41,"column_start":2,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":880},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85181,"byte_end":85197,"line_start":27,"line_end":27,"column_start":12,"column_end":28},"name":"CheckSpecVersion","qualname":"::extensions::check_spec_version::CheckSpecVersion","value":"","parent":null,"children":[],"decl_id":null,"docs":" Ensure the runtime version registered in the transaction is the same as at present.\n","sig":null,"attributes":[{"value":"/ Ensure the runtime version registered in the transaction is the same as at present.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85034,"byte_end":85121,"line_start":25,"line_end":25,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85699,"byte_end":85702,"line_start":43,"line_end":43,"column_start":9,"column_end":12},"name":"new","qualname":"<CheckSpecVersion<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `SignedExtension` to check runtime version.\n","sig":null,"attributes":[{"value":"/ Create new `SignedExtension` to check runtime version.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85632,"byte_end":85690,"line_start":42,"line_end":42,"column_start":2,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":916},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87132,"byte_end":87146,"line_start":27,"line_end":27,"column_start":12,"column_end":26},"name":"CheckTxVersion","qualname":"::extensions::check_tx_version::CheckTxVersion","value":"","parent":null,"children":[],"decl_id":null,"docs":" Ensure the transaction version registered in the transaction is the same as at present.\n","sig":null,"attributes":[{"value":"/ Ensure the transaction version registered in the transaction is the same as at present.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":86981,"byte_end":87072,"line_start":25,"line_end":25,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87646,"byte_end":87649,"line_start":43,"line_end":43,"column_start":9,"column_end":12},"name":"new","qualname":"<CheckTxVersion<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `SignedExtension` to check transaction version.\n","sig":null,"attributes":[{"value":"/ Create new `SignedExtension` to check transaction version.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87575,"byte_end":87637,"line_start":42,"line_end":42,"column_start":2,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":952},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":89369,"byte_end":89380,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"CheckWeight","qualname":"::extensions::check_weight::CheckWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Block resource (weight) limit check.\n","sig":null,"attributes":[{"value":"/ Block resource (weight) limit check.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":89260,"byte_end":89300,"line_start":34,"line_end":34,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":95300,"byte_end":95303,"line_start":178,"line_end":178,"column_start":9,"column_end":12},"name":"new","qualname":"<CheckWeight<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new `SignedExtension` to check weight of the extrinsic.\n","sig":null,"attributes":[{"value":"/ Creates new `SignedExtension` to check weight of the extrinsic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":95224,"byte_end":95291,"line_start":177,"line_end":177,"column_start":2,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":991},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":111779,"byte_end":111795,"line_start":24,"line_end":24,"column_start":12,"column_end":28},"name":"ExtrinsicsWeight","qualname":"::weights::ExtrinsicsWeight","value":"ExtrinsicsWeight {  }","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993}],"decl_id":null,"docs":" An object to track the currently used extrinsic weight in a block.\n","sig":null,"attributes":[{"value":"/ An object to track the currently used extrinsic weight in a block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":111626,"byte_end":111696,"line_start":22,"line_end":22,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":111943,"byte_end":111948,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"name":"total","qualname":"<ExtrinsicsWeight>::total","value":"pub fn total(&Self) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Returns the total weight consumed by all extrinsics in the block.\n","sig":null,"attributes":[{"value":"/ Returns the total weight consumed by all extrinsics in the block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":111865,"byte_end":111934,"line_start":30,"line_end":30,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112124,"byte_end":112127,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"add","qualname":"<ExtrinsicsWeight>::add","value":"pub fn add(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Add some weight of a specific dispatch class, saturating at the numeric bounds of `Weight`.\n","sig":null,"attributes":[{"value":"/ Add some weight of a specific dispatch class, saturating at the numeric bounds of `Weight`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112020,"byte_end":112115,"line_start":35,"line_end":35,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112373,"byte_end":112384,"line_start":43,"line_end":43,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<ExtrinsicsWeight>::checked_add","value":"pub fn checked_add(&mut Self, Weight, DispatchClass) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to add some weight of a specific dispatch class, returning Err(()) if overflow would\n occur.\n","sig":null,"attributes":[{"value":"/ Try to add some weight of a specific dispatch class, returning Err(()) if overflow would","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112260,"byte_end":112352,"line_start":41,"line_end":41,"column_start":2,"column_end":94}},{"value":"/ occur.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112354,"byte_end":112364,"line_start":42,"line_end":42,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112666,"byte_end":112669,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"name":"sub","qualname":"<ExtrinsicsWeight>::sub","value":"pub fn sub(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Subtract some weight of a specific dispatch class, saturating at the numeric bounds of\n `Weight`.\n","sig":null,"attributes":[{"value":"/ Subtract some weight of a specific dispatch class, saturating at the numeric bounds of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112552,"byte_end":112642,"line_start":49,"line_end":49,"column_start":2,"column_end":92}},{"value":"/ `Weight`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112644,"byte_end":112657,"line_start":50,"line_end":50,"column_start":2,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112867,"byte_end":112870,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"name":"get","qualname":"<ExtrinsicsWeight>::get","value":"pub fn get(&Self, DispatchClass) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Get the current weight of a specific dispatch class.\n","sig":null,"attributes":[{"value":"/ Get the current weight of a specific dispatch class.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":112802,"byte_end":112858,"line_start":56,"line_end":56,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":113409,"byte_end":113412,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"name":"put","qualname":"<ExtrinsicsWeight>::put","value":"pub fn put(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Set the weight of a specific dispatch class.\n","sig":null,"attributes":[{"value":"/ Set the weight of a specific dispatch class.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":113352,"byte_end":113400,"line_start":72,"line_end":72,"column_start":2,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5286,"byte_end":5301,"line_start":153,"line_end":153,"column_start":8,"column_end":23},"name":"extrinsics_root","qualname":"::extrinsics_root","value":"pub fn extrinsics_root<H: Hash, E: codec::Encode>(&[E]) -> H::Output","parent":null,"children":[],"decl_id":null,"docs":" Compute the trie root of a list of extrinsics.\n","sig":null,"attributes":[{"value":"/ Compute the trie root of a list of extrinsics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5228,"byte_end":5278,"line_start":152,"line_end":152,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5506,"byte_end":5526,"line_start":158,"line_end":158,"column_start":8,"column_end":28},"name":"extrinsics_data_root","qualname":"::extrinsics_data_root","value":"pub fn extrinsics_data_root<H: Hash>(Vec<Vec<u8>>) -> H::Output","parent":null,"children":[],"decl_id":null,"docs":" Compute the trie root of a list of extrinsics.\n","sig":null,"attributes":[{"value":"/ Compute the trie root of a list of extrinsics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5448,"byte_end":5498,"line_start":157,"line_end":157,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":501},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5610,"byte_end":5620,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"WeightInfo","qualname":"::WeightInfo","value":"WeightInfo","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5627,"byte_end":5633,"line_start":163,"line_end":163,"column_start":5,"column_end":11},"name":"remark","qualname":"::WeightInfo::remark","value":"pub fn remark() -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5651,"byte_end":5665,"line_start":164,"line_end":164,"column_start":5,"column_end":19},"name":"set_heap_pages","qualname":"::WeightInfo::set_heap_pages","value":"pub fn set_heap_pages() -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5683,"byte_end":5706,"line_start":165,"line_end":165,"column_start":5,"column_end":28},"name":"set_changes_trie_config","qualname":"::WeightInfo::set_changes_trie_config","value":"pub fn set_changes_trie_config() -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5724,"byte_end":5735,"line_start":166,"line_end":166,"column_start":5,"column_end":16},"name":"set_storage","qualname":"::WeightInfo::set_storage","value":"pub fn set_storage(u32) -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5761,"byte_end":5773,"line_start":167,"line_end":167,"column_start":5,"column_end":17},"name":"kill_storage","qualname":"::WeightInfo::kill_storage","value":"pub fn kill_storage(u32) -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5799,"byte_end":5810,"line_start":168,"line_end":168,"column_start":5,"column_end":16},"name":"kill_prefix","qualname":"::WeightInfo::kill_prefix","value":"pub fn kill_prefix(u32) -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5836,"byte_end":5843,"line_start":169,"line_end":169,"column_start":5,"column_end":12},"name":"suicide","qualname":"::WeightInfo::suicide","value":"pub fn suicide() -> Weight","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":509},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5870,"byte_end":5875,"line_start":172,"line_end":172,"column_start":11,"column_end":16},"name":"Trait","qualname":"::Trait","value":"Trait: 'static + Eq + Clone","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6017,"byte_end":6031,"line_start":175,"line_end":175,"column_start":7,"column_end":21},"name":"BaseCallFilter","qualname":"::Trait::BaseCallFilter","value":"type BaseCallFilter: Filter<Self::Call>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The basic call filter to use in Origin. All origins are built with this filter as base,\n except Root.\n","sig":null,"attributes":[{"value":"/ The basic call filter to use in Origin. All origins are built with this filter as base,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5901,"byte_end":5992,"line_start":173,"line_end":173,"column_start":2,"column_end":93}},{"value":"/ except Root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5994,"byte_end":6010,"line_start":174,"line_end":174,"column_start":2,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":511},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6111,"byte_end":6117,"line_start":178,"line_end":178,"column_start":7,"column_end":13},"name":"Origin","qualname":"::Trait::Origin","value":"type Origin:\n\t\tInto<Result<RawOrigin<Self::AccountId>, Self::Origin>>\n\t\t+ From<RawOrigin<Self::AccountId>>\n\t\t+ Clone\n\t\t+ OriginTrait<Call = Self::Call>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The `Origin` type used by dispatchable calls.\n","sig":null,"attributes":[{"value":"/ The `Origin` type used by dispatchable calls.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6055,"byte_end":6104,"line_start":177,"line_end":177,"column_start":2,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":512},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6299,"byte_end":6303,"line_start":185,"line_end":185,"column_start":7,"column_end":11},"name":"Call","qualname":"::Trait::Call","value":"type Call: Dispatchable + Debug;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The aggregated `Call` type.\n","sig":null,"attributes":[{"value":"/ The aggregated `Call` type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6261,"byte_end":6292,"line_start":184,"line_end":184,"column_start":2,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6458,"byte_end":6463,"line_start":189,"line_end":189,"column_start":7,"column_end":12},"name":"Index","qualname":"::Trait::Index","value":"type Index:\n\t\tParameter + Member + MaybeSerialize + Debug + Default + MaybeDisplay + AtLeast32Bit\n\t\t+ Copy;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Account index (aka nonce) type. This stores the number of previous transactions associated\n with a sender account.\n","sig":null,"attributes":[{"value":"/ Account index (aka nonce) type. This stores the number of previous transactions associated","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6329,"byte_end":6423,"line_start":187,"line_end":187,"column_start":2,"column_end":96}},{"value":"/ with a sender account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6425,"byte_end":6451,"line_start":188,"line_end":188,"column_start":2,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6616,"byte_end":6627,"line_start":194,"line_end":194,"column_start":7,"column_end":18},"name":"BlockNumber","qualname":"::Trait::BlockNumber","value":"type BlockNumber:\n\t\tParameter + Member + MaybeSerializeDeserialize + Debug + MaybeDisplay +\n\t\tAtLeast32BitUnsigned + Default + Bounded + Copy + sp_std::hash::Hash +\n\t\tsp_std::str::FromStr + MaybeMallocSizeOf;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The block number type used by the runtime.\n","sig":null,"attributes":[{"value":"/ The block number type used by the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6563,"byte_end":6609,"line_start":193,"line_end":193,"column_start":2,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":515},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6870,"byte_end":6874,"line_start":200,"line_end":200,"column_start":7,"column_end":11},"name":"Hash","qualname":"::Trait::Hash","value":"type Hash:\n\t\tParameter + Member + MaybeSerializeDeserialize + Debug + MaybeDisplay + SimpleBitOps + Ord\n\t\t+ Default + Copy + CheckEqual + sp_std::hash::Hash + AsRef<[u8]> + AsMut<[u8]> + MaybeMallocSizeOf;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The output of the `Hashing` function.\n","sig":null,"attributes":[{"value":"/ The output of the `Hashing` function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":6822,"byte_end":6863,"line_start":199,"line_end":199,"column_start":2,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7155,"byte_end":7162,"line_start":205,"line_end":205,"column_start":7,"column_end":14},"name":"Hashing","qualname":"::Trait::Hashing","value":"type Hashing: Hash<Output = Self::Hash>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The hashing system (algorithm) being used in the runtime (e.g. Blake2).\n","sig":null,"attributes":[{"value":"/ The hashing system (algorithm) being used in the runtime (e.g. Blake2).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7073,"byte_end":7148,"line_start":204,"line_end":204,"column_start":2,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7253,"byte_end":7262,"line_start":208,"line_end":208,"column_start":7,"column_end":16},"name":"AccountId","qualname":"::Trait::AccountId","value":"type AccountId: Parameter + Member + MaybeSerializeDeserialize + Debug + MaybeDisplay + Ord\n\t\t+ Default;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The user account identifier type for the runtime.\n","sig":null,"attributes":[{"value":"/ The user account identifier type for the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7193,"byte_end":7246,"line_start":207,"line_end":207,"column_start":2,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":518},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7746,"byte_end":7752,"line_start":217,"line_end":217,"column_start":7,"column_end":13},"name":"Lookup","qualname":"::Trait::Lookup","value":"type Lookup: StaticLookup<Target = Self::AccountId>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Converting trait to take a source type and convert to `AccountId`.","sig":null,"attributes":[{"value":"/ Converting trait to take a source type and convert to `AccountId`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7355,"byte_end":7425,"line_start":211,"line_end":211,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7427,"byte_end":7430,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ Used to define the type and conversion mechanism for referencing accounts in transactions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7432,"byte_end":7526,"line_start":213,"line_end":213,"column_start":2,"column_end":96}},{"value":"/ It's perfectly reasonable for this to be an identity conversion (with the source type being","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7528,"byte_end":7623,"line_start":214,"line_end":214,"column_start":2,"column_end":97}},{"value":"/ `AccountId`), but other modules (e.g. Indices module) may provide more functional/efficient","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7625,"byte_end":7720,"line_start":215,"line_end":215,"column_start":2,"column_end":97}},{"value":"/ alternatives.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7722,"byte_end":7739,"line_start":216,"line_end":216,"column_start":2,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":519},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7824,"byte_end":7830,"line_start":220,"line_end":220,"column_start":7,"column_end":13},"name":"Header","qualname":"::Trait::Header","value":"type Header: Parameter + traits::Header<\n\t\tNumber = Self::BlockNumber,\n\t\tHash = Self::Hash,\n\t>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The block header.\n","sig":null,"attributes":[{"value":"/ The block header.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7796,"byte_end":7817,"line_start":219,"line_end":219,"column_start":2,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7969,"byte_end":7974,"line_start":226,"line_end":226,"column_start":7,"column_end":12},"name":"Event","qualname":"::Trait::Event","value":"type Event: Parameter + Member + From<Event<Self>> + Debug;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The aggregated event type of the runtime.\n","sig":null,"attributes":[{"value":"/ The aggregated event type of the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":7917,"byte_end":7962,"line_start":225,"line_end":225,"column_start":2,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":521},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8121,"byte_end":8135,"line_start":229,"line_end":229,"column_start":7,"column_end":21},"name":"BlockHashCount","qualname":"::Trait::BlockHashCount","value":"type BlockHashCount: Get<Self::BlockNumber>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Maximum number of block number to block hash mappings to keep (oldest pruned first).\n","sig":null,"attributes":[{"value":"/ Maximum number of block number to block hash mappings to keep (oldest pruned first).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8026,"byte_end":8114,"line_start":228,"line_end":228,"column_start":2,"column_end":90}}]},{"kind":"Type","id":{"krate":0,"index":522},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8204,"byte_end":8222,"line_start":232,"line_end":232,"column_start":7,"column_end":25},"name":"MaximumBlockWeight","qualname":"::Trait::MaximumBlockWeight","value":"type MaximumBlockWeight: Get<Weight>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The maximum weight of a block.\n","sig":null,"attributes":[{"value":"/ The maximum weight of a block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8163,"byte_end":8197,"line_start":231,"line_end":231,"column_start":2,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":523},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8315,"byte_end":8323,"line_start":235,"line_end":235,"column_start":7,"column_end":15},"name":"DbWeight","qualname":"::Trait::DbWeight","value":"type DbWeight: Get<RuntimeDbWeight>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The weight of runtime database operations the runtime can invoke.\n","sig":null,"attributes":[{"value":"/ The weight of runtime database operations the runtime can invoke.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8239,"byte_end":8308,"line_start":234,"line_end":234,"column_start":2,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":524},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8443,"byte_end":8463,"line_start":238,"line_end":238,"column_start":7,"column_end":27},"name":"BlockExecutionWeight","qualname":"::Trait::BlockExecutionWeight","value":"type BlockExecutionWeight: Get<Weight>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The base weight of executing a block, independent of the transactions in the block.\n","sig":null,"attributes":[{"value":"/ The base weight of executing a block, independent of the transactions in the block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8349,"byte_end":8436,"line_start":237,"line_end":237,"column_start":2,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":525},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8584,"byte_end":8603,"line_start":241,"line_end":241,"column_start":7,"column_end":26},"name":"ExtrinsicBaseWeight","qualname":"::Trait::ExtrinsicBaseWeight","value":"type ExtrinsicBaseWeight: Get<Weight>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The base weight of an Extrinsic in the block, independent of the of extrinsic being executed.\n","sig":null,"attributes":[{"value":"/ The base weight of an Extrinsic in the block, independent of the of extrinsic being executed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8480,"byte_end":8577,"line_start":240,"line_end":240,"column_start":2,"column_end":99}}]},{"kind":"Type","id":{"krate":0,"index":526},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8841,"byte_end":8863,"line_start":246,"line_end":246,"column_start":7,"column_end":29},"name":"MaximumExtrinsicWeight","qualname":"::Trait::MaximumExtrinsicWeight","value":"type MaximumExtrinsicWeight: Get<Weight>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The maximal weight of a single Extrinsic. This should be set to at most\n `MaximumBlockWeight - AverageOnInitializeWeight`. The limit only applies to extrinsics\n containing `Normal` dispatch class calls.\n","sig":null,"attributes":[{"value":"/ The maximal weight of a single Extrinsic. This should be set to at most","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8620,"byte_end":8695,"line_start":243,"line_end":243,"column_start":2,"column_end":77}},{"value":"/ `MaximumBlockWeight - AverageOnInitializeWeight`. The limit only applies to extrinsics","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8697,"byte_end":8787,"line_start":244,"line_end":244,"column_start":2,"column_end":92}},{"value":"/ containing `Normal` dispatch class calls.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8789,"byte_end":8834,"line_start":245,"line_end":245,"column_start":2,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":527},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8932,"byte_end":8950,"line_start":249,"line_end":249,"column_start":7,"column_end":25},"name":"MaximumBlockLength","qualname":"::Trait::MaximumBlockLength","value":"type MaximumBlockLength: Get<u32>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The maximum length of a block (in bytes).\n","sig":null,"attributes":[{"value":"/ The maximum length of a block (in bytes).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8880,"byte_end":8925,"line_start":248,"line_end":248,"column_start":2,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":528},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9206,"byte_end":9225,"line_start":254,"line_end":254,"column_start":7,"column_end":26},"name":"AvailableBlockRatio","qualname":"::Trait::AvailableBlockRatio","value":"type AvailableBlockRatio: Get<Perbill>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" The portion of the block that is available to normal transaction. The rest can only be used\n by operational transactions. This can be applied to any resource limit managed by the system\n module, including weight and length.\n","sig":null,"attributes":[{"value":"/ The portion of the block that is available to normal transaction. The rest can only be used","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":8964,"byte_end":9059,"line_start":251,"line_end":251,"column_start":2,"column_end":97}},{"value":"/ by operational transactions. This can be applied to any resource limit managed by the system","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9061,"byte_end":9157,"line_start":252,"line_end":252,"column_start":2,"column_end":98}},{"value":"/ module, including weight and length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9159,"byte_end":9199,"line_start":253,"line_end":253,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":529},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9286,"byte_end":9293,"line_start":257,"line_end":257,"column_start":7,"column_end":14},"name":"Version","qualname":"::Trait::Version","value":"type Version: Get<RuntimeVersion>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Get the chain's current version.\n","sig":null,"attributes":[{"value":"/ Get the chain's current version.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9243,"byte_end":9279,"line_start":256,"line_end":256,"column_start":2,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":530},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9589,"byte_end":9599,"line_start":265,"line_end":265,"column_start":7,"column_end":17},"name":"PalletInfo","qualname":"::Trait::PalletInfo","value":"type PalletInfo: PalletInfo;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Provides information about the pallet setup in the runtime.","sig":null,"attributes":[{"value":"/ Provides information about the pallet setup in the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9318,"byte_end":9381,"line_start":259,"line_end":259,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9383,"byte_end":9386,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ Expects the `PalletInfo` type that is being generated by `construct_runtime!` in the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9388,"byte_end":9476,"line_start":261,"line_end":261,"column_start":2,"column_end":90}},{"value":"/ runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9478,"byte_end":9490,"line_start":262,"line_end":262,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9492,"byte_end":9495,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ For tests it is okay to use `()` as type, however it will provide \"useless\" data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9497,"byte_end":9582,"line_start":264,"line_end":264,"column_start":2,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":531},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9743,"byte_end":9754,"line_start":269,"line_end":269,"column_start":7,"column_end":18},"name":"AccountData","qualname":"::Trait::AccountData","value":"type AccountData: Member + FullCodec + Clone + Default;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Data to be associated with an account (other than nonce/transaction counter, which this\n module does regardless).\n","sig":null,"attributes":[{"value":"/ Data to be associated with an account (other than nonce/transaction counter, which this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9615,"byte_end":9706,"line_start":267,"line_end":267,"column_start":2,"column_end":93}},{"value":"/ module does regardless).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9708,"byte_end":9736,"line_start":268,"line_end":268,"column_start":2,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9860,"byte_end":9872,"line_start":272,"line_end":272,"column_start":7,"column_end":19},"name":"OnNewAccount","qualname":"::Trait::OnNewAccount","value":"type OnNewAccount: OnNewAccount<Self::AccountId>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Handler for when a new account has just been created.\n","sig":null,"attributes":[{"value":"/ Handler for when a new account has just been created.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9796,"byte_end":9853,"line_start":271,"line_end":271,"column_start":2,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":533},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10072,"byte_end":10087,"line_start":277,"line_end":277,"column_start":7,"column_end":22},"name":"OnKilledAccount","qualname":"::Trait::OnKilledAccount","value":"type OnKilledAccount: OnKilledAccount<Self::AccountId>;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" A function that is invoked when an account has been determined to be dead.","sig":null,"attributes":[{"value":"/ A function that is invoked when an account has been determined to be dead.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9907,"byte_end":9985,"line_start":274,"line_end":274,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9987,"byte_end":9990,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ All resources should be cleaned up associated with the given account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":9992,"byte_end":10065,"line_start":276,"line_end":276,"column_start":2,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":534},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10130,"byte_end":10146,"line_start":279,"line_end":279,"column_start":7,"column_end":23},"name":"SystemWeightInfo","qualname":"::Trait::SystemWeightInfo","value":"type SystemWeightInfo: WeightInfo;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":535},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10172,"byte_end":10180,"line_start":282,"line_end":282,"column_start":10,"column_end":18},"name":"DigestOf","qualname":"::DigestOf","value":"generic::Digest<<T as Trait>::Hash>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":537},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10232,"byte_end":10244,"line_start":283,"line_end":283,"column_start":10,"column_end":22},"name":"DigestItemOf","qualname":"::DigestItemOf","value":"generic::DigestItem<<T as Trait>::Hash>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":539},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10301,"byte_end":10304,"line_start":285,"line_end":285,"column_start":10,"column_end":13},"name":"Key","qualname":"::Key","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":540},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10325,"byte_end":10333,"line_start":286,"line_end":286,"column_start":10,"column_end":18},"name":"KeyValue","qualname":"::KeyValue","value":"(Vec<u8>, Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1019},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10549,"byte_end":10563,"line_start":293,"line_end":293,"column_start":2,"column_end":16},"name":"ApplyExtrinsic","qualname":"::Phase::ApplyExtrinsic","value":"Phase::ApplyExtrinsic(u32)","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Applying an extrinsic.\n","sig":null,"attributes":[{"value":"/ Applying an extrinsic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10521,"byte_end":10547,"line_start":292,"line_end":292,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1022},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10598,"byte_end":10610,"line_start":295,"line_end":295,"column_start":2,"column_end":14},"name":"Finalization","qualname":"::Phase::Finalization","value":"Phase::Finalization","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Finalizing the block.\n","sig":null,"attributes":[{"value":"/ Finalizing the block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10571,"byte_end":10596,"line_start":294,"line_end":294,"column_start":2,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1024},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10642,"byte_end":10656,"line_start":297,"line_end":297,"column_start":2,"column_end":16},"name":"Initialization","qualname":"::Phase::Initialization","value":"Phase::Initialization","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Initializing the block.\n","sig":null,"attributes":[{"value":"/ Initializing the block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10613,"byte_end":10640,"line_start":296,"line_end":296,"column_start":2,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":1018},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10512,"byte_end":10517,"line_start":291,"line_end":291,"column_start":10,"column_end":15},"name":"Phase","qualname":"::Phase","value":"pub enum Phase {\n\n    /// Applying an extrinsic.\n    ApplyExtrinsic(u32),\n\n    /// Finalizing the block.\n    Finalization,\n\n    /// Initializing the block.\n    Initialization,\n}","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1024}],"decl_id":null,"docs":" A phase of a block's execution.\n","sig":null,"attributes":[{"value":"/ A phase of a block's execution.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10357,"byte_end":10392,"line_start":288,"line_end":288,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1054},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10894,"byte_end":10905,"line_start":309,"line_end":309,"column_start":12,"column_end":23},"name":"EventRecord","qualname":"::EventRecord","value":"EventRecord { phase, event, topics }","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059}],"decl_id":null,"docs":" Record of an event happening.\n","sig":null,"attributes":[{"value":"/ Record of an event happening.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10739,"byte_end":10772,"line_start":306,"line_end":306,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1057},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10983,"byte_end":10988,"line_start":311,"line_end":311,"column_start":6,"column_end":11},"name":"phase","qualname":"::EventRecord::phase","value":"Phase","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The phase of the block it happened in.\n","sig":null,"attributes":[{"value":"/ The phase of the block it happened in.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10935,"byte_end":10977,"line_start":310,"line_end":310,"column_start":2,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1058},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11025,"byte_end":11030,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"name":"event","qualname":"::EventRecord::event","value":"E","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The event itself.\n","sig":null,"attributes":[{"value":"/ The event itself.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10998,"byte_end":11019,"line_start":312,"line_end":312,"column_start":2,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1059},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11084,"byte_end":11090,"line_start":315,"line_end":315,"column_start":6,"column_end":12},"name":"topics","qualname":"::EventRecord::topics","value":"std::vec::Vec<T>","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The list of the topics this event has.\n","sig":null,"attributes":[{"value":"/ The list of the topics this event has.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11036,"byte_end":11078,"line_start":314,"line_end":314,"column_start":2,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1110},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11326,"byte_end":11330,"line_start":322,"line_end":322,"column_start":2,"column_end":6},"name":"Root","qualname":"::RawOrigin::Root","value":"RawOrigin::Root","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" The system itself ordained this dispatch to happen: this is the highest privilege level.\n","sig":null,"attributes":[{"value":"/ The system itself ordained this dispatch to happen: this is the highest privilege level.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11232,"byte_end":11324,"line_start":321,"line_end":321,"column_start":2,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1112},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11402,"byte_end":11408,"line_start":324,"line_end":324,"column_start":2,"column_end":8},"name":"Signed","qualname":"::RawOrigin::Signed","value":"RawOrigin::Signed(AccountId)","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" It is signed by some public key and we provide the `AccountId`.\n","sig":null,"attributes":[{"value":"/ It is signed by some public key and we provide the `AccountId`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11333,"byte_end":11400,"line_start":323,"line_end":323,"column_start":2,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1115},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11578,"byte_end":11582,"line_start":328,"line_end":328,"column_start":2,"column_end":6},"name":"None","qualname":"::RawOrigin::None","value":"RawOrigin::None","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" It is signed by nobody, can be either:\n * included and agreed upon by the validators anyway,\n * or unsigned transaction validated by a module.\n","sig":null,"attributes":[{"value":"/ It is signed by nobody, can be either:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11422,"byte_end":11464,"line_start":325,"line_end":325,"column_start":2,"column_end":44}},{"value":"/ * included and agreed upon by the validators anyway,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11466,"byte_end":11522,"line_start":326,"line_end":326,"column_start":2,"column_end":58}},{"value":"/ * or unsigned transaction validated by a module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11524,"byte_end":11576,"line_start":327,"line_end":327,"column_start":2,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":1108},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11208,"byte_end":11217,"line_start":320,"line_end":320,"column_start":10,"column_end":19},"name":"RawOrigin","qualname":"::RawOrigin","value":"pub enum RawOrigin<AccountId> {\n\n    /// The system itself ordained this dispatch to happen: this is the highest privilege level.\n    Root,\n\n    /// It is signed by some public key and we provide the `AccountId`.\n    Signed(AccountId),\n\n    /// It is signed by nobody, can be either:\n    /// * included and agreed upon by the validators anyway,\n    /// * or unsigned transaction validated by a module.\n    None,\n}","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1115}],"decl_id":null,"docs":" Origin for the System module.\n","sig":null,"attributes":[{"value":"/ Origin for the System module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11103,"byte_end":11136,"line_start":318,"line_end":318,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":546},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11849,"byte_end":11855,"line_start":341,"line_end":341,"column_start":10,"column_end":16},"name":"Origin","qualname":"::Origin","value":"RawOrigin<<T as Trait>::AccountId>","parent":null,"children":[],"decl_id":null,"docs":" Exposed trait-generic origin type.\n","sig":null,"attributes":[{"value":"/ Exposed trait-generic origin type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11801,"byte_end":11839,"line_start":340,"line_end":340,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":552},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12419,"byte_end":12427,"line_start":359,"line_end":359,"column_start":10,"column_end":18},"name":"RefCount","qualname":"::RefCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Type used to encode the number of references an account has.\n","sig":null,"attributes":[{"value":"/ Type used to encode the number of references an account has.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12345,"byte_end":12409,"line_start":358,"line_end":358,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12549,"byte_end":12560,"line_start":363,"line_end":363,"column_start":12,"column_end":23},"name":"AccountInfo","qualname":"::AccountInfo","value":"AccountInfo { nonce, refcount, data }","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"decl_id":null,"docs":" Information of an account.\n","sig":null,"attributes":[{"value":"/ Information of an account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12436,"byte_end":12466,"line_start":361,"line_end":361,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1151},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12643,"byte_end":12648,"line_start":365,"line_end":365,"column_start":6,"column_end":11},"name":"nonce","qualname":"::AccountInfo::nonce","value":"Index","parent":{"krate":0,"index":1148},"children":[],"decl_id":null,"docs":" The number of transactions this account has sent.\n","sig":null,"attributes":[{"value":"/ The number of transactions this account has sent.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12584,"byte_end":12637,"line_start":364,"line_end":364,"column_start":2,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1152},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12800,"byte_end":12808,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"name":"refcount","qualname":"::AccountInfo::refcount","value":"u32","parent":{"krate":0,"index":1148},"children":[],"decl_id":null,"docs":" The number of other modules that currently depend on this account's existence. The account\n cannot be reaped until this is zero.\n","sig":null,"attributes":[{"value":"/ The number of other modules that currently depend on this account's existence. The account","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12658,"byte_end":12752,"line_start":366,"line_end":366,"column_start":2,"column_end":96}},{"value":"/ cannot be reaped until this is zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12754,"byte_end":12794,"line_start":367,"line_end":367,"column_start":2,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1153},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12934,"byte_end":12938,"line_start":371,"line_end":371,"column_start":6,"column_end":10},"name":"data","qualname":"::AccountInfo::data","value":"AccountData","parent":{"krate":0,"index":1148},"children":[],"decl_id":null,"docs":" The additional data that belongs to this account. Used to store the balance(s) in a lot of\n chains.\n","sig":null,"attributes":[{"value":"/ The additional data that belongs to this account. Used to store the balance(s) in a lot of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12821,"byte_end":12915,"line_start":369,"line_end":369,"column_start":2,"column_end":96}},{"value":"/ chains.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12917,"byte_end":12928,"line_start":370,"line_end":370,"column_start":2,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":1198},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13160,"byte_end":13182,"line_start":378,"line_end":378,"column_start":12,"column_end":34},"name":"LastRuntimeUpgradeInfo","qualname":"::LastRuntimeUpgradeInfo","value":"LastRuntimeUpgradeInfo { spec_version, spec_name }","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200}],"decl_id":null,"docs":" Stores the `spec_version` and `spec_name` of when the last runtime upgrade\n happened.\n","sig":null,"attributes":[{"value":"/ Stores the `spec_version` and `spec_name` of when the last runtime upgrade","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":12956,"byte_end":13034,"line_start":374,"line_end":374,"column_start":1,"column_end":79}},{"value":"/ happened.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13035,"byte_end":13048,"line_start":375,"line_end":375,"column_start":1,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":1199},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13190,"byte_end":13202,"line_start":379,"line_end":379,"column_start":6,"column_end":18},"name":"spec_version","qualname":"::LastRuntimeUpgradeInfo::spec_version","value":"_::_parity_scale_codec::Compact<u32>","parent":{"krate":0,"index":1198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1200},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13230,"byte_end":13239,"line_start":380,"line_end":380,"column_start":6,"column_end":15},"name":"spec_name","qualname":"::LastRuntimeUpgradeInfo::spec_name","value":"sp_runtime::RuntimeString","parent":{"krate":0,"index":1198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13473,"byte_end":13485,"line_start":387,"line_end":387,"column_start":9,"column_end":21},"name":"was_upgraded","qualname":"<LastRuntimeUpgradeInfo>::was_upgraded","value":"pub fn was_upgraded(&Self, &sp_version::RuntimeVersion) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the runtime was upgraded in comparison of `self` and `current`.","sig":null,"attributes":[{"value":"/ Returns if the runtime was upgraded in comparison of `self` and `current`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13302,"byte_end":13380,"line_start":384,"line_end":384,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13382,"byte_end":13385,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ Checks if either the `spec_version` increased or the `spec_name` changed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13387,"byte_end":13464,"line_start":386,"line_end":386,"column_start":2,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1228},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13984,"byte_end":13991,"line_start":404,"line_end":404,"column_start":7,"column_end":14},"name":"Account","qualname":"::Store::Account","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1229},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14152,"byte_end":14166,"line_start":408,"line_end":408,"column_start":3,"column_end":17},"name":"ExtrinsicCount","qualname":"::Store::ExtrinsicCount","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1230},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14224,"byte_end":14235,"line_start":411,"line_end":411,"column_start":3,"column_end":14},"name":"BlockWeight","qualname":"::Store::BlockWeight","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1231},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14374,"byte_end":14390,"line_start":414,"line_end":414,"column_start":3,"column_end":19},"name":"AllExtrinsicsLen","qualname":"::Store::AllExtrinsicsLen","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1232},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14456,"byte_end":14465,"line_start":417,"line_end":417,"column_start":7,"column_end":16},"name":"BlockHash","qualname":"::Store::BlockHash","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1233},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14683,"byte_end":14696,"line_start":421,"line_end":421,"column_start":3,"column_end":16},"name":"ExtrinsicData","qualname":"::Store::ExtrinsicData","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1234},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14839,"byte_end":14845,"line_start":424,"line_end":424,"column_start":3,"column_end":9},"name":"Number","qualname":"::Store::Number","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1235},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14921,"byte_end":14931,"line_start":427,"line_end":427,"column_start":3,"column_end":13},"name":"ParentHash","qualname":"::Store::ParentHash","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1236},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15060,"byte_end":15074,"line_start":430,"line_end":430,"column_start":3,"column_end":17},"name":"ExtrinsicsRoot","qualname":"::Store::ExtrinsicsRoot","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1237},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15178,"byte_end":15184,"line_start":433,"line_end":433,"column_start":3,"column_end":9},"name":"Digest","qualname":"::Store::Digest","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1238},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15263,"byte_end":15269,"line_start":436,"line_end":436,"column_start":3,"column_end":9},"name":"Events","qualname":"::Store::Events","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1239},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15378,"byte_end":15388,"line_start":439,"line_end":439,"column_start":3,"column_end":13},"name":"EventCount","qualname":"::Store::EventCount","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1240},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16289,"byte_end":16300,"line_start":456,"line_end":456,"column_start":3,"column_end":14},"name":"EventTopics","qualname":"::Store::EventTopics","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1241},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16497,"byte_end":16515,"line_start":459,"line_end":459,"column_start":7,"column_end":25},"name":"LastRuntimeUpgrade","qualname":"::Store::LastRuntimeUpgrade","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1242},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16706,"byte_end":16727,"line_start":462,"line_end":462,"column_start":3,"column_end":24},"name":"UpgradedToU32RefCount","qualname":"::Store::UpgradedToU32RefCount","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1243},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16794,"byte_end":16808,"line_start":465,"line_end":465,"column_start":3,"column_end":17},"name":"ExecutionPhase","qualname":"::Store::ExecutionPhase","value":"decl_storage! {\n\ttrait Store for Module<T: Trait> as System {\n\t\t/// The full account information for a particular account ID.\n\t\tpub Account get(fn account):\n\t\t\tmap hasher(blake2_128_concat) T::AccountId => AccountInfo<T::Index, T::AccountData>;\n\n\t\t/// Total extrinsics count for the current block.\n\t\tExtrinsicCount: Option<u32>;\n\n\t\t/// The current weight for the block.\n\t\tBlockWeight get(fn block_weight): weights::ExtrinsicsWeight;\n\n\t\t/// Total length (in bytes) for all extrinsics put together, for the current block.\n\t\tAllExtrinsicsLen: Option<u32>;\n\n\t\t/// Map of block numbers to block hashes.\n\t\tpub BlockHash get(fn block_hash) build(|_| vec![(T::BlockNumber::zero(), hash69())]):\n\t\t\tmap hasher(twox_64_concat) T::BlockNumber => T::Hash;\n\n\t\t/// Extrinsics data for the current block (maps an extrinsic's index to its data).\n\t\tExtrinsicData get(fn extrinsic_data): map hasher(twox_64_concat) u32 => Vec<u8>;\n\n\t\t/// The current block number being processed. Set by `execute_block`.\n\t\tNumber get(fn block_number): T::BlockNumber;\n\n\t\t/// Hash of the previous block.\n\t\tParentHash get(fn parent_hash) build(|_| hash69()): T::Hash;\n\n\t\t/// Extrinsics root of the current block, also part of the block header.\n\t\tExtrinsicsRoot get(fn extrinsics_root): T::Hash;\n\n\t\t/// Digest of the current block, also part of the block header.\n\t\tDigest get(fn digest): DigestOf<T>;\n\n\t\t/// Events deposited for the current block.\n\t\tEvents get(fn events): Vec<EventRecord<T::Event, T::Hash>>;\n\n\t\t/// The number of events in the `Events<T>` list.\n\t\tEventCount get(fn event_count): EventIndex;\n\n\t\t// TODO: https://github.com/paritytech/substrate/issues/2553\n\t\t// Possibly, we can improve it by using something like:\n\t\t// `Option<(BlockNumber, Vec<EventIndex>)>`, however in this case we won't be able to use\n\t\t// `EventTopics::append`.\n\n\t\t/// Mapping between a topic (represented by T::Hash) and a vector of indexes\n\t\t/// of events in the `<Events<T>>` list.\n\t\t///\n\t\t/// All topic vectors have deterministic storage locations depending on the topic. This\n\t\t/// allows light-clients to leverage the changes trie storage tracking mechanism and\n\t\t/// in case of changes fetch the list of events of interest.\n\t\t///\n\t\t/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only just\n\t\t/// the `EventIndex` then in case if the topic has the same contents on the next block\n\t\t/// no notification will be triggered thus the event might be lost.\n\t\tEventTopics get(fn event_topics): map hasher(blake2_128_concat) T::Hash => Vec<(T::BlockNumber, EventIndex)>;\n\n\t\t/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n\t\tpub LastRuntimeUpgrade build(|_| Some(LastRuntimeUpgradeInfo::from(T::Version::get()))): Option<LastRuntimeUpgradeInfo>;\n\n\t\t/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.\n\t\tUpgradedToU32RefCount build(|_| true): bool;\n\n\t\t/// The execution phase of the block.\n\t\tExecutionPhase: Option<Phase>;\n\t}\n\tadd_extra_genesis {\n\t\tconfig(changes_trie_config): Option<ChangesTrieConfiguration>;\n\t\t#[serde(with = \"sp_core::bytes\")]\n\t\tconfig(code): Vec<u8>;\n\n\t\tbuild(|config: &GenesisConfig| {\n\t\t\tuse codec::Encode;\n\n\t\t\tsp_io::storage::set(well_known_keys::CODE, &config.code);\n\t\t\tsp_io::storage::set(well_known_keys::EXTRINSIC_INDEX, &0u32.encode());\n\n\t\t\tif let Some(ref changes_trie_config) = config.changes_trie_config {\n\t\t\t\tsp_io::storage::set(\n\t\t\t\t\twell_known_keys::CHANGES_TRIE_CONFIG,\n\t\t\t\t\t&changes_trie_config.encode(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13999,"byte_end":14006,"line_start":404,"line_end":404,"column_start":22,"column_end":29},"name":"account","qualname":"<Module<T>>::account","value":"pub fn account<K: self::sp_api_hidden_includes_decl_storage::hidden_include::codec::EncodeLike<T::AccountId>>(K)\n-> AccountInfo<T::Index, T::AccountData>","parent":null,"children":[],"decl_id":null,"docs":" The full account information for a particular account ID.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14243,"byte_end":14255,"line_start":411,"line_end":411,"column_start":22,"column_end":34},"name":"block_weight","qualname":"<Module<T>>::block_weight","value":"pub fn block_weight() -> weights::ExtrinsicsWeight","parent":null,"children":[],"decl_id":null,"docs":" The current weight for the block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14473,"byte_end":14483,"line_start":417,"line_end":417,"column_start":24,"column_end":34},"name":"block_hash","qualname":"<Module<T>>::block_hash","value":"pub fn block_hash<K: self::sp_api_hidden_includes_decl_storage::hidden_include::codec::EncodeLike<T::BlockNumber>>(K)\n-> T::Hash","parent":null,"children":[],"decl_id":null,"docs":" Map of block numbers to block hashes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14704,"byte_end":14718,"line_start":421,"line_end":421,"column_start":24,"column_end":38},"name":"extrinsic_data","qualname":"<Module<T>>::extrinsic_data","value":"pub fn extrinsic_data<K: self::sp_api_hidden_includes_decl_storage::hidden_include::codec::EncodeLike<u32>>(K)\n-> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Extrinsics data for the current block (maps an extrinsic's index to its data).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14853,"byte_end":14865,"line_start":424,"line_end":424,"column_start":17,"column_end":29},"name":"block_number","qualname":"<Module<T>>::block_number","value":"pub fn block_number() -> T::BlockNumber","parent":null,"children":[],"decl_id":null,"docs":" The current block number being processed. Set by `execute_block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14939,"byte_end":14950,"line_start":427,"line_end":427,"column_start":21,"column_end":32},"name":"parent_hash","qualname":"<Module<T>>::parent_hash","value":"pub fn parent_hash() -> T::Hash","parent":null,"children":[],"decl_id":null,"docs":" Hash of the previous block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15082,"byte_end":15097,"line_start":430,"line_end":430,"column_start":25,"column_end":40},"name":"extrinsics_root","qualname":"<Module<T>>::extrinsics_root","value":"pub fn extrinsics_root() -> T::Hash","parent":null,"children":[],"decl_id":null,"docs":" Extrinsics root of the current block, also part of the block header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15192,"byte_end":15198,"line_start":433,"line_end":433,"column_start":17,"column_end":23},"name":"digest","qualname":"<Module<T>>::digest","value":"pub fn digest() -> DigestOf<T>","parent":null,"children":[],"decl_id":null,"docs":" Digest of the current block, also part of the block header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15277,"byte_end":15283,"line_start":436,"line_end":436,"column_start":17,"column_end":23},"name":"events","qualname":"<Module<T>>::events","value":"pub fn events() -> Vec<EventRecord<T::Event, T::Hash>>","parent":null,"children":[],"decl_id":null,"docs":" Events deposited for the current block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15396,"byte_end":15407,"line_start":439,"line_end":439,"column_start":21,"column_end":32},"name":"event_count","qualname":"<Module<T>>::event_count","value":"pub fn event_count() -> EventIndex","parent":null,"children":[],"decl_id":null,"docs":" The number of events in the `Events<T>` list.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16308,"byte_end":16320,"line_start":456,"line_end":456,"column_start":22,"column_end":34},"name":"event_topics","qualname":"<Module<T>>::event_topics","value":"pub fn event_topics<K: self::sp_api_hidden_includes_decl_storage::hidden_include::codec::EncodeLike<T::Hash>>(K)\n-> Vec<(T::BlockNumber, EventIndex)>","parent":null,"children":[],"decl_id":null,"docs":" Mapping between a topic (represented by T::Hash) and a vector of indexes\n of events in the `<Events<T>>` list.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1279},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13984,"byte_end":13991,"line_start":404,"line_end":404,"column_start":7,"column_end":14},"name":"__GetByteStructAccount","qualname":"::__GetByteStructAccount","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1293},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14152,"byte_end":14166,"line_start":408,"line_end":408,"column_start":3,"column_end":17},"name":"__GetByteStructExtrinsicCount","qualname":"::__GetByteStructExtrinsicCount","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1307},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14224,"byte_end":14235,"line_start":411,"line_end":411,"column_start":3,"column_end":14},"name":"__GetByteStructBlockWeight","qualname":"::__GetByteStructBlockWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14374,"byte_end":14390,"line_start":414,"line_end":414,"column_start":3,"column_end":19},"name":"__GetByteStructAllExtrinsicsLen","qualname":"::__GetByteStructAllExtrinsicsLen","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1335},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14456,"byte_end":14465,"line_start":417,"line_end":417,"column_start":7,"column_end":16},"name":"__GetByteStructBlockHash","qualname":"::__GetByteStructBlockHash","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1349},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14683,"byte_end":14696,"line_start":421,"line_end":421,"column_start":3,"column_end":16},"name":"__GetByteStructExtrinsicData","qualname":"::__GetByteStructExtrinsicData","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1363},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14839,"byte_end":14845,"line_start":424,"line_end":424,"column_start":3,"column_end":9},"name":"__GetByteStructNumber","qualname":"::__GetByteStructNumber","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1377},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14921,"byte_end":14931,"line_start":427,"line_end":427,"column_start":3,"column_end":13},"name":"__GetByteStructParentHash","qualname":"::__GetByteStructParentHash","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1391},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15060,"byte_end":15074,"line_start":430,"line_end":430,"column_start":3,"column_end":17},"name":"__GetByteStructExtrinsicsRoot","qualname":"::__GetByteStructExtrinsicsRoot","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1405},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15178,"byte_end":15184,"line_start":433,"line_end":433,"column_start":3,"column_end":9},"name":"__GetByteStructDigest","qualname":"::__GetByteStructDigest","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1419},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15263,"byte_end":15269,"line_start":436,"line_end":436,"column_start":3,"column_end":9},"name":"__GetByteStructEvents","qualname":"::__GetByteStructEvents","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1433},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":15378,"byte_end":15388,"line_start":439,"line_end":439,"column_start":3,"column_end":13},"name":"__GetByteStructEventCount","qualname":"::__GetByteStructEventCount","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1447},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16289,"byte_end":16300,"line_start":456,"line_end":456,"column_start":3,"column_end":14},"name":"__GetByteStructEventTopics","qualname":"::__GetByteStructEventTopics","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1461},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16497,"byte_end":16515,"line_start":459,"line_end":459,"column_start":7,"column_end":25},"name":"__GetByteStructLastRuntimeUpgrade","qualname":"::__GetByteStructLastRuntimeUpgrade","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1475},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16706,"byte_end":16727,"line_start":462,"line_end":462,"column_start":3,"column_end":24},"name":"__GetByteStructUpgradedToU32RefCount","qualname":"::__GetByteStructUpgradedToU32RefCount","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1489},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16794,"byte_end":16808,"line_start":465,"line_end":465,"column_start":3,"column_end":17},"name":"__GetByteStructExecutionPhase","qualname":"::__GetByteStructExecutionPhase","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1746},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16858,"byte_end":16877,"line_start":468,"line_end":468,"column_start":10,"column_end":29},"name":"changes_trie_config","qualname":"::GenesisConfig::changes_trie_config","value":"std::option::Option<sp_core::ChangesTrieConfiguration>","parent":{"krate":0,"index":1745},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1747},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16959,"byte_end":16963,"line_start":470,"line_end":470,"column_start":10,"column_end":14},"name":"code","qualname":"::GenesisConfig::code","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1745},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(with = \"sp_core::bytes\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13852,"byte_end":17367,"line_start":401,"line_end":486,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1527},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13984,"byte_end":13991,"line_start":404,"line_end":404,"column_start":7,"column_end":14},"name":"Account","qualname":"::Account","value":"","parent":null,"children":[],"decl_id":null,"docs":" The full account information for a particular account ID.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":14456,"byte_end":14465,"line_start":417,"line_end":417,"column_start":7,"column_end":16},"name":"BlockHash","qualname":"::BlockHash","value":"","parent":null,"children":[],"decl_id":null,"docs":" Map of block numbers to block hashes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":16497,"byte_end":16515,"line_start":459,"line_end":459,"column_start":7,"column_end":25},"name":"LastRuntimeUpgrade","qualname":"::LastRuntimeUpgrade","value":"","parent":null,"children":[],"decl_id":null,"docs":" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1884},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18018,"byte_end":18033,"line_start":509,"line_end":509,"column_start":3,"column_end":18},"name":"InvalidSpecName","qualname":"::Error::InvalidSpecName","value":"Error::InvalidSpecName","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" The name of specification does not match between the current runtime\n and the new runtime.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1886},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18151,"byte_end":18177,"line_start":512,"line_end":512,"column_start":3,"column_end":29},"name":"SpecVersionNeedsToIncrease","qualname":"::Error::SpecVersionNeedsToIncrease","value":"Error::SpecVersionNeedsToIncrease","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" The specification version is not allowed to decrease between the current runtime\n and the new runtime.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1888},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18326,"byte_end":18355,"line_start":516,"line_end":516,"column_start":3,"column_end":32},"name":"FailedToExtractRuntimeVersion","qualname":"::Error::FailedToExtractRuntimeVersion","value":"Error::FailedToExtractRuntimeVersion","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" Failed to extract the runtime version from the new runtime.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1890},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18429,"byte_end":18448,"line_start":518,"line_end":518,"column_start":3,"column_end":22},"name":"NonDefaultComposite","qualname":"::Error::NonDefaultComposite","value":"Error::NonDefaultComposite","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" Suicide called when the account has non-default composite data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1892},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18536,"byte_end":18551,"line_start":520,"line_end":520,"column_start":3,"column_end":18},"name":"NonZeroRefCount","qualname":"::Error::NonZeroRefCount","value":"Error::NonZeroRefCount","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" There is a non-zero reference count preventing the account from being purged.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1878},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":17885,"byte_end":17890,"line_start":506,"line_end":506,"column_start":11,"column_end":16},"name":"Error","qualname":"::Error","value":"pub enum Error<T: Trait> {\n\n    #[doc(hidden)]\n    __Ignore(::frame_support::sp_std::marker::PhantomData<(T,)>,\n             ::frame_support::Never),\n\n    #[doc =\n      r\" The name of specification does not match between the current runtime\"]\n    #[doc = r\" and the new runtime.\"]\n    InvalidSpecName,\n\n    #[doc =\n      r\" The specification version is not allowed to decrease between the current runtime\"]\n    #[doc = r\" and the new runtime.\"]\n    SpecVersionNeedsToIncrease,\n\n    #[doc = r\" Failed to extract the runtime version from the new runtime.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" Either calling `Core_version` or decoding `RuntimeVersion` failed.\"]\n    FailedToExtractRuntimeVersion,\n\n    #[doc =\n      r\" Suicide called when the account has non-default composite data.\"]\n    NonDefaultComposite,\n\n    #[doc =\n      r\" There is a non-zero reference count preventing the account from being purged.\"]\n    NonZeroRefCount,\n}","parent":null,"children":[{"krate":0,"index":1880},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892}],"decl_id":null,"docs":" Error for the System module\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1940},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18586,"byte_end":18592,"line_start":525,"line_end":525,"column_start":13,"column_end":19},"name":"Module","qualname":"::Module","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":21489,"byte_end":21497,"line_start":603,"line_end":603,"column_start":10,"column_end":18},"name":"set_code","qualname":"<Module<T>>::set_code","value":"pub fn set_code(T::Origin, Vec<u8>)\n-> ::frame_support::dispatch::DispatchResult","parent":null,"children":[],"decl_id":null,"docs":" Set the new runtime code.","sig":null,"attributes":[{"value":"allow(unreachable_code)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9609357,"byte_end":9609383,"line_start":1463,"line_end":1463,"column_start":3,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":22091,"byte_end":22114,"line_start":620,"line_end":620,"column_start":10,"column_end":33},"name":"set_code_without_checks","qualname":"<Module<T>>::set_code_without_checks","value":"pub fn set_code_without_checks(T::Origin, Vec<u8>)\n-> ::frame_support::dispatch::DispatchResult","parent":null,"children":[],"decl_id":null,"docs":" Set the new runtime code without doing any checks of the given `code`.","sig":null,"attributes":[{"value":"allow(unreachable_code)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9609357,"byte_end":9609383,"line_start":1463,"line_end":1463,"column_start":3,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":22688,"byte_end":22711,"line_start":637,"line_end":637,"column_start":10,"column_end":33},"name":"set_changes_trie_config","qualname":"<Module<T>>::set_changes_trie_config","value":"pub fn set_changes_trie_config(T::Origin, Option<ChangesTrieConfiguration>)\n-> ::frame_support::dispatch::DispatchResult","parent":null,"children":[],"decl_id":null,"docs":" Set the new changes trie configuration.","sig":null,"attributes":[{"value":"allow(unreachable_code)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9609357,"byte_end":9609383,"line_start":1463,"line_end":1463,"column_start":3,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":25350,"byte_end":25357,"line_start":722,"line_end":722,"column_start":10,"column_end":17},"name":"suicide","qualname":"<Module<T>>::suicide","value":"pub fn suicide(T::Origin) -> ::frame_support::dispatch::DispatchResult","parent":null,"children":[],"decl_id":null,"docs":" Kill the sending account, assuming there are no references outstanding and the composite\n data is equal to its default value.","sig":null,"attributes":[{"value":"allow(unreachable_code)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9609357,"byte_end":9609383,"line_start":1463,"line_end":1463,"column_start":3,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2031},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":20148,"byte_end":20158,"line_start":562,"line_end":562,"column_start":6,"column_end":16},"name":"fill_block","qualname":"::Call::fill_block","value":"Call::fill_block(Perbill)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" A dispatch that will fill the block weight up to the given ratio.\n","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2034},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":20442,"byte_end":20448,"line_start":574,"line_end":574,"column_start":6,"column_end":12},"name":"remark","qualname":"::Call::remark","value":"Call::remark(Vec<u8>)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Make some on-chain remark.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2037},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":20807,"byte_end":20821,"line_start":587,"line_end":587,"column_start":6,"column_end":20},"name":"set_heap_pages","qualname":"::Call::set_heap_pages","value":"Call::set_heap_pages(u64)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Set the number of pages in the WebAssembly environment's heap.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2040},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":21489,"byte_end":21497,"line_start":603,"line_end":603,"column_start":10,"column_end":18},"name":"set_code","qualname":"::Call::set_code","value":"Call::set_code(Vec<u8>)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Set the new runtime code.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2043},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":22091,"byte_end":22114,"line_start":620,"line_end":620,"column_start":10,"column_end":33},"name":"set_code_without_checks","qualname":"::Call::set_code_without_checks","value":"Call::set_code_without_checks(Vec<u8>)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Set the new runtime code without doing any checks of the given `code`.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2046},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":22688,"byte_end":22711,"line_start":637,"line_end":637,"column_start":10,"column_end":33},"name":"set_changes_trie_config","qualname":"::Call::set_changes_trie_config","value":"Call::set_changes_trie_config(Option<ChangesTrieConfiguration>)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Set the new changes trie configuration.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2049},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":23572,"byte_end":23583,"line_start":665,"line_end":665,"column_start":6,"column_end":17},"name":"set_storage","qualname":"::Call::set_storage","value":"Call::set_storage(Vec<KeyValue>)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Set some items of storage.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2052},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":24072,"byte_end":24084,"line_start":684,"line_end":684,"column_start":6,"column_end":18},"name":"kill_storage","qualname":"::Call::kill_storage","value":"Call::kill_storage(Vec<Key>)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Kill some items from storage.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2055},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":24782,"byte_end":24793,"line_start":706,"line_end":706,"column_start":6,"column_end":17},"name":"kill_prefix","qualname":"::Call::kill_prefix","value":"Call::kill_prefix(Key, u32)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Kill all storage items with a key that starts with the given prefix.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":25350,"byte_end":25357,"line_start":722,"line_end":722,"column_start":10,"column_end":17},"name":"suicide","qualname":"::Call::suicide","value":"Call::suicide()","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":" Kill the sending account, assuming there are no references outstanding and the composite\n data is equal to its default value.","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612413,"byte_end":9612443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":2029},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":18612,"byte_end":18616,"line_start":525,"line_end":525,"column_start":39,"column_end":43},"name":"Call","qualname":"::Call","value":"pub enum Call<T: Trait> {\n\n    #[doc(hidden)]\n    #[codec(skip)]\n    __PhantomItem(::frame_support::sp_std::marker::PhantomData<(T,)>,\n                  ::frame_support::Never),\n\n    #[allow(non_camel_case_types)]\n    #[doc =\n      r\" A dispatch that will fill the block weight up to the given ratio.\"]\n    fill_block(Perbill),\n\n    #[allow(non_camel_case_types)]\n    #[doc = r\" Make some on-chain remark.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(1)`\"]\n    #[doc = r\" - Base Weight: 0.665 µs, independent of remark length.\"]\n    #[doc = r\" - No DB operations.\"]\n    #[doc = r\" # </weight>\"]\n    remark(Vec<u8>),\n\n    #[allow(non_camel_case_types)]\n    #[doc =\n      r\" Set the number of pages in the WebAssembly environment's heap.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(1)`\"]\n    #[doc = r\" - 1 storage write.\"]\n    #[doc = r\" - Base Weight: 1.405 µs\"]\n    #[doc = r\" - 1 write to HEAP_PAGES\"]\n    #[doc = r\" # </weight>\"]\n    set_heap_pages(u64),\n\n    #[allow(non_camel_case_types)]\n    #[doc = r\" Set the new runtime code.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc =\n      r\" - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`\"]\n    #[doc = r\" - 1 storage write (codec `O(C)`).\"]\n    #[doc =\n      r\" - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).\"]\n    #[doc = r\" - 1 event.\"]\n    #[doc =\n      r\" The weight of this function is dependent on the runtime, but generally this is very expensive.\"]\n    #[doc = r\" We will treat this as a full block.\"]\n    #[doc = r\" # </weight>\"]\n    set_code(Vec<u8>),\n\n    #[allow(non_camel_case_types)]\n    #[doc =\n      r\" Set the new runtime code without doing any checks of the given `code`.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(C)` where `C` length of `code`\"]\n    #[doc = r\" - 1 storage write (codec `O(C)`).\"]\n    #[doc = r\" - 1 event.\"]\n    #[doc =\n      r\" The weight of this function is dependent on the runtime. We will treat this as a full block.\"]\n    #[doc = r\" # </weight>\"]\n    set_code_without_checks(Vec<u8>),\n\n    #[allow(non_camel_case_types)]\n    #[doc = r\" Set the new changes trie configuration.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(1)`\"]\n    #[doc = r\" - 1 storage write or delete (codec `O(1)`).\"]\n    #[doc = r\" - 1 call to `deposit_log`: Uses `append` API, so O(1)\"]\n    #[doc = r\" - Base Weight: 7.218 µs\"]\n    #[doc = r\" - DB Weight:\"]\n    #[doc = r\"     - Writes: Changes Trie, System Digest\"]\n    #[doc = r\" # </weight>\"]\n    set_changes_trie_config(Option<ChangesTrieConfiguration>),\n\n    #[allow(non_camel_case_types)]\n    #[doc = r\" Set some items of storage.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(I)` where `I` length of `items`\"]\n    #[doc = r\" - `I` storage writes (`O(1)`).\"]\n    #[doc = r\" - Base Weight: 0.568 * i µs\"]\n    #[doc = r\" - Writes: Number of items\"]\n    #[doc = r\" # </weight>\"]\n    set_storage(Vec<KeyValue>),\n\n    #[allow(non_camel_case_types)]\n    #[doc = r\" Kill some items from storage.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc =\n      r\" - `O(IK)` where `I` length of `keys` and `K` length of one key\"]\n    #[doc = r\" - `I` storage deletions.\"]\n    #[doc = r\" - Base Weight: .378 * i µs\"]\n    #[doc = r\" - Writes: Number of items\"]\n    #[doc = r\" # </weight>\"]\n    kill_storage(Vec<Key>),\n\n    #[allow(non_camel_case_types)]\n    #[doc =\n      r\" Kill all storage items with a key that starts with the given prefix.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **NOTE:** We rely on the Root origin to provide us the number of subkeys under\"]\n    #[doc =\n      r\" the prefix we are removing to accurately calculate the weight of this function.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(P)` where `P` amount of keys with prefix `prefix`\"]\n    #[doc = r\" - `P` storage deletions.\"]\n    #[doc = r\" - Base Weight: 0.834 * P µs\"]\n    #[doc = r\" - Writes: Number of subkeys + 1\"]\n    #[doc = r\" # </weight>\"]\n    kill_prefix(Key, u32),\n\n    #[allow(non_camel_case_types)]\n    #[doc =\n      r\" Kill the sending account, assuming there are no references outstanding and the composite\"]\n    #[doc = r\" data is equal to its default value.\"]\n    #[doc = r\"\"]\n    #[doc = r\" # <weight>\"]\n    #[doc = r\" - `O(1)`\"]\n    #[doc = r\" - 1 storage read and deletion.\"]\n    #[doc = r\" --------------------\"]\n    #[doc = r\" Base Weight: 8.626 µs\"]\n    #[doc =\n      r\" No DB Read or Write operations because caller is already in overlay\"]\n    #[doc = r\" # </weight>\"]\n    suicide(),\n}","parent":null,"children":[{"krate":0,"index":2061},{"krate":0,"index":2031},{"krate":0,"index":2034},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2052},{"krate":0,"index":2055},{"krate":0,"index":2059}],"decl_id":null,"docs":" Dispatchable calls.","sig":null,"attributes":[{"value":"/ Dispatchable calls.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612845,"byte_end":9612868,"line_start":1591,"line_end":1591,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612871,"byte_end":9612874,"line_start":1592,"line_end":1592,"column_start":3,"column_end":6}},{"value":"/ Each variant of this enum maps to a dispatchable function from the associated module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":9612877,"byte_end":9612966,"line_start":1593,"line_end":1593,"column_start":3,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":25649,"byte_end":25659,"line_start":732,"line_end":732,"column_start":12,"column_end":22},"name":"EnsureRoot","qualname":"::EnsureRoot","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":567},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":26132,"byte_end":26144,"line_start":751,"line_end":751,"column_start":12,"column_end":24},"name":"EnsureSigned","qualname":"::EnsureSigned","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":577},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":26665,"byte_end":26679,"line_start":770,"line_end":770,"column_start":12,"column_end":26},"name":"EnsureSignedBy","qualname":"::EnsureSignedBy","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":27464,"byte_end":27474,"line_start":795,"line_end":795,"column_start":12,"column_end":22},"name":"EnsureNone","qualname":"::EnsureNone","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":599},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":27947,"byte_end":27958,"line_start":814,"line_end":814,"column_start":12,"column_end":23},"name":"EnsureNever","qualname":"::EnsureNever","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":608},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28372,"byte_end":28383,"line_start":830,"line_end":830,"column_start":12,"column_end":23},"name":"EnsureOneOf","qualname":"::EnsureOneOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" The \"OR gate\" implementation of `EnsureOrigin`.","sig":null,"attributes":[{"value":"/ The \"OR gate\" implementation of `EnsureOrigin`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28222,"byte_end":28273,"line_start":827,"line_end":827,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28274,"byte_end":28277,"line_start":828,"line_end":828,"column_start":1,"column_end":4}},{"value":"/ Origin check will pass if `L` or `R` origin check passes. `L` is tested first.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28278,"byte_end":28360,"line_start":829,"line_end":829,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":29126,"byte_end":29139,"line_start":853,"line_end":853,"column_start":8,"column_end":21},"name":"ensure_signed","qualname":"::ensure_signed","value":"pub fn ensure_signed<OuterOrigin, AccountId>(OuterOrigin)\n-> Result<AccountId, BadOrigin> where\nOuterOrigin: Into<Result<RawOrigin<AccountId>, OuterOrigin>>","parent":null,"children":[],"decl_id":null,"docs":" Ensure that the origin `o` represents a signed extrinsic (i.e. transaction).\n Returns `Ok` with the account that signed the extrinsic or an `Err` otherwise.\n","sig":null,"attributes":[{"value":"/ Ensure that the origin `o` represents a signed extrinsic (i.e. transaction).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28955,"byte_end":29035,"line_start":851,"line_end":851,"column_start":1,"column_end":81}},{"value":"/ Returns `Ok` with the account that signed the extrinsic or an `Err` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":29036,"byte_end":29118,"line_start":852,"line_end":852,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":29461,"byte_end":29472,"line_start":863,"line_end":863,"column_start":8,"column_end":19},"name":"ensure_root","qualname":"::ensure_root","value":"pub fn ensure_root<OuterOrigin, AccountId>(OuterOrigin)\n-> Result<(), BadOrigin> where\nOuterOrigin: Into<Result<RawOrigin<AccountId>, OuterOrigin>>","parent":null,"children":[],"decl_id":null,"docs":" Ensure that the origin `o` represents the root. Returns `Ok` or an `Err` otherwise.\n","sig":null,"attributes":[{"value":"/ Ensure that the origin `o` represents the root. Returns `Ok` or an `Err` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":29366,"byte_end":29453,"line_start":862,"line_end":862,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":29796,"byte_end":29807,"line_start":873,"line_end":873,"column_start":8,"column_end":19},"name":"ensure_none","qualname":"::ensure_none","value":"pub fn ensure_none<OuterOrigin, AccountId>(OuterOrigin)\n-> Result<(), BadOrigin> where\nOuterOrigin: Into<Result<RawOrigin<AccountId>, OuterOrigin>>","parent":null,"children":[],"decl_id":null,"docs":" Ensure that the origin `o` represents an unsigned extrinsic. Returns `Ok` or an `Err` otherwise.\n","sig":null,"attributes":[{"value":"/ Ensure that the origin `o` represents an unsigned extrinsic. Returns `Ok` or an `Err` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":29688,"byte_end":29788,"line_start":872,"line_end":872,"column_start":1,"column_end":101}}]},{"kind":"TupleVariant","id":{"krate":0,"index":634},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30280,"byte_end":30290,"line_start":889,"line_end":889,"column_start":2,"column_end":12},"name":"Inspection","qualname":"::InitKind::Inspection","value":"InitKind::Inspection","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Leave inspectable storage entries in state.","sig":null,"attributes":[{"value":"/ Leave inspectable storage entries in state.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30091,"byte_end":30138,"line_start":884,"line_end":884,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30140,"byte_end":30143,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ i.e. `Events` are not being reset.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30145,"byte_end":30183,"line_start":886,"line_end":886,"column_start":2,"column_end":40}},{"value":"/ Should only be used for off-chain calls,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30185,"byte_end":30229,"line_start":887,"line_end":887,"column_start":2,"column_end":46}},{"value":"/ regular block execution should clear those.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30231,"byte_end":30278,"line_start":888,"line_end":888,"column_start":2,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":636},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30398,"byte_end":30402,"line_start":894,"line_end":894,"column_start":2,"column_end":6},"name":"Full","qualname":"::InitKind::Full","value":"InitKind::Full","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Reset also inspectable storage entries.","sig":null,"attributes":[{"value":"/ Reset also inspectable storage entries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30294,"byte_end":30337,"line_start":891,"line_end":891,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30339,"byte_end":30342,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ This should be used for regular block execution.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30344,"byte_end":30396,"line_start":893,"line_end":893,"column_start":2,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":633},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30079,"byte_end":30087,"line_start":883,"line_end":883,"column_start":10,"column_end":18},"name":"InitKind","qualname":"::InitKind","value":"pub enum InitKind {\n\n    /// Leave inspectable storage entries in state.\n    ///\n    /// i.e. `Events` are not being reset.\n    /// Should only be used for off-chain calls,\n    /// regular block execution should clear those.\n    Inspection,\n\n    /// Reset also inspectable storage entries.\n    ///\n    /// This should be used for regular block execution.\n    Full,\n}","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":636}],"decl_id":null,"docs":" A type of block initialization to perform.\n","sig":null,"attributes":[{"value":"/ A type of block initialization to perform.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30023,"byte_end":30069,"line_start":882,"line_end":882,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":641},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30568,"byte_end":30578,"line_start":905,"line_end":905,"column_start":2,"column_end":12},"name":"Referenced","qualname":"::RefStatus::Referenced","value":"RefStatus::Referenced","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":643},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30581,"byte_end":30593,"line_start":906,"line_end":906,"column_start":2,"column_end":14},"name":"Unreferenced","qualname":"::RefStatus::Unreferenced","value":"RefStatus::Unreferenced","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":640},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30555,"byte_end":30564,"line_start":904,"line_end":904,"column_start":10,"column_end":19},"name":"RefStatus","qualname":"::RefStatus","value":"pub enum RefStatus { Referenced, Unreferenced, }","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":643}],"decl_id":null,"docs":" Reference status; can be either referenced or unreferenced.\n","sig":null,"attributes":[{"value":"/ Reference status; can be either referenced or unreferenced.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30482,"byte_end":30545,"line_start":903,"line_end":903,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30688,"byte_end":30701,"line_start":911,"line_end":911,"column_start":9,"column_end":22},"name":"deposit_event","qualname":"<Module<T>>::deposit_event","value":"pub fn deposit_event<impl Into<T::Event>: Into<T::Event>>(impl Into<T::Event>)","parent":null,"children":[],"decl_id":null,"docs":" Deposits an event into this block's event record.\n","sig":null,"attributes":[{"value":"/ Deposits an event into this block's event record.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30626,"byte_end":30679,"line_start":910,"line_end":910,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30846,"byte_end":30853,"line_start":916,"line_end":916,"column_start":9,"column_end":16},"name":"inc_ref","qualname":"<Module<T>>::inc_ref","value":"pub fn inc_ref(&T::AccountId)","parent":null,"children":[],"decl_id":null,"docs":" Increment the reference counter on an account.\n","sig":null,"attributes":[{"value":"/ Increment the reference counter on an account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30787,"byte_end":30837,"line_start":915,"line_end":915,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31097,"byte_end":31104,"line_start":922,"line_end":922,"column_start":9,"column_end":16},"name":"dec_ref","qualname":"<Module<T>>::dec_ref","value":"pub fn dec_ref(&T::AccountId)","parent":null,"children":[],"decl_id":null,"docs":" Decrement the reference counter on an account. This *MUST* only be done once for every time\n you called `inc_ref` on `who`.\n","sig":null,"attributes":[{"value":"/ Decrement the reference counter on an account. This *MUST* only be done once for every time","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30957,"byte_end":31052,"line_start":920,"line_end":920,"column_start":2,"column_end":97}},{"value":"/ you called `inc_ref` on `who`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31054,"byte_end":31088,"line_start":921,"line_end":921,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31280,"byte_end":31284,"line_start":927,"line_end":927,"column_start":9,"column_end":13},"name":"refs","qualname":"<Module<T>>::refs","value":"pub fn refs(&T::AccountId) -> RefCount","parent":null,"children":[],"decl_id":null,"docs":" The number of outstanding references for the account `who`.\n","sig":null,"attributes":[{"value":"/ The number of outstanding references for the account `who`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31208,"byte_end":31271,"line_start":926,"line_end":926,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31421,"byte_end":31432,"line_start":932,"line_end":932,"column_start":9,"column_end":20},"name":"allow_death","qualname":"<Module<T>>::allow_death","value":"pub fn allow_death(&T::AccountId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if the account has no outstanding references.\n","sig":null,"attributes":[{"value":"/ True if the account has no outstanding references.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31358,"byte_end":31412,"line_start":931,"line_end":931,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31782,"byte_end":31803,"line_start":941,"line_end":941,"column_start":9,"column_end":30},"name":"deposit_event_indexed","qualname":"<Module<T>>::deposit_event_indexed","value":"pub fn deposit_event_indexed(&[T::Hash], T::Event)","parent":null,"children":[],"decl_id":null,"docs":" Deposits an event into this block's event record adding this event\n to the corresponding topic indexes.","sig":null,"attributes":[{"value":"/ Deposits an event into this block's event record adding this event","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31507,"byte_end":31577,"line_start":936,"line_end":936,"column_start":2,"column_end":72}},{"value":"/ to the corresponding topic indexes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31579,"byte_end":31618,"line_start":937,"line_end":937,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31620,"byte_end":31623,"line_start":938,"line_end":938,"column_start":2,"column_end":5}},{"value":"/ This will update storage entries that correspond to the specified topics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31625,"byte_end":31702,"line_start":939,"line_end":939,"column_start":2,"column_end":79}},{"value":"/ It is expected that light-clients could subscribe to this topics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":31704,"byte_end":31773,"line_start":940,"line_end":940,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":32734,"byte_end":32749,"line_start":974,"line_end":974,"column_start":9,"column_end":24},"name":"extrinsic_index","qualname":"<Module<T>>::extrinsic_index","value":"pub fn extrinsic_index() -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of extrinsic that is currently executing.\n","sig":null,"attributes":[{"value":"/ Gets the index of extrinsic that is currently executing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":32665,"byte_end":32725,"line_start":973,"line_end":973,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":32868,"byte_end":32883,"line_start":979,"line_end":979,"column_start":9,"column_end":24},"name":"extrinsic_count","qualname":"<Module<T>>::extrinsic_count","value":"pub fn extrinsic_count() -> u32","parent":null,"children":[],"decl_id":null,"docs":" Gets extrinsics count.\n","sig":null,"attributes":[{"value":"/ Gets extrinsics count.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":32833,"byte_end":32859,"line_start":978,"line_end":978,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":32951,"byte_end":32969,"line_start":983,"line_end":983,"column_start":9,"column_end":27},"name":"all_extrinsics_len","qualname":"<Module<T>>::all_extrinsics_len","value":"pub fn all_extrinsics_len() -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":34069,"byte_end":34100,"line_start":1002,"line_end":1002,"column_start":9,"column_end":40},"name":"register_extra_weight_unchecked","qualname":"<Module<T>>::register_extra_weight_unchecked","value":"pub fn register_extra_weight_unchecked(Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Inform the system module of some additional weight that should be accounted for, in the\n current block.","sig":null,"attributes":[{"value":"/ Inform the system module of some additional weight that should be accounted for, in the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33032,"byte_end":33123,"line_start":987,"line_end":987,"column_start":2,"column_end":93}},{"value":"/ current block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33125,"byte_end":33143,"line_start":988,"line_end":988,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33145,"byte_end":33148,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ NOTE: use with extra care; this function is made public only be used for certain modules","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33150,"byte_end":33242,"line_start":990,"line_end":990,"column_start":2,"column_end":94}},{"value":"/ that need it. A runtime that does not have dynamic calls should never need this and should","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33244,"byte_end":33338,"line_start":991,"line_end":991,"column_start":2,"column_end":96}},{"value":"/ stick to static weights. A typical use case for this is inner calls or smart contract calls.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33340,"byte_end":33436,"line_start":992,"line_end":992,"column_start":2,"column_end":98}},{"value":"/ Furthermore, it only makes sense to use this when it is presumably  _cheap_ to provide the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33438,"byte_end":33532,"line_start":993,"line_end":993,"column_start":2,"column_end":96}},{"value":"/ argument `weight`; In other words, if this function is to be used to account for some","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33534,"byte_end":33623,"line_start":994,"line_end":994,"column_start":2,"column_end":91}},{"value":"/ unknown, user provided call's weight, it would only make sense to use it if you are sure you","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33625,"byte_end":33721,"line_start":995,"line_end":995,"column_start":2,"column_end":98}},{"value":"/ can rapidly compute the weight of the inner call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33723,"byte_end":33776,"line_start":996,"line_end":996,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33778,"byte_end":33781,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ Even more dangerous is to note that this function does NOT take any action, if the new sum","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33783,"byte_end":33877,"line_start":998,"line_end":998,"column_start":2,"column_end":96}},{"value":"/ of block weight is more than the block weight limit. This is what the _unchecked_.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33879,"byte_end":33965,"line_start":999,"line_end":999,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33967,"byte_end":33970,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ Another potential use-case could be for the `on_initialize` and `on_finalize` hooks.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":33972,"byte_end":34060,"line_start":1001,"line_end":1001,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":34286,"byte_end":34296,"line_start":1009,"line_end":1009,"column_start":9,"column_end":19},"name":"initialize","qualname":"<Module<T>>::initialize","value":"pub fn initialize(&T::BlockNumber, &T::Hash, &T::Hash, &DigestOf<T>, InitKind)","parent":null,"children":[],"decl_id":null,"docs":" Start the execution of a particular block.\n","sig":null,"attributes":[{"value":"/ Start the execution of a particular block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":34231,"byte_end":34277,"line_start":1008,"line_end":1008,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":35077,"byte_end":35085,"line_start":1037,"line_end":1037,"column_start":9,"column_end":17},"name":"finalize","qualname":"<Module<T>>::finalize","value":"pub fn finalize() -> T::Header","parent":null,"children":[],"decl_id":null,"docs":" Remove temporary \"environment\" entries in storage.\n","sig":null,"attributes":[{"value":"/ Remove temporary \"environment\" entries in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":35014,"byte_end":35068,"line_start":1036,"line_end":1036,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36721,"byte_end":36732,"line_start":1089,"line_end":1089,"column_start":9,"column_end":20},"name":"deposit_log","qualname":"<Module<T>>::deposit_log","value":"pub fn deposit_log(DigestItemOf<T>)","parent":null,"children":[],"decl_id":null,"docs":" Deposits a log and ensures it matches the block's log data.","sig":null,"attributes":[{"value":"/ Deposits a log and ensures it matches the block's log data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36559,"byte_end":36622,"line_start":1083,"line_end":1083,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36624,"byte_end":36627,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ # <weight>","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36629,"byte_end":36643,"line_start":1085,"line_end":1085,"column_start":2,"column_end":16}},{"value":"/ - `O(1)`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36645,"byte_end":36657,"line_start":1086,"line_end":1086,"column_start":2,"column_end":14}},{"value":"/ - 1 storage write (codec `O(1)`)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36659,"byte_end":36695,"line_start":1087,"line_end":1087,"column_start":2,"column_end":38}},{"value":"/ # </weight>","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36697,"byte_end":36712,"line_start":1088,"line_end":1088,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36903,"byte_end":36916,"line_start":1095,"line_end":1095,"column_start":9,"column_end":22},"name":"externalities","qualname":"<Module<T>>::externalities","value":"pub fn externalities() -> TestExternalities","parent":null,"children":[],"decl_id":null,"docs":" Get the basic externalities for this module, useful for tests.\n","sig":null,"attributes":[{"value":"/ Get the basic externalities for this module, useful for tests.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36792,"byte_end":36858,"line_start":1093,"line_end":1093,"column_start":2,"column_end":68}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":36860,"byte_end":36894,"line_start":1094,"line_end":1094,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37529,"byte_end":37545,"line_start":1109,"line_end":1109,"column_start":9,"column_end":25},"name":"set_block_number","qualname":"<Module<T>>::set_block_number","value":"pub fn set_block_number(T::BlockNumber)","parent":null,"children":[],"decl_id":null,"docs":" Set the block number to something in particular. Can be used as an alternative to\n `initialize` for tests that don't need to bother with the other environment entries.\n","sig":null,"attributes":[{"value":"/ Set the block number to something in particular. Can be used as an alternative to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37277,"byte_end":37362,"line_start":1106,"line_end":1106,"column_start":2,"column_end":87}},{"value":"/ `initialize` for tests that don't need to bother with the other environment entries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37364,"byte_end":37452,"line_start":1107,"line_end":1107,"column_start":2,"column_end":90}},{"value":"cfg(any(feature = \"std\", feature = \"runtime-benchmarks\", test))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37454,"byte_end":37520,"line_start":1108,"line_end":1108,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37700,"byte_end":37719,"line_start":1115,"line_end":1115,"column_start":9,"column_end":28},"name":"set_extrinsic_index","qualname":"<Module<T>>::set_extrinsic_index","value":"pub fn set_extrinsic_index(u32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the index of extrinsic that is currently executing.\n","sig":null,"attributes":[{"value":"/ Sets the index of extrinsic that is currently executing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37595,"byte_end":37655,"line_start":1113,"line_end":1113,"column_start":2,"column_end":62}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37657,"byte_end":37691,"line_start":1114,"line_end":1114,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38052,"byte_end":38067,"line_start":1122,"line_end":1122,"column_start":9,"column_end":24},"name":"set_parent_hash","qualname":"<Module<T>>::set_parent_hash","value":"pub fn set_parent_hash(T::Hash)","parent":null,"children":[],"decl_id":null,"docs":" Set the parent hash number to something in particular. Can be used as an alternative to\n `initialize` for tests that don't need to bother with the other environment entries.\n","sig":null,"attributes":[{"value":"/ Set the parent hash number to something in particular. Can be used as an alternative to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37826,"byte_end":37917,"line_start":1119,"line_end":1119,"column_start":2,"column_end":93}},{"value":"/ `initialize` for tests that don't need to bother with the other environment entries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":37919,"byte_end":38007,"line_start":1120,"line_end":1120,"column_start":2,"column_end":90}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38009,"byte_end":38043,"line_start":1121,"line_end":1121,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38244,"byte_end":38260,"line_start":1128,"line_end":1128,"column_start":9,"column_end":25},"name":"set_block_limits","qualname":"<Module<T>>::set_block_limits","value":"pub fn set_block_limits(Weight, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the current block weight. This should only be used in some integration tests.\n","sig":null,"attributes":[{"value":"/ Set the current block weight. This should only be used in some integration tests.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38114,"byte_end":38199,"line_start":1126,"line_end":1126,"column_start":2,"column_end":87}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38201,"byte_end":38235,"line_start":1127,"line_end":1127,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38650,"byte_end":38662,"line_start":1138,"line_end":1138,"column_start":9,"column_end":21},"name":"reset_events","qualname":"<Module<T>>::reset_events","value":"pub fn reset_events()","parent":null,"children":[],"decl_id":null,"docs":" Reset events. Can be used as an alternative to\n `initialize` for tests that don't need to bother with the other environment entries.\n","sig":null,"attributes":[{"value":"/ Reset events. Can be used as an alternative to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38433,"byte_end":38483,"line_start":1135,"line_end":1135,"column_start":2,"column_end":52}},{"value":"/ `initialize` for tests that don't need to bother with the other environment entries.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38485,"byte_end":38573,"line_start":1136,"line_end":1136,"column_start":2,"column_end":90}},{"value":"cfg(any(feature = \"std\", feature = \"runtime-benchmarks\", test))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38575,"byte_end":38641,"line_start":1137,"line_end":1137,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38807,"byte_end":38822,"line_start":1145,"line_end":1145,"column_start":9,"column_end":24},"name":"runtime_version","qualname":"<Module<T>>::runtime_version","value":"pub fn runtime_version() -> RuntimeVersion","parent":null,"children":[],"decl_id":null,"docs":" Return the chain's current runtime version.\n","sig":null,"attributes":[{"value":"/ Return the chain's current runtime version.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38751,"byte_end":38798,"line_start":1144,"line_end":1144,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38934,"byte_end":38947,"line_start":1148,"line_end":1148,"column_start":9,"column_end":22},"name":"account_nonce","qualname":"<Module<T>>::account_nonce","value":"pub fn account_nonce<impl EncodeLike<T::AccountId>: EncodeLike<T::AccountId>>(impl EncodeLike<T::AccountId>)\n-> T::Index","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the account transaction counter from storage.\n","sig":null,"attributes":[{"value":"/ Retrieve the account transaction counter from storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":38867,"byte_end":38925,"line_start":1147,"line_end":1147,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39091,"byte_end":39108,"line_start":1153,"line_end":1153,"column_start":9,"column_end":26},"name":"inc_account_nonce","qualname":"<Module<T>>::inc_account_nonce","value":"pub fn inc_account_nonce<impl EncodeLike<T::AccountId>: EncodeLike<T::AccountId>>(impl EncodeLike<T::AccountId>)","parent":null,"children":[],"decl_id":null,"docs":" Increment a particular account's nonce by 1.\n","sig":null,"attributes":[{"value":"/ Increment a particular account's nonce by 1.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39034,"byte_end":39082,"line_start":1152,"line_end":1152,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39541,"byte_end":39555,"line_start":1163,"line_end":1163,"column_start":9,"column_end":23},"name":"note_extrinsic","qualname":"<Module<T>>::note_extrinsic","value":"pub fn note_extrinsic(Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Note what the extrinsic data of the current extrinsic index is. If this\n is called, then ensure `derive_extrinsics` is also called before\n block-building is completed.","sig":null,"attributes":[{"value":"/ Note what the extrinsic data of the current extrinsic index is. If this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39213,"byte_end":39288,"line_start":1157,"line_end":1157,"column_start":2,"column_end":77}},{"value":"/ is called, then ensure `derive_extrinsics` is also called before","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39290,"byte_end":39358,"line_start":1158,"line_end":1158,"column_start":2,"column_end":70}},{"value":"/ block-building is completed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39360,"byte_end":39392,"line_start":1159,"line_end":1159,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39394,"byte_end":39397,"line_start":1160,"line_end":1160,"column_start":2,"column_end":5}},{"value":"/ NOTE: This function is called only when the block is being constructed locally.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39399,"byte_end":39482,"line_start":1161,"line_end":1161,"column_start":2,"column_end":85}},{"value":"/ `execute_block` doesn't note any extrinsics.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39484,"byte_end":39532,"line_start":1162,"line_end":1162,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39740,"byte_end":39762,"line_start":1168,"line_end":1168,"column_start":9,"column_end":31},"name":"note_applied_extrinsic","qualname":"<Module<T>>::note_applied_extrinsic","value":"pub fn note_applied_extrinsic(&DispatchResultWithPostInfo, DispatchInfo)","parent":null,"children":[],"decl_id":null,"docs":" To be called immediately after an extrinsic has been applied.\n","sig":null,"attributes":[{"value":"/ To be called immediately after an extrinsic has been applied.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":39666,"byte_end":39731,"line_start":1167,"line_end":1167,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40429,"byte_end":40453,"line_start":1188,"line_end":1188,"column_start":9,"column_end":33},"name":"note_finished_extrinsics","qualname":"<Module<T>>::note_finished_extrinsics","value":"pub fn note_finished_extrinsics()","parent":null,"children":[],"decl_id":null,"docs":" To be called immediately after `note_applied_extrinsic` of the last extrinsic of the block\n has been called.\n","sig":null,"attributes":[{"value":"/ To be called immediately after `note_applied_extrinsic` of the last extrinsic of the block","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40304,"byte_end":40398,"line_start":1186,"line_end":1186,"column_start":2,"column_end":96}},{"value":"/ has been called.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40400,"byte_end":40420,"line_start":1187,"line_end":1187,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40797,"byte_end":40821,"line_start":1197,"line_end":1197,"column_start":9,"column_end":33},"name":"note_finished_initialize","qualname":"<Module<T>>::note_finished_initialize","value":"pub fn note_finished_initialize()","parent":null,"children":[],"decl_id":null,"docs":" To be called immediately after finishing the initialization of the block\n (e.g., called `on_initialize` for all modules).\n","sig":null,"attributes":[{"value":"/ To be called immediately after finishing the initialization of the block","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40659,"byte_end":40735,"line_start":1195,"line_end":1195,"column_start":2,"column_end":78}},{"value":"/ (e.g., called `on_initialize` for all modules).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40737,"byte_end":40788,"line_start":1196,"line_end":1196,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40952,"byte_end":40969,"line_start":1202,"line_end":1202,"column_start":9,"column_end":26},"name":"derive_extrinsics","qualname":"<Module<T>>::derive_extrinsics","value":"pub fn derive_extrinsics()","parent":null,"children":[],"decl_id":null,"docs":" Remove all extrinsic data and save the extrinsics trie root.\n","sig":null,"attributes":[{"value":"/ Remove all extrinsic data and save the extrinsics trie root.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":40879,"byte_end":40943,"line_start":1201,"line_end":1201,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":41229,"byte_end":41247,"line_start":1210,"line_end":1210,"column_start":9,"column_end":27},"name":"on_created_account","qualname":"<Module<T>>::on_created_account","value":"pub fn on_created_account(T::AccountId)","parent":null,"children":[],"decl_id":null,"docs":" An account is being created.\n","sig":null,"attributes":[{"value":"/ An account is being created.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":41188,"byte_end":41220,"line_start":1209,"line_end":1209,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":42594,"byte_end":42606,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"name":"can_set_code","qualname":"<Module<T>>::can_set_code","value":"pub fn can_set_code(&[u8]) -> Result<(), sp_runtime::DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Determine whether or not it is possible to update the code.","sig":null,"attributes":[{"value":"/ Determine whether or not it is possible to update the code.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":42256,"byte_end":42319,"line_start":1239,"line_end":1239,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":42321,"byte_end":42324,"line_start":1240,"line_end":1240,"column_start":2,"column_end":5}},{"value":"/ Checks the given code if it is a valid runtime wasm blob by instantianting","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":42326,"byte_end":42404,"line_start":1241,"line_end":1241,"column_start":2,"column_end":80}},{"value":"/ it and extracting the runtime version of it. It checks that the runtime version","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":42406,"byte_end":42489,"line_start":1242,"line_end":1242,"column_start":2,"column_end":85}},{"value":"/ of the old and new runtime has the same spec name and that the spec version is increasing.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":42491,"byte_end":42585,"line_start":1243,"line_end":1243,"column_start":2,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43194,"byte_end":43214,"line_start":1263,"line_end":1263,"column_start":12,"column_end":32},"name":"CallOnCreatedAccount","qualname":"::CallOnCreatedAccount","value":"","parent":null,"children":[],"decl_id":null,"docs":" Event handler which calls on_created_account when it happens.\n","sig":null,"attributes":[{"value":"/ Event handler which calls on_created_account when it happens.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43117,"byte_end":43182,"line_start":1262,"line_end":1262,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43463,"byte_end":43478,"line_start":1271,"line_end":1271,"column_start":12,"column_end":27},"name":"CallKillAccount","qualname":"::CallKillAccount","value":"","parent":null,"children":[],"decl_id":null,"docs":" Event handler which calls kill_account when it happens.\n","sig":null,"attributes":[{"value":"/ Event handler which calls kill_account when it happens.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43392,"byte_end":43451,"line_start":1270,"line_end":1270,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":45919,"byte_end":45930,"line_start":1344,"line_end":1344,"column_start":8,"column_end":19},"name":"split_inner","qualname":"::split_inner","value":"pub fn split_inner<T, R, S, impl FnOnce(T) -> (R, S): FnOnce(T) ->\n                   (R, S)>(Option<T>, impl FnOnce(T) -> (R, S))\n-> (Option<R>, Option<S>)","parent":null,"children":[],"decl_id":null,"docs":" Split an `option` into two constituent options, as defined by a `splitter` function.\n","sig":null,"attributes":[{"value":"/ Split an `option` into two constituent options, as defined by a `splitter` function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":45823,"byte_end":45911,"line_start":1343,"line_end":1343,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":738},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46310,"byte_end":46322,"line_start":1363,"line_end":1363,"column_start":12,"column_end":24},"name":"ChainContext","qualname":"::ChainContext","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49931,"byte_end":49948,"line_start":83,"line_end":83,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51404,"byte_end":51410,"line_start":122,"line_end":122,"column_start":77,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51595,"byte_end":51601,"line_start":131,"line_end":131,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":53597,"byte_end":53603,"line_start":194,"line_end":194,"column_start":62,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":53946,"byte_end":53952,"line_start":208,"line_end":208,"column_start":62,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":54344,"byte_end":54350,"line_start":223,"line_end":223,"column_start":81,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":54825,"byte_end":54831,"line_start":238,"line_end":238,"column_start":81,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":55387,"byte_end":55393,"line_start":257,"line_end":257,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":55839,"byte_end":55845,"line_start":275,"line_end":275,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":56284,"byte_end":56290,"line_start":293,"line_end":293,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":56908,"byte_end":56914,"line_start":318,"line_end":318,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57778,"byte_end":57785,"line_start":349,"line_end":349,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57966,"byte_end":57973,"line_start":356,"line_end":356,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75372,"byte_end":75384,"line_start":29,"line_end":29,"column_start":53,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75665,"byte_end":75677,"line_start":41,"line_end":41,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75856,"byte_end":75868,"line_start":48,"line_end":48,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77397,"byte_end":77411,"line_start":33,"line_end":33,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77609,"byte_end":77623,"line_start":40,"line_end":40,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77940,"byte_end":77954,"line_start":52,"line_end":52,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81446,"byte_end":81456,"line_start":40,"line_end":40,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81620,"byte_end":81630,"line_start":47,"line_end":47,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81927,"byte_end":81937,"line_start":59,"line_end":59,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85308,"byte_end":85324,"line_start":29,"line_end":29,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85609,"byte_end":85625,"line_start":41,"line_end":41,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85806,"byte_end":85822,"line_start":48,"line_end":48,"column_start":50,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87257,"byte_end":87271,"line_start":29,"line_end":29,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87554,"byte_end":87568,"line_start":41,"line_end":41,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87753,"byte_end":87767,"line_start":48,"line_end":48,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":89468,"byte_end":89479,"line_start":38,"line_end":38,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":96613,"byte_end":96624,"line_start":216,"line_end":216,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":98711,"byte_end":98722,"line_start":297,"line_end":297,"column_start":53,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":111845,"byte_end":111861,"line_start":29,"line_end":29,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10678,"byte_end":10683,"line_start":300,"line_end":300,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11631,"byte_end":11640,"line_start":331,"line_end":331,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13276,"byte_end":13298,"line_start":383,"line_end":383,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13673,"byte_end":13695,"line_start":392,"line_end":392,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":25824,"byte_end":25834,"line_start":736,"line_end":736,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":26318,"byte_end":26330,"line_start":755,"line_end":755,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":26918,"byte_end":26932,"line_start":775,"line_end":775,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":27639,"byte_end":27649,"line_start":799,"line_end":799,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28026,"byte_end":28037,"line_start":815,"line_end":815,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28604,"byte_end":28615,"line_start":836,"line_end":836,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30424,"byte_end":30432,"line_start":897,"line_end":897,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30613,"byte_end":30619,"line_start":909,"line_end":909,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43277,"byte_end":43297,"line_start":1264,"line_end":1264,"column_start":43,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43541,"byte_end":43556,"line_start":1272,"line_end":1272,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43675,"byte_end":43681,"line_start":1278,"line_end":1278,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":44134,"byte_end":44140,"line_start":1290,"line_end":1290,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":717},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46196,"byte_end":46202,"line_start":1357,"line_end":1357,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46379,"byte_end":46391,"line_start":1364,"line_end":1364,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46497,"byte_end":46509,"line_start":1370,"line_end":1370,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":4794,"byte_end":4802,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":74}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":49931,"byte_end":49948,"line_start":83,"line_end":83,"column_start":20,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51404,"byte_end":51410,"line_start":122,"line_end":122,"column_start":77,"column_end":83},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":750},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":51595,"byte_end":51601,"line_start":131,"line_end":131,"column_start":65,"column_end":71},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":53597,"byte_end":53603,"line_start":194,"line_end":194,"column_start":62,"column_end":68},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":53946,"byte_end":53952,"line_start":208,"line_end":208,"column_start":62,"column_end":68},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":54344,"byte_end":54350,"line_start":223,"line_end":223,"column_start":81,"column_end":87},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":220}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":54825,"byte_end":54831,"line_start":238,"line_end":238,"column_start":81,"column_end":87},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":220}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":55387,"byte_end":55393,"line_start":257,"line_end":257,"column_start":46,"column_end":52},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":55839,"byte_end":55845,"line_start":275,"line_end":275,"column_start":46,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":56284,"byte_end":56290,"line_start":293,"line_end":293,"column_start":45,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":56908,"byte_end":56914,"line_start":318,"line_end":318,"column_start":45,"column_end":51},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57778,"byte_end":57785,"line_start":349,"line_end":349,"column_start":23,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":57966,"byte_end":57973,"line_start":356,"line_end":356,"column_start":33,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":1736}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":61254,"byte_end":61259,"line_start":451,"line_end":451,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":209}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62624,"byte_end":62644,"line_start":487,"line_end":487,"column_start":47,"column_end":67},"kind":"SuperTrait","from":{"krate":0,"index":212},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":62658,"byte_end":62670,"line_start":487,"line_end":487,"column_start":81,"column_end":93},"kind":"SuperTrait","from":{"krate":0,"index":209},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/offchain.rs","byte_start":66826,"byte_end":66832,"line_start":616,"line_end":616,"column_start":43,"column_end":49},"kind":"SuperTrait","from":{"krate":22,"index":118},"to":{"krate":0,"index":244}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75372,"byte_end":75384,"line_start":29,"line_end":29,"column_start":53,"column_end":65},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":775},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75665,"byte_end":75677,"line_start":41,"line_end":41,"column_start":30,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_genesis.rs","byte_start":75856,"byte_end":75868,"line_start":48,"line_end":48,"column_start":50,"column_end":62},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":775},"to":{"krate":26,"index":1102}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77397,"byte_end":77411,"line_start":33,"line_end":33,"column_start":30,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77609,"byte_end":77623,"line_start":40,"line_end":40,"column_start":53,"column_end":67},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":811},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_mortality.rs","byte_start":77940,"byte_end":77954,"line_start":52,"line_end":52,"column_start":50,"column_end":64},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":811},"to":{"krate":26,"index":1102}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81446,"byte_end":81456,"line_start":40,"line_end":40,"column_start":16,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":844},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81620,"byte_end":81630,"line_start":47,"line_end":47,"column_start":39,"column_end":49},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":844},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_nonce.rs","byte_start":81927,"byte_end":81937,"line_start":59,"line_end":59,"column_start":36,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":844},"to":{"krate":26,"index":1102}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85308,"byte_end":85324,"line_start":29,"line_end":29,"column_start":53,"column_end":69},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":880},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85609,"byte_end":85625,"line_start":41,"line_end":41,"column_start":30,"column_end":46},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_spec_version.rs","byte_start":85806,"byte_end":85822,"line_start":48,"line_end":48,"column_start":50,"column_end":66},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":880},"to":{"krate":26,"index":1102}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87257,"byte_end":87271,"line_start":29,"line_end":29,"column_start":53,"column_end":67},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87554,"byte_end":87568,"line_start":41,"line_end":41,"column_start":30,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_tx_version.rs","byte_start":87753,"byte_end":87767,"line_start":48,"line_end":48,"column_start":50,"column_end":64},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":916},"to":{"krate":26,"index":1102}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":89468,"byte_end":89479,"line_start":38,"line_end":38,"column_start":30,"column_end":41},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":96613,"byte_end":96624,"line_start":216,"line_end":216,"column_start":50,"column_end":61},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":952},"to":{"krate":26,"index":1102}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/extensions/check_weight.rs","byte_start":98711,"byte_end":98722,"line_start":297,"line_end":297,"column_start":53,"column_end":64},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":952},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/weights.rs","byte_start":111845,"byte_end":111861,"line_start":29,"line_end":29,"column_start":6,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5887,"byte_end":5889,"line_start":172,"line_end":172,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1769},"to":{"krate":0,"index":509}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":5892,"byte_end":5897,"line_start":172,"line_end":172,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1736},"to":{"krate":0,"index":509}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":10678,"byte_end":10683,"line_start":300,"line_end":300,"column_start":18,"column_end":23},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1018},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":11631,"byte_end":11640,"line_start":331,"line_end":331,"column_start":45,"column_end":54},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1108},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13276,"byte_end":13298,"line_start":383,"line_end":383,"column_start":6,"column_end":28},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":13673,"byte_end":13695,"line_start":392,"line_end":392,"column_start":43,"column_end":65},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":25824,"byte_end":25834,"line_start":736,"line_end":736,"column_start":23,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":557},"to":{"krate":193,"index":1395}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":26318,"byte_end":26330,"line_start":755,"line_end":755,"column_start":23,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":567},"to":{"krate":193,"index":1395}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":26918,"byte_end":26932,"line_start":775,"line_end":775,"column_start":23,"column_end":37},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":577},"to":{"krate":193,"index":1395}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":27639,"byte_end":27649,"line_start":799,"line_end":799,"column_start":23,"column_end":33},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":589},"to":{"krate":193,"index":1395}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28026,"byte_end":28037,"line_start":815,"line_end":815,"column_start":32,"column_end":43},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":599},"to":{"krate":193,"index":1395}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":28604,"byte_end":28615,"line_start":836,"line_end":836,"column_start":23,"column_end":34},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":608},"to":{"krate":193,"index":1395}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30424,"byte_end":30432,"line_start":897,"line_end":897,"column_start":18,"column_end":26},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":30613,"byte_end":30619,"line_start":909,"line_end":909,"column_start":16,"column_end":22},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43277,"byte_end":43297,"line_start":1264,"line_end":1264,"column_start":43,"column_end":63},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":688},"to":{"krate":193,"index":1092}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43541,"byte_end":43556,"line_start":1272,"line_end":1272,"column_start":43,"column_end":58},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":695},"to":{"krate":193,"index":1092}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":43675,"byte_end":43681,"line_start":1278,"line_end":1278,"column_start":40,"column_end":46},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1940},"to":{"krate":26,"index":654}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":44134,"byte_end":44140,"line_start":1290,"line_end":1290,"column_start":60,"column_end":66},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1940},"to":{"krate":193,"index":1074}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46196,"byte_end":46202,"line_start":1357,"line_end":1357,"column_start":48,"column_end":54},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1940},"to":{"krate":193,"index":1165}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46379,"byte_end":46391,"line_start":1364,"line_end":1364,"column_start":21,"column_end":33},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":738},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-system-2.0.1/src/lib.rs","byte_start":46497,"byte_end":46509,"line_start":1370,"line_end":1370,"column_start":27,"column_end":39},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":738},"to":{"krate":26,"index":930}}]}