{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","parity_scale_codec","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bitvec\"","--cfg","feature=\"derive\"","--cfg","feature=\"full\"","--cfg","feature=\"parity-scale-codec-derive\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=c2a3c300da64cba4","-C","extra-filename=-c2a3c300da64cba4","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps","--extern","arrayvec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libarrayvec-b65cc7fc2640d81b.rmeta","--extern","bitvec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libbitvec-4738b47d2336751e.rmeta","--extern","byte_slice_cast=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libbyte_slice_cast-1ff0c50a7b5421e7.rmeta","--extern","parity_scale_codec_derive=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libparity_scale_codec_derive-09db6c9ec17b0323.so","--extern","serde=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libserde-80263e68ba500d78.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/ocw-demo/target/rls/debug/deps/libparity_scale_codec-c2a3c300da64cba4.rmeta"},"prelude":{"crate_id":{"name":"parity_scale_codec","disambiguator":[16439007312830197035,13769093477079864056]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","num":18,"id":{"name":"parity_scale_codec_derive","disambiguator":[15916895702609288415,13390909414312069258]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","num":19,"id":{"name":"arrayvec","disambiguator":[9711399210076819589,6533224003713073282]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","num":20,"id":{"name":"byte_slice_cast","disambiguator":[7351640255773626293,2315590138104183949]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","num":21,"id":{"name":"serde","disambiguator":[18094986483354249175,15403000118412511765]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","num":22,"id":{"name":"serde_derive","disambiguator":[2422799003874411447,4301428410593763920]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":603,"byte_end":10131,"line_start":15,"line_end":288,"column_start":1,"column_end":46}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9199,"byte_end":9200,"line_start":249,"line_end":249,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":47},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9272,"byte_end":9277,"line_start":254,"line_end":254,"column_start":15,"column_end":20},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":4514},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9293,"byte_end":9296,"line_start":255,"line_end":255,"column_start":15,"column_end":18},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9293,"byte_end":9296,"line_start":255,"line_end":255,"column_start":15,"column_end":18},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":5,"index":3865},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9312,"byte_end":9318,"line_start":256,"line_end":256,"column_start":15,"column_end":21},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":317},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9334,"byte_end":9340,"line_start":257,"line_end":257,"column_start":15,"column_end":21},"alias_span":null,"name":"borrow","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":568},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9356,"byte_end":9367,"line_start":258,"line_end":258,"column_start":15,"column_end":26},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":4502},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9383,"byte_end":9387,"line_start":259,"line_end":259,"column_start":15,"column_end":19},"alias_span":null,"name":"sync","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":3277},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9403,"byte_end":9405,"line_start":260,"line_end":260,"column_start":15,"column_end":17},"alias_span":null,"name":"rc","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":66},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9648,"byte_end":9653,"line_start":277,"line_end":277,"column_start":2,"column_end":7},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9655,"byte_end":9661,"line_start":277,"line_end":277,"column_start":9,"column_end":15},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9663,"byte_end":9668,"line_start":277,"line_end":277,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9670,"byte_end":9676,"line_start":277,"line_end":277,"column_start":24,"column_end":30},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":118},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9678,"byte_end":9684,"line_start":277,"line_end":277,"column_start":32,"column_end":38},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9686,"byte_end":9691,"line_start":277,"line_end":277,"column_start":40,"column_end":45},"alias_span":null,"name":"Codec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9693,"byte_end":9704,"line_start":277,"line_end":277,"column_start":47,"column_end":58},"alias_span":null,"name":"EncodeAsRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":143},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9706,"byte_end":9723,"line_start":277,"line_end":277,"column_start":60,"column_end":77},"alias_span":null,"name":"WrapperTypeEncode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9726,"byte_end":9736,"line_start":278,"line_end":278,"column_start":2,"column_end":12},"alias_span":null,"name":"OptionBool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":775},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9726,"byte_end":9736,"line_start":278,"line_end":278,"column_start":2,"column_end":12},"alias_span":null,"name":"OptionBool","value":"","parent":{"krate":0,"index":742}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9738,"byte_end":9750,"line_start":278,"line_end":278,"column_start":14,"column_end":26},"alias_span":null,"name":"DecodeLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9752,"byte_end":9761,"line_start":278,"line_end":278,"column_start":28,"column_end":37},"alias_span":null,"name":"FullCodec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9763,"byte_end":9773,"line_start":278,"line_end":278,"column_start":39,"column_end":49},"alias_span":null,"name":"FullEncode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9823,"byte_end":9831,"line_start":281,"line_end":281,"column_start":22,"column_end":30},"alias_span":null,"name":"IoReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9823,"byte_end":9831,"line_start":281,"line_end":281,"column_start":22,"column_end":30},"alias_span":null,"name":"IoReader","value":"","parent":{"krate":0,"index":746}},{"kind":"Use","ref_id":{"krate":0,"index":6682},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9857,"byte_end":9864,"line_start":282,"line_end":282,"column_start":25,"column_end":32},"alias_span":null,"name":"Compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6683},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9857,"byte_end":9864,"line_start":282,"line_end":282,"column_start":25,"column_end":32},"alias_span":null,"name":"Compact","value":"","parent":{"krate":0,"index":748}},{"kind":"Use","ref_id":{"krate":0,"index":494},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9866,"byte_end":9876,"line_start":282,"line_end":282,"column_start":34,"column_end":44},"alias_span":null,"name":"HasCompact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9878,"byte_end":9887,"line_start":282,"line_end":282,"column_start":46,"column_end":55},"alias_span":null,"name":"CompactAs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":425},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9889,"byte_end":9899,"line_start":282,"line_end":282,"column_start":57,"column_end":67},"alias_span":null,"name":"CompactLen","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":594},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9924,"byte_end":9930,"line_start":283,"line_end":283,"column_start":23,"column_end":29},"alias_span":null,"name":"Joiner","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9956,"byte_end":9964,"line_start":284,"line_end":284,"column_start":25,"column_end":33},"alias_span":null,"name":"KeyedVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":618},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9992,"byte_end":10001,"line_start":285,"line_end":285,"column_start":27,"column_end":36},"alias_span":null,"name":"DecodeAll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":629},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":10030,"byte_end":10041,"line_start":286,"line_end":286,"column_start":28,"column_end":39},"alias_span":null,"name":"DecodeLimit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":663},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":10072,"byte_end":10084,"line_start":287,"line_end":287,"column_start":30,"column_end":42},"alias_span":null,"name":"EncodeAppend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":701},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":10114,"byte_end":10124,"line_start":288,"line_end":288,"column_start":29,"column_end":39},"alias_span":null,"name":"EncodeLike","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":703},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":10126,"byte_end":10129,"line_start":288,"line_end":288,"column_start":41,"column_end":44},"alias_span":null,"name":"Ref","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":603,"byte_end":10131,"line_start":15,"line_end":288,"column_start":1,"column_end":46},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":13},{"krate":0,"index":396},{"krate":0,"index":591},{"krate":0,"index":603},{"krate":0,"index":613},{"krate":0,"index":623},{"krate":0,"index":650},{"krate":0,"index":699},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":6909},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":6917},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":6919},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"decl_id":null,"docs":" # Parity SCALE Codec","sig":null,"attributes":[{"value":"/ # Parity SCALE Codec","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":603,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Rust implementation of the SCALE (Simple Concatenated Aggregate Little-Endian) data format","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":632,"byte_end":726,"line_start":17,"line_end":17,"column_start":1,"column_end":95}},{"value":"/ for types used in the Parity Substrate framework.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":727,"byte_end":780,"line_start":18,"line_end":18,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":781,"byte_end":784,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ SCALE is a light-weight format which allows encoding (and decoding) which makes it highly","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":785,"byte_end":878,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ suitable for resource-constrained execution environments like blockchain runtimes and low-power,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":879,"byte_end":979,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"/ low-memory devices.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":980,"byte_end":1003,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1004,"byte_end":1007,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ It is important to note that the encoding context (knowledge of how the types and data structures look)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1008,"byte_end":1115,"line_start":24,"line_end":24,"column_start":1,"column_end":108}},{"value":"/ needs to be known separately at both encoding and decoding ends.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1116,"byte_end":1184,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ The encoded data does not include this contextual information.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1185,"byte_end":1251,"line_start":26,"line_end":26,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1252,"byte_end":1255,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ To get a better understanding of how the encoding is done for different types,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1256,"byte_end":1338,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/ take a look at the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1339,"byte_end":1361,"line_start":29,"line_end":29,"column_start":1,"column_end":23}},{"value":"/ [low-level data formats overview page at the Substrate docs site](https://substrate.dev/docs/en/overview/low-level-data-format).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1362,"byte_end":1494,"line_start":30,"line_end":30,"column_start":1,"column_end":133}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1495,"byte_end":1498,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ## Implementation","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1499,"byte_end":1520,"line_start":32,"line_end":32,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1521,"byte_end":1524,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The codec is implemented using the following traits:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1525,"byte_end":1581,"line_start":34,"line_end":34,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1582,"byte_end":1585,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ### Encode","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1586,"byte_end":1600,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1601,"byte_end":1604,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The `Encode` trait is used for encoding of data into the SCALE format. The `Encode` trait contains the following functions:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1605,"byte_end":1732,"line_start":38,"line_end":38,"column_start":1,"column_end":128}},{"value":"/ * `size_hint(&self) -> usize`: Gets the capacity (in bytes) required for the encoded data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1734,"byte_end":1828,"line_start":40,"line_end":40,"column_start":1,"column_end":95}},{"value":"/ This is to avoid double-allocation of memory needed for the encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1829,"byte_end":1902,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ It can be an estimate and does not need to be an exact number.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1903,"byte_end":1969,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ If the size is not known, even no good maximum, then we can skip this function from the trait implementation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":1970,"byte_end":2083,"line_start":43,"line_end":43,"column_start":1,"column_end":114}},{"value":"/ This is required to be a cheap operation, so should not involve iterations etc.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2084,"byte_end":2167,"line_start":44,"line_end":44,"column_start":1,"column_end":84}},{"value":"/ * `encode_to<T: Output>(&self, dest: &mut T)`: Encodes the value and appends it to a destination buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2168,"byte_end":2276,"line_start":45,"line_end":45,"column_start":1,"column_end":109}},{"value":"/ * `encode(&self) -> Vec<u8>`: Encodes the type data and returns a slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2277,"byte_end":2353,"line_start":46,"line_end":46,"column_start":1,"column_end":77}},{"value":"/ * `using_encoded<R, F: FnOnce(&[u8]) -> R>(&self, f: F) -> R`: Encodes the type data and executes a closure on the encoded value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2354,"byte_end":2487,"line_start":47,"line_end":47,"column_start":1,"column_end":134}},{"value":"/ Returns the result from the executed closure.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2488,"byte_end":2537,"line_start":48,"line_end":48,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2538,"byte_end":2541,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ **Note:** Implementations should override `using_encoded` for value types and `encode_to` for allocating types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2542,"byte_end":2657,"line_start":50,"line_end":50,"column_start":1,"column_end":116}},{"value":"/ `size_hint` should be implemented for all types, wherever possible. Wrapper types should override all methods.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2658,"byte_end":2772,"line_start":51,"line_end":51,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2773,"byte_end":2776,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ### Decode","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2777,"byte_end":2791,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2792,"byte_end":2795,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `Decode` trait is used for deserialization/decoding of encoded data into the respective types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2796,"byte_end":2898,"line_start":55,"line_end":55,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2899,"byte_end":2902,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ * `fn decode<I: Input>(value: &mut I) -> Result<Self, Error>`: Tries to decode the value from SCALE format to the type it is called on.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":2903,"byte_end":3042,"line_start":57,"line_end":57,"column_start":1,"column_end":140}},{"value":"/ Returns an `Err` if the decoding fails.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3043,"byte_end":3086,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3087,"byte_end":3090,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ### CompactAs","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3091,"byte_end":3108,"line_start":60,"line_end":60,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3109,"byte_end":3112,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ The `CompactAs` trait is used for wrapping custom types/structs as compact types, which makes them even more space/memory efficient.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3113,"byte_end":3249,"line_start":62,"line_end":62,"column_start":1,"column_end":137}},{"value":"/ The compact encoding is described [here](https://substrate.dev/docs/en/overview/low-level-data-format#compact-general-integers).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3250,"byte_end":3382,"line_start":63,"line_end":63,"column_start":1,"column_end":133}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3383,"byte_end":3386,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ * `encode_as(&self) -> &Self::As`: Encodes the type (self) as a compact type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3387,"byte_end":3468,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ The type `As` is defined in the same trait and its implementation should be compact encode-able.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3469,"byte_end":3569,"line_start":66,"line_end":66,"column_start":1,"column_end":101}},{"value":"/ * `decode_from(_: Self::As) -> Self`: Decodes the type (self) from a compact encode-able type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3570,"byte_end":3668,"line_start":67,"line_end":67,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3669,"byte_end":3672,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ### HasCompact","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3673,"byte_end":3691,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3692,"byte_end":3695,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The `HasCompact` trait, if implemented, tells that the corresponding type is a compact encode-able type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3696,"byte_end":3804,"line_start":71,"line_end":71,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3805,"byte_end":3808,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ### EncodeLike","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3809,"byte_end":3827,"line_start":73,"line_end":73,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3828,"byte_end":3831,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The `EncodeLike` trait needs to be implemented for each type manually. When using derive, it is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3832,"byte_end":3931,"line_start":75,"line_end":75,"column_start":1,"column_end":100}},{"value":"/ done automatically for you. Basically the trait gives you the opportunity to accept multiple types","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":3932,"byte_end":4034,"line_start":76,"line_end":76,"column_start":1,"column_end":103}},{"value":"/ to a function that all encode to the same representation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4035,"byte_end":4096,"line_start":77,"line_end":77,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4097,"byte_end":4100,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ## Usage Examples","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4101,"byte_end":4122,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4123,"byte_end":4126,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Following are some examples to demonstrate usage of the codec.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4127,"byte_end":4193,"line_start":81,"line_end":81,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4194,"byte_end":4197,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ### Simple types","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4198,"byte_end":4218,"line_start":83,"line_end":83,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4219,"byte_end":4222,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4223,"byte_end":4230,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # // Import macros if derive feature is not used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4231,"byte_end":4284,"line_start":86,"line_end":86,"column_start":1,"column_end":54}},{"value":"/ # #[cfg(not(feature=\"derive\"))]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4285,"byte_end":4320,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/ # use parity_scale_codec_derive::{Encode, Decode};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4321,"byte_end":4375,"line_start":88,"line_end":88,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4376,"byte_end":4379,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ use parity_scale_codec::{Encode, Decode};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4380,"byte_end":4425,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4426,"byte_end":4429,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq, Encode, Decode)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4430,"byte_end":4477,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ enum EnumType {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4478,"byte_end":4497,"line_start":93,"line_end":93,"column_start":1,"column_end":20}},{"value":"/ \t#[codec(index = \"15\")]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4498,"byte_end":4525,"line_start":94,"line_end":94,"column_start":1,"column_end":28}},{"value":"/ \tA,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4526,"byte_end":4533,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ \tB(u32, u64),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4534,"byte_end":4551,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/ \tC {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4552,"byte_end":4560,"line_start":97,"line_end":97,"column_start":1,"column_end":9}},{"value":"/ \t\ta: u32,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4561,"byte_end":4574,"line_start":98,"line_end":98,"column_start":1,"column_end":14}},{"value":"/ \t\tb: u64,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4575,"byte_end":4588,"line_start":99,"line_end":99,"column_start":1,"column_end":14}},{"value":"/ \t},","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4589,"byte_end":4596,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4597,"byte_end":4602,"line_start":101,"line_end":101,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4603,"byte_end":4606,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ let a = EnumType::A;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4607,"byte_end":4631,"line_start":103,"line_end":103,"column_start":1,"column_end":25}},{"value":"/ let b = EnumType::B(1, 2);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4632,"byte_end":4662,"line_start":104,"line_end":104,"column_start":1,"column_end":31}},{"value":"/ let c = EnumType::C { a: 1, b: 2 };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4663,"byte_end":4702,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4703,"byte_end":4706,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ a.using_encoded(|ref slice| {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4707,"byte_end":4740,"line_start":107,"line_end":107,"column_start":1,"column_end":34}},{"value":"/     assert_eq!(slice, &b\"\\x0f\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4741,"byte_end":4777,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/ });","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4778,"byte_end":4785,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4786,"byte_end":4789,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ b.using_encoded(|ref slice| {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4790,"byte_end":4823,"line_start":111,"line_end":111,"column_start":1,"column_end":34}},{"value":"/     assert_eq!(slice, &b\"\\x01\\x01\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4824,"byte_end":4888,"line_start":112,"line_end":112,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4889,"byte_end":4896,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4897,"byte_end":4900,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ c.using_encoded(|ref slice| {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4901,"byte_end":4934,"line_start":115,"line_end":115,"column_start":1,"column_end":34}},{"value":"/     assert_eq!(slice, &b\"\\x02\\x01\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":4935,"byte_end":4999,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5000,"byte_end":5007,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5008,"byte_end":5011,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ let mut da: &[u8] = b\"\\x0f\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5012,"byte_end":5044,"line_start":119,"line_end":119,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(EnumType::decode(&mut da).ok(), Some(a));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5045,"byte_end":5101,"line_start":120,"line_end":120,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5102,"byte_end":5105,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ let mut db: &[u8] = b\"\\x01\\x01\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5106,"byte_end":5166,"line_start":122,"line_end":122,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(EnumType::decode(&mut db).ok(), Some(b));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5167,"byte_end":5223,"line_start":123,"line_end":123,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5224,"byte_end":5227,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ let mut dc: &[u8] = b\"\\x02\\x01\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\";","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5228,"byte_end":5288,"line_start":125,"line_end":125,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(EnumType::decode(&mut dc).ok(), Some(c));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5289,"byte_end":5345,"line_start":126,"line_end":126,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5346,"byte_end":5349,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ let mut dz: &[u8] = &[0];","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5350,"byte_end":5379,"line_start":128,"line_end":128,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(EnumType::decode(&mut dz).ok(), None);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5380,"byte_end":5433,"line_start":129,"line_end":129,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5434,"byte_end":5437,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # fn main() { }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5438,"byte_end":5457,"line_start":131,"line_end":131,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5458,"byte_end":5465,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5466,"byte_end":5469,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ### Compact type with HasCompact","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5470,"byte_end":5506,"line_start":134,"line_end":134,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5507,"byte_end":5510,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5511,"byte_end":5518,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # // Import macros if derive feature is not used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5519,"byte_end":5572,"line_start":137,"line_end":137,"column_start":1,"column_end":54}},{"value":"/ # #[cfg(not(feature=\"derive\"))]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5573,"byte_end":5608,"line_start":138,"line_end":138,"column_start":1,"column_end":36}},{"value":"/ # use parity_scale_codec_derive::{Encode, Decode};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5609,"byte_end":5663,"line_start":139,"line_end":139,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5664,"byte_end":5667,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ use parity_scale_codec::{Encode, Decode, Compact, HasCompact};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5668,"byte_end":5734,"line_start":141,"line_end":141,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5735,"byte_end":5738,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq, Encode, Decode)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5739,"byte_end":5786,"line_start":143,"line_end":143,"column_start":1,"column_end":48}},{"value":"/ struct Test1CompactHasCompact<T: HasCompact> {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5787,"byte_end":5837,"line_start":144,"line_end":144,"column_start":1,"column_end":51}},{"value":"/     #[codec(compact)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5838,"byte_end":5863,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/     bar: T,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5864,"byte_end":5879,"line_start":146,"line_end":146,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5880,"byte_end":5885,"line_start":147,"line_end":147,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5886,"byte_end":5889,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq, Encode, Decode)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5890,"byte_end":5937,"line_start":149,"line_end":149,"column_start":1,"column_end":48}},{"value":"/ struct Test1HasCompact<T: HasCompact> {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5938,"byte_end":5981,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/     #[codec(encoded_as = \"<T as HasCompact>::Type\")]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":5982,"byte_end":6038,"line_start":151,"line_end":151,"column_start":1,"column_end":57}},{"value":"/     bar: T,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6039,"byte_end":6054,"line_start":152,"line_end":152,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6055,"byte_end":6060,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6061,"byte_end":6064,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ let test_val: (u64, usize) = (0u64, 1usize);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6065,"byte_end":6113,"line_start":155,"line_end":155,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6114,"byte_end":6117,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ let encoded = Test1HasCompact { bar: test_val.0 }.encode();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6118,"byte_end":6181,"line_start":157,"line_end":157,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(encoded.len(), test_val.1);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6182,"byte_end":6224,"line_start":158,"line_end":158,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(<Test1CompactHasCompact<u64>>::decode(&mut &encoded[..]).unwrap().bar, test_val.0);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6225,"byte_end":6323,"line_start":159,"line_end":159,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6324,"byte_end":6327,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ # fn main() { }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6328,"byte_end":6347,"line_start":161,"line_end":161,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6348,"byte_end":6355,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ ### Type with CompactAs","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6356,"byte_end":6383,"line_start":163,"line_end":163,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6384,"byte_end":6387,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6388,"byte_end":6399,"line_start":165,"line_end":165,"column_start":1,"column_end":12}},{"value":"/ # // Import macros if derive feature is not used.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6400,"byte_end":6453,"line_start":166,"line_end":166,"column_start":1,"column_end":54}},{"value":"/ # #[cfg(not(feature=\"derive\"))]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6454,"byte_end":6489,"line_start":167,"line_end":167,"column_start":1,"column_end":36}},{"value":"/ # use parity_scale_codec_derive::{Encode, Decode};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6490,"byte_end":6544,"line_start":168,"line_end":168,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6545,"byte_end":6548,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ use serde_derive::{Serialize, Deserialize};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6549,"byte_end":6596,"line_start":170,"line_end":170,"column_start":1,"column_end":48}},{"value":"/ use parity_scale_codec::{Encode, Decode, Compact, HasCompact, CompactAs};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6597,"byte_end":6674,"line_start":171,"line_end":171,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6675,"byte_end":6678,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ #[cfg_attr(feature = \"std\", derive(Serialize, Deserialize, Debug))]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6679,"byte_end":6750,"line_start":173,"line_end":173,"column_start":1,"column_end":72}},{"value":"/ #[derive(PartialEq, Eq, Clone)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6751,"byte_end":6786,"line_start":174,"line_end":174,"column_start":1,"column_end":36}},{"value":"/ struct StructHasCompact(u32);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6787,"byte_end":6820,"line_start":175,"line_end":175,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6821,"byte_end":6824,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ impl CompactAs for StructHasCompact {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6825,"byte_end":6866,"line_start":177,"line_end":177,"column_start":1,"column_end":42}},{"value":"/     type As = u32;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6867,"byte_end":6889,"line_start":178,"line_end":178,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6890,"byte_end":6893,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/     fn encode_as(&self) -> &Self::As {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6894,"byte_end":6936,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"/         &12","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6937,"byte_end":6952,"line_start":181,"line_end":181,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6953,"byte_end":6962,"line_start":182,"line_end":182,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6963,"byte_end":6966,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/     fn decode_from(_: Self::As) -> Self {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":6967,"byte_end":7012,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/         StructHasCompact(12)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7013,"byte_end":7045,"line_start":185,"line_end":185,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7046,"byte_end":7055,"line_start":186,"line_end":186,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7056,"byte_end":7061,"line_start":187,"line_end":187,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7062,"byte_end":7065,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ impl From<Compact<StructHasCompact>> for StructHasCompact {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7066,"byte_end":7129,"line_start":189,"line_end":189,"column_start":1,"column_end":64}},{"value":"/     fn from(_: Compact<StructHasCompact>) -> Self {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7130,"byte_end":7185,"line_start":190,"line_end":190,"column_start":1,"column_end":56}},{"value":"/         StructHasCompact(12)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7186,"byte_end":7218,"line_start":191,"line_end":191,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7219,"byte_end":7228,"line_start":192,"line_end":192,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7229,"byte_end":7234,"line_start":193,"line_end":193,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7235,"byte_end":7238,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq, Encode, Decode)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7239,"byte_end":7286,"line_start":195,"line_end":195,"column_start":1,"column_end":48}},{"value":"/ enum TestGenericHasCompact<T> {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7287,"byte_end":7322,"line_start":196,"line_end":196,"column_start":1,"column_end":36}},{"value":"/     A {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7323,"byte_end":7334,"line_start":197,"line_end":197,"column_start":1,"column_end":12}},{"value":"/         #[codec(compact)] a: T","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7335,"byte_end":7369,"line_start":198,"line_end":198,"column_start":1,"column_end":35}},{"value":"/     },","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7370,"byte_end":7380,"line_start":199,"line_end":199,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7381,"byte_end":7386,"line_start":200,"line_end":200,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7387,"byte_end":7390,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ let a = TestGenericHasCompact::A::<StructHasCompact> {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7391,"byte_end":7449,"line_start":202,"line_end":202,"column_start":1,"column_end":59}},{"value":"/     a: StructHasCompact(12325678),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7450,"byte_end":7488,"line_start":203,"line_end":203,"column_start":1,"column_end":39}},{"value":"/ };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7489,"byte_end":7495,"line_start":204,"line_end":204,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7496,"byte_end":7499,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ let encoded = a.encode();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7500,"byte_end":7529,"line_start":206,"line_end":206,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(encoded.len(), 2);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7530,"byte_end":7563,"line_start":207,"line_end":207,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7564,"byte_end":7567,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ # fn main() { }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7568,"byte_end":7587,"line_start":209,"line_end":209,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7588,"byte_end":7595,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7596,"byte_end":7599,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ ## Derive attributes","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7600,"byte_end":7624,"line_start":212,"line_end":212,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7625,"byte_end":7628,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ The derive implementation supports the following attributes:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7629,"byte_end":7693,"line_start":214,"line_end":214,"column_start":1,"column_end":65}},{"value":"/ - `codec(dumb_trait_bound)`: This attribute needs to be placed above the type that one of the trait","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7694,"byte_end":7797,"line_start":215,"line_end":215,"column_start":1,"column_end":104}},{"value":"/   should be implemented for. It will make the algorithm that determines the to-add trait bounds","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7798,"byte_end":7897,"line_start":216,"line_end":216,"column_start":1,"column_end":100}},{"value":"/   fall back to just use the type parameters of the type. This can be useful for situation where","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7898,"byte_end":7997,"line_start":217,"line_end":217,"column_start":1,"column_end":100}},{"value":"/   the algorithm includes private types in the public interface. By using this attribute, you should","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":7998,"byte_end":8101,"line_start":218,"line_end":218,"column_start":1,"column_end":104}},{"value":"/   not get this error/warning again.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8102,"byte_end":8141,"line_start":219,"line_end":219,"column_start":1,"column_end":40}},{"value":"/ - `codec(skip)`: Needs to be placed above a field and makes the field to be skipped while encoding/decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8142,"byte_end":8254,"line_start":220,"line_end":220,"column_start":1,"column_end":113}},{"value":"/ - `codec(compact)`: Needs to be placed above a field and makes the field use compact encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8255,"byte_end":8353,"line_start":221,"line_end":221,"column_start":1,"column_end":99}},{"value":"/   (The type needs to support compact encoding.)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8354,"byte_end":8405,"line_start":222,"line_end":222,"column_start":1,"column_end":52}},{"value":"/ - `codec(encoded_as(OtherType))`: Needs to be placed above a field and makes the field being encoded","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8406,"byte_end":8510,"line_start":223,"line_end":223,"column_start":1,"column_end":105}},{"value":"/   by using `OtherType`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8511,"byte_end":8538,"line_start":224,"line_end":224,"column_start":1,"column_end":28}},{"value":"/ - `codec(index(\"0\"))`: Needs to be placed above an enum variant to make the variant use the given","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8539,"byte_end":8640,"line_start":225,"line_end":225,"column_start":1,"column_end":102}},{"value":"/   index when encoded. By default the index is determined by counting from `0` beginning wth the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8641,"byte_end":8740,"line_start":226,"line_end":226,"column_start":1,"column_end":100}},{"value":"/   first variant.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8741,"byte_end":8761,"line_start":227,"line_end":227,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8762,"byte_end":8765,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"warn(missing_docs)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":8767,"byte_end":8789,"line_start":230,"line_end":230,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9250,"byte_end":9255,"line_start":253,"line_end":253,"column_start":9,"column_end":14},"name":"alloc","qualname":"::alloc","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":6753},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/lib.rs","byte_start":9203,"byte_end":9226,"line_start":251,"line_end":251,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11655,"byte_end":11660,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"Error","qualname":"::codec::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Descriptive error type\n","sig":null,"attributes":[{"value":"/ Descriptive error type","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11554,"byte_end":11580,"line_start":56,"line_end":56,"column_start":1,"column_end":27}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11581,"byte_end":11604,"line_start":57,"line_end":57,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12001,"byte_end":12005,"line_start":72,"line_end":72,"column_start":9,"column_end":13},"name":"what","qualname":"<Error>::what","value":"pub fn what(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Error description","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11832,"byte_end":11855,"line_start":67,"line_end":67,"column_start":2,"column_end":25}},{"value":"/ Error description","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11857,"byte_end":11878,"line_start":68,"line_end":68,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11880,"byte_end":11883,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ This function returns an actual error str when running in `std`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11885,"byte_end":11952,"line_start":70,"line_end":70,"column_start":2,"column_end":69}},{"value":"/ environment, but `\"\"` on `no_std`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11954,"byte_end":11992,"line_start":71,"line_end":71,"column_start":2,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12771,"byte_end":12776,"line_start":113,"line_end":113,"column_start":11,"column_end":16},"name":"Input","qualname":"::codec::Input","value":"Input","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" Trait that allows reading of data into a slice.\n","sig":null,"attributes":[{"value":"/ Trait that allows reading of data into a slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12709,"byte_end":12760,"line_start":112,"line_end":112,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13191,"byte_end":13204,"line_start":120,"line_end":120,"column_start":5,"column_end":18},"name":"remaining_len","qualname":"::codec::Input::remaining_len","value":"pub fn remaining_len(&mut Self) -> Result<Option<usize>, Error>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" Should return the remaining length of the input data. If no information about the input\n length is available, `None` should be returned.","sig":null,"attributes":[{"value":"/ Should return the remaining length of the input data. If no information about the input","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12780,"byte_end":12871,"line_start":114,"line_end":114,"column_start":2,"column_end":93}},{"value":"/ length is available, `None` should be returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12873,"byte_end":12924,"line_start":115,"line_end":115,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12926,"byte_end":12929,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ The length is used to constrain the preallocation while decoding. Returning a garbage","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12931,"byte_end":13020,"line_start":117,"line_end":117,"column_start":2,"column_end":91}},{"value":"/ length can open the doors for a denial of service attack to your application.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13022,"byte_end":13103,"line_start":118,"line_end":118,"column_start":2,"column_end":83}},{"value":"/ Otherwise, returning `None` can decrease the performance of your application.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13105,"byte_end":13186,"line_start":119,"line_end":119,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13437,"byte_end":13441,"line_start":126,"line_end":126,"column_start":5,"column_end":9},"name":"read","qualname":"::codec::Input::read","value":"pub fn read(&mut Self, &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" Read the exact number of bytes required to fill the given buffer.","sig":null,"attributes":[{"value":"/ Read the exact number of bytes required to fill the given buffer.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13251,"byte_end":13320,"line_start":122,"line_end":122,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13322,"byte_end":13325,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ Note that this function is similar to `std::io::Read::read_exact` and not","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13327,"byte_end":13404,"line_start":124,"line_end":124,"column_start":2,"column_end":79}},{"value":"/ `std::io::Read::read`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13406,"byte_end":13432,"line_start":125,"line_end":125,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13537,"byte_end":13546,"line_start":129,"line_end":129,"column_start":5,"column_end":14},"name":"read_byte","qualname":"::codec::Input::read_byte","value":"pub fn read_byte(&mut Self) -> Result<u8, Error>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" Read a single byte from the input.\n","sig":null,"attributes":[{"value":"/ Read a single byte from the input.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13494,"byte_end":13532,"line_start":128,"line_end":128,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13853,"byte_end":13864,"line_start":139,"line_end":139,"column_start":5,"column_end":16},"name":"descend_ref","qualname":"::codec::Input::descend_ref","value":"pub fn descend_ref(&mut Self) -> Result<(), Error>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" Descend into nested reference when decoding.\n This is called when decoding a new refence-based instance,\n such as `Vec` or `Box`. Currently all such types are\n allocated on the heap.\n","sig":null,"attributes":[{"value":"/ Descend into nested reference when decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13650,"byte_end":13698,"line_start":135,"line_end":135,"column_start":2,"column_end":50}},{"value":"/ This is called when decoding a new refence-based instance,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13700,"byte_end":13762,"line_start":136,"line_end":136,"column_start":2,"column_end":64}},{"value":"/ such as `Vec` or `Box`. Currently all such types are","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13764,"byte_end":13820,"line_start":137,"line_end":137,"column_start":2,"column_end":58}},{"value":"/ allocated on the heap.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13822,"byte_end":13848,"line_start":138,"line_end":138,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":14039,"byte_end":14049,"line_start":145,"line_end":145,"column_start":5,"column_end":15},"name":"ascend_ref","qualname":"::codec::Input::ascend_ref","value":"pub fn ascend_ref(&mut Self)","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" Ascend to previous structure level when decoding.\n This is called when decoding reference-based type is finished.\n","sig":null,"attributes":[{"value":"/ Ascend to previous structure level when decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13913,"byte_end":13966,"line_start":143,"line_end":143,"column_start":2,"column_end":55}},{"value":"/ This is called when decoding reference-based type is finished.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":13968,"byte_end":14034,"line_start":144,"line_end":144,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15763,"byte_end":15771,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"IoReader","qualname":"::codec::IoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper that implements Input for any `Read` and `Seek` type.","sig":null,"attributes":[{"value":"/ Wrapper that implements Input for any `Read` and `Seek` type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15564,"byte_end":15629,"line_start":192,"line_end":192,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15630,"byte_end":15633,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ NOTE: The remaining_len implementation returns `None` as Seek can return variable length.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15634,"byte_end":15727,"line_start":194,"line_end":194,"column_start":1,"column_end":94}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15728,"byte_end":15751,"line_start":195,"line_end":195,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":82},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15806,"byte_end":15811,"line_start":196,"line_end":196,"column_start":55,"column_end":60},"name":"0","qualname":"::codec::IoReader::0","value":"R","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16141,"byte_end":16147,"line_start":210,"line_end":210,"column_start":11,"column_end":17},"name":"Output","qualname":"::codec::Output","value":"Output: Sized","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" Trait that allows writing of data.\n","sig":null,"attributes":[{"value":"/ Trait that allows writing of data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16092,"byte_end":16130,"line_start":209,"line_end":209,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16187,"byte_end":16192,"line_start":212,"line_end":212,"column_start":5,"column_end":10},"name":"write","qualname":"::codec::Output::write","value":"pub fn write(&mut Self, &[u8])","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Write to the output.\n","sig":null,"attributes":[{"value":"/ Write to the output.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16158,"byte_end":16182,"line_start":211,"line_end":211,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16264,"byte_end":16273,"line_start":215,"line_end":215,"column_start":5,"column_end":14},"name":"push_byte","qualname":"::codec::Output::push_byte","value":"pub fn push_byte(&mut Self, u8)","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Write a single byte to the output.\n","sig":null,"attributes":[{"value":"/ Write a single byte to the output.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16221,"byte_end":16259,"line_start":214,"line_end":214,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16378,"byte_end":16382,"line_start":220,"line_end":220,"column_start":5,"column_end":9},"name":"push","qualname":"::codec::Output::push","value":"pub fn push<V: Encode + ?Sized>(&mut Self, &V)","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Write encoding of given value to the output.\n","sig":null,"attributes":[{"value":"/ Write encoding of given value to the output.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16325,"byte_end":16373,"line_start":219,"line_end":219,"column_start":2,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":96},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17074,"byte_end":17081,"line_start":247,"line_end":247,"column_start":2,"column_end":9},"name":"Unknown","qualname":"::codec::TypeInfo::Unknown","value":"TypeInfo::Unknown","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Default value of [`Encode::TYPE_INFO`] to not require implementors to set this value in the trait.\n","sig":null,"attributes":[{"value":"/ Default value of [`Encode::TYPE_INFO`] to not require implementors to set this value in the trait.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16970,"byte_end":17072,"line_start":246,"line_end":246,"column_start":2,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":98},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17084,"byte_end":17086,"line_start":248,"line_end":248,"column_start":2,"column_end":4},"name":"U8","qualname":"::codec::TypeInfo::U8","value":"TypeInfo::U8","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17089,"byte_end":17091,"line_start":249,"line_end":249,"column_start":2,"column_end":4},"name":"I8","qualname":"::codec::TypeInfo::I8","value":"TypeInfo::I8","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":102},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17094,"byte_end":17097,"line_start":250,"line_end":250,"column_start":2,"column_end":5},"name":"U16","qualname":"::codec::TypeInfo::U16","value":"TypeInfo::U16","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":104},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17100,"byte_end":17103,"line_start":251,"line_end":251,"column_start":2,"column_end":5},"name":"I16","qualname":"::codec::TypeInfo::I16","value":"TypeInfo::I16","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":106},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17106,"byte_end":17109,"line_start":252,"line_end":252,"column_start":2,"column_end":5},"name":"U32","qualname":"::codec::TypeInfo::U32","value":"TypeInfo::U32","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":108},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17112,"byte_end":17115,"line_start":253,"line_end":253,"column_start":2,"column_end":5},"name":"I32","qualname":"::codec::TypeInfo::I32","value":"TypeInfo::I32","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":110},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17118,"byte_end":17121,"line_start":254,"line_end":254,"column_start":2,"column_end":5},"name":"U64","qualname":"::codec::TypeInfo::U64","value":"TypeInfo::U64","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":112},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17124,"byte_end":17127,"line_start":255,"line_end":255,"column_start":2,"column_end":5},"name":"I64","qualname":"::codec::TypeInfo::I64","value":"TypeInfo::I64","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":114},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17130,"byte_end":17134,"line_start":256,"line_end":256,"column_start":2,"column_end":6},"name":"U128","qualname":"::codec::TypeInfo::U128","value":"TypeInfo::U128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":116},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17137,"byte_end":17141,"line_start":257,"line_end":257,"column_start":2,"column_end":6},"name":"I128","qualname":"::codec::TypeInfo::I128","value":"TypeInfo::I128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":95},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16958,"byte_end":16966,"line_start":245,"line_end":245,"column_start":10,"column_end":18},"name":"TypeInfo","qualname":"::codec::TypeInfo","value":"pub enum TypeInfo {\n\n    /// Default value of [`Encode::TYPE_INFO`] to not require implementors to set this value in the trait.\n    Unknown,\n    U8,\n    I8,\n    U16,\n    I16,\n    U32,\n    I32,\n    U64,\n    I64,\n    U128,\n    I128,\n}","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116}],"decl_id":null,"docs":" !INTERNAL USE ONLY!","sig":null,"attributes":[{"value":"/ !INTERNAL USE ONLY!","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16788,"byte_end":16811,"line_start":240,"line_end":240,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16812,"byte_end":16815,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ This enum provides type information to optimize encoding/decoding by doing fake specialization.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16816,"byte_end":16915,"line_start":242,"line_end":242,"column_start":1,"column_end":100}},{"value":"non_exhaustive","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16931,"byte_end":16948,"line_start":244,"line_end":244,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":118},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17411,"byte_end":17417,"line_start":264,"line_end":264,"column_start":11,"column_end":17},"name":"Encode","qualname":"::codec::Encode","value":"Encode","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" Trait that allows zero-copy write of value-references to slices in LE format.","sig":null,"attributes":[{"value":"/ Trait that allows zero-copy write of value-references to slices in LE format.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17146,"byte_end":17227,"line_start":260,"line_end":260,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17228,"byte_end":17231,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ Implementations should override `using_encoded` for value types and `encode_to` and `size_hint` for allocating types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17232,"byte_end":17353,"line_start":262,"line_end":262,"column_start":1,"column_end":122}},{"value":"/ Wrapper types should override all methods.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17354,"byte_end":17400,"line_start":263,"line_end":263,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17558,"byte_end":17567,"line_start":268,"line_end":268,"column_start":8,"column_end":17},"name":"TYPE_INFO","qualname":"::codec::Encode::TYPE_INFO","value":"TypeInfo","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17769,"byte_end":17778,"line_start":274,"line_end":274,"column_start":5,"column_end":14},"name":"size_hint","qualname":"::codec::Encode::size_hint","value":"pub fn size_hint(&Self) -> usize","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" If possible give a hint of expected size of the encoding.","sig":null,"attributes":[{"value":"/ If possible give a hint of expected size of the encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17601,"byte_end":17662,"line_start":270,"line_end":270,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17664,"byte_end":17667,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ This method is used inside default implementation of `encode`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17669,"byte_end":17734,"line_start":272,"line_end":272,"column_start":2,"column_end":67}},{"value":"/ to avoid re-allocations.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17736,"byte_end":17764,"line_start":273,"line_end":273,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17872,"byte_end":17881,"line_start":279,"line_end":279,"column_start":5,"column_end":14},"name":"encode_to","qualname":"::codec::Encode::encode_to","value":"pub fn encode_to<T: Output>(&Self, &mut T)","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Convert self to a slice and append it to the destination.\n","sig":null,"attributes":[{"value":"/ Convert self to a slice and append it to the destination.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17806,"byte_end":17867,"line_start":278,"line_end":278,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18007,"byte_end":18013,"line_start":284,"line_end":284,"column_start":5,"column_end":11},"name":"encode","qualname":"::codec::Encode::encode","value":"pub fn encode(&Self) -> Vec<u8>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Convert self to an owned vector.\n","sig":null,"attributes":[{"value":"/ Convert self to an owned vector.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":17966,"byte_end":18002,"line_start":283,"line_end":283,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18196,"byte_end":18209,"line_start":291,"line_end":291,"column_start":5,"column_end":18},"name":"using_encoded","qualname":"::codec::Encode::using_encoded","value":"pub fn using_encoded<R, F: FnOnce(&[u8]) -> R>(&Self, F) -> R","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Convert self to a slice and then invoke the given closure with it.\n","sig":null,"attributes":[{"value":"/ Convert self to a slice and then invoke the given closure with it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18121,"byte_end":18191,"line_start":290,"line_end":290,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":128},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18412,"byte_end":18424,"line_start":298,"line_end":298,"column_start":11,"column_end":23},"name":"DecodeLength","qualname":"::codec::DecodeLength","value":"DecodeLength","parent":null,"children":[{"krate":0,"index":129}],"decl_id":null,"docs":" Trait that allows the length of a collection to be read, without having\n to read and decode the entire elements.\n","sig":null,"attributes":[{"value":"/ Trait that allows the length of a collection to be read, without having","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18282,"byte_end":18357,"line_start":296,"line_end":296,"column_start":1,"column_end":76}},{"value":"/ to read and decode the entire elements.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18358,"byte_end":18401,"line_start":297,"line_end":297,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18485,"byte_end":18488,"line_start":300,"line_end":300,"column_start":5,"column_end":8},"name":"len","qualname":"::codec::DecodeLength::len","value":"pub fn len(&[u8]) -> Result<usize, Error>","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Return the number of elements in `self_encoded`.\n","sig":null,"attributes":[{"value":"/ Return the number of elements in `self_encoded`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18428,"byte_end":18480,"line_start":299,"line_end":299,"column_start":2,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":130},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18631,"byte_end":18637,"line_start":304,"line_end":304,"column_start":11,"column_end":17},"name":"Decode","qualname":"::codec::Decode","value":"Decode: Sized","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" Trait that allows zero-copy read of value-references from slices in LE format.\n","sig":null,"attributes":[{"value":"/ Trait that allows zero-copy read of value-references from slices in LE format.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18538,"byte_end":18620,"line_start":303,"line_end":303,"column_start":1,"column_end":83}}]},{"kind":"Const","id":{"krate":0,"index":131},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18785,"byte_end":18794,"line_start":308,"line_end":308,"column_start":8,"column_end":17},"name":"TYPE_INFO","qualname":"::codec::Decode::TYPE_INFO","value":"TypeInfo","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18881,"byte_end":18887,"line_start":311,"line_end":311,"column_start":5,"column_end":11},"name":"decode","qualname":"::codec::Decode::decode","value":"pub fn decode<I: Input>(&mut I) -> Result<Self, Error>","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":" Attempt to deserialise the value from input.\n","sig":null,"attributes":[{"value":"/ Attempt to deserialise the value from input.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18828,"byte_end":18876,"line_start":310,"line_end":310,"column_start":2,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":134},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19042,"byte_end":19047,"line_start":315,"line_end":315,"column_start":11,"column_end":16},"name":"Codec","qualname":"::codec::Codec","value":"Codec: Decode + Encode","parent":null,"children":[],"decl_id":null,"docs":" Trait that allows zero-copy read/write of value-references to/from slices in LE format.\n","sig":null,"attributes":[{"value":"/ Trait that allows zero-copy read/write of value-references to/from slices in LE format.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18940,"byte_end":19031,"line_start":314,"line_end":314,"column_start":1,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":137},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19251,"byte_end":19261,"line_start":320,"line_end":320,"column_start":11,"column_end":21},"name":"FullEncode","qualname":"::codec::FullEncode","value":"FullEncode: Encode + EncodeLike","parent":null,"children":[],"decl_id":null,"docs":" Trait that bound `EncodeLike` along with `Encode`. Usefull for generic being used in function\n with `EncodeLike` parameters.\n","sig":null,"attributes":[{"value":"/ Trait that bound `EncodeLike` along with `Encode`. Usefull for generic being used in function","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19109,"byte_end":19206,"line_start":318,"line_end":318,"column_start":1,"column_end":98}},{"value":"/ with `EncodeLike` parameters.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19207,"byte_end":19240,"line_start":319,"line_end":319,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19477,"byte_end":19486,"line_start":325,"line_end":325,"column_start":11,"column_end":20},"name":"FullCodec","qualname":"::codec::FullCodec","value":"FullCodec: Decode + FullEncode","parent":null,"children":[],"decl_id":null,"docs":" Trait that bound `EncodeLike` along with `Codec`. Usefull for generic being used in function\n with `EncodeLike` parameters.\n","sig":null,"attributes":[{"value":"/ Trait that bound `EncodeLike` along with `Codec`. Usefull for generic being used in function","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19336,"byte_end":19432,"line_start":323,"line_end":323,"column_start":1,"column_end":97}},{"value":"/ with `EncodeLike` parameters.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19433,"byte_end":19466,"line_start":324,"line_end":324,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":143},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19804,"byte_end":19821,"line_start":333,"line_end":333,"column_start":11,"column_end":28},"name":"WrapperTypeEncode","qualname":"::codec::WrapperTypeEncode","value":"WrapperTypeEncode: Deref","parent":null,"children":[],"decl_id":null,"docs":" A marker trait for types that wrap other encodable type.","sig":null,"attributes":[{"value":"/ A marker trait for types that wrap other encodable type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19560,"byte_end":19620,"line_start":328,"line_end":328,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19621,"byte_end":19624,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ Such types should not carry any additional information","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19625,"byte_end":19683,"line_start":330,"line_end":330,"column_start":1,"column_end":59}},{"value":"/ that would require to be encoded, because the encoding","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19684,"byte_end":19742,"line_start":331,"line_end":331,"column_start":1,"column_end":59}},{"value":"/ is assumed to be the same as the wrapped type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19743,"byte_end":19793,"line_start":332,"line_end":332,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21903,"byte_end":21920,"line_start":401,"line_end":401,"column_start":11,"column_end":28},"name":"WrapperTypeDecode","qualname":"::codec::WrapperTypeDecode","value":"WrapperTypeDecode: Sized","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":" A marker trait for types that can be created solely from other decodable types.","sig":null,"attributes":[{"value":"/ A marker trait for types that can be created solely from other decodable types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21728,"byte_end":21811,"line_start":398,"line_end":398,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21812,"byte_end":21815,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ The decoding of such type is assumed to be the same as the wrapped type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21816,"byte_end":21892,"line_start":400,"line_end":400,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":217},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21957,"byte_end":21964,"line_start":403,"line_end":403,"column_start":7,"column_end":14},"name":"Wrapped","qualname":"::codec::WrapperTypeDecode::Wrapped","value":"type Wrapped: Into<Self>;","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" A wrapped type.\n","sig":null,"attributes":[{"value":"/ A wrapped type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21931,"byte_end":21950,"line_start":402,"line_end":402,"column_start":2,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":233},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":23717,"byte_end":23728,"line_start":455,"line_end":455,"column_start":11,"column_end":22},"name":"EncodeAsRef","qualname":"::codec::EncodeAsRef","value":"EncodeAsRef<'a, T: 'a>","parent":null,"children":[{"krate":0,"index":236}],"decl_id":null,"docs":" Something that can be encoded as a reference.\n","sig":null,"attributes":[{"value":"/ Something that can be encoded as a reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":23657,"byte_end":23706,"line_start":454,"line_end":454,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":236},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":23799,"byte_end":23806,"line_start":457,"line_end":457,"column_start":7,"column_end":14},"name":"RefType","qualname":"::codec::EncodeAsRef::RefType","value":"type RefType: Encode + From<&'a T>;","parent":{"krate":0,"index":233},"children":[],"decl_id":null,"docs":" The reference type that is used for encoding.\n","sig":null,"attributes":[{"value":"/ The reference type that is used for encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":23743,"byte_end":23792,"line_start":456,"line_end":456,"column_start":2,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":774},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24811,"byte_end":24821,"line_start":502,"line_end":502,"column_start":12,"column_end":22},"name":"OptionBool","qualname":"::codec::OptionBool","value":"","parent":null,"children":[],"decl_id":null,"docs":" Shim type because we can't do a specialised implementation for `Option<bool>` directly.\n","sig":null,"attributes":[{"value":"/ Shim type because we can't do a specialised implementation for `Option<bool>` directly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24670,"byte_end":24761,"line_start":500,"line_end":500,"column_start":1,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":776},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24822,"byte_end":24838,"line_start":502,"line_end":502,"column_start":23,"column_end":39},"name":"0","qualname":"::codec::OptionBool::0","value":"std::option::Option<bool>","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":425},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57795,"byte_end":57805,"line_start":71,"line_end":71,"column_start":11,"column_end":21},"name":"CompactLen","qualname":"::compact::CompactLen","value":"CompactLen<T>","parent":null,"children":[{"krate":0,"index":427}],"decl_id":null,"docs":" Something that can return the compact encoded length for a given value.\n","sig":null,"attributes":[{"value":"/ Something that can return the compact encoded length for a given value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57709,"byte_end":57784,"line_start":70,"line_end":70,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57876,"byte_end":57887,"line_start":73,"line_end":73,"column_start":5,"column_end":16},"name":"compact_len","qualname":"::compact::CompactLen::compact_len","value":"pub fn compact_len(&T) -> usize","parent":{"krate":0,"index":425},"children":[],"decl_id":null,"docs":" Returns the compact encoded length for the given value.\n","sig":null,"attributes":[{"value":"/ Returns the compact encoded length for the given value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57812,"byte_end":57871,"line_start":72,"line_end":72,"column_start":2,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6682},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58067,"byte_end":58074,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"Compact","qualname":"::compact::Compact","value":"","parent":null,"children":[],"decl_id":null,"docs":" Compact-encoded variant of T. This is more space-efficient but less compute-efficient.\n","sig":null,"attributes":[{"value":"/ Compact-encoded variant of T. This is more space-efficient but less compute-efficient.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57910,"byte_end":58000,"line_start":76,"line_end":76,"column_start":1,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":6685},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58078,"byte_end":58083,"line_start":78,"line_end":78,"column_start":23,"column_end":28},"name":"0","qualname":"::compact::Compact::0","value":"T","parent":{"krate":0,"index":6682},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":435},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58324,"byte_end":58333,"line_start":89,"line_end":89,"column_start":11,"column_end":20},"name":"CompactAs","qualname":"::compact::CompactAs","value":"CompactAs: From<Compact<Self>>","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"decl_id":null,"docs":" Allow foreign structs to be wrap in Compact\n","sig":null,"attributes":[{"value":"/ Allow foreign structs to be wrap in Compact","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58266,"byte_end":58313,"line_start":88,"line_end":88,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":436},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58430,"byte_end":58432,"line_start":91,"line_end":91,"column_start":7,"column_end":9},"name":"As","qualname":"::compact::CompactAs::As","value":"type As;","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" A compact-encodable type that should be used as the encoding.\n","sig":null,"attributes":[{"value":"/ A compact-encodable type that should be used as the encoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58358,"byte_end":58423,"line_start":90,"line_end":90,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58472,"byte_end":58481,"line_start":94,"line_end":94,"column_start":5,"column_end":14},"name":"encode_as","qualname":"::compact::CompactAs::encode_as","value":"pub fn encode_as(&Self) -> &Self::As","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" Returns the encodable type.\n","sig":null,"attributes":[{"value":"/ Returns the encodable type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58436,"byte_end":58467,"line_start":93,"line_end":93,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58552,"byte_end":58563,"line_start":97,"line_end":97,"column_start":5,"column_end":16},"name":"decode_from","qualname":"::compact::CompactAs::decode_from","value":"pub fn decode_from(Self::As) -> Self","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" Create `Self` from the decodable type.\n","sig":null,"attributes":[{"value":"/ Create `Self` from the decodable type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58505,"byte_end":58547,"line_start":96,"line_end":96,"column_start":2,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":6724},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60266,"byte_end":60276,"line_start":179,"line_end":179,"column_start":12,"column_end":22},"name":"CompactRef","qualname":"::compact::CompactRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" Compact-encoded variant of &'a T. This is more space-efficient but less compute-efficient.\n","sig":null,"attributes":[{"value":"/ Compact-encoded variant of &'a T. This is more space-efficient but less compute-efficient.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60122,"byte_end":60216,"line_start":177,"line_end":177,"column_start":1,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":6728},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60284,"byte_end":60293,"line_start":179,"line_end":179,"column_start":30,"column_end":39},"name":"0","qualname":"::compact::CompactRef::0","value":"&'a T","parent":{"krate":0,"index":6724},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":489},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61077,"byte_end":61092,"line_start":206,"line_end":206,"column_start":11,"column_end":26},"name":"MaybeDebugSerde","qualname":"::compact::MaybeDebugSerde","value":"MaybeDebugSerde: core::fmt::Debug + serde::Serialize + for<'a> serde::Deserialize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61043,"byte_end":61066,"line_start":205,"line_end":205,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":494},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61515,"byte_end":61525,"line_start":216,"line_end":216,"column_start":11,"column_end":21},"name":"HasCompact","qualname":"::compact::HasCompact","value":"HasCompact: Sized","parent":null,"children":[{"krate":0,"index":495}],"decl_id":null,"docs":" Trait that tells you if a given type can be encoded/decoded in a compact way.\n","sig":null,"attributes":[{"value":"/ Trait that tells you if a given type can be encoded/decoded in a compact way.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61423,"byte_end":61504,"line_start":215,"line_end":215,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":495},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61576,"byte_end":61580,"line_start":218,"line_end":218,"column_start":7,"column_end":11},"name":"Type","qualname":"::compact::HasCompact::Type","value":"type Type: for<'a> EncodeAsRef<'a, Self> + Decode + From<Self> + Into<Self> + Clone +\n\t\tPartialEq + Eq + MaybeDebugSerde;","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" The compact type; this can be\n","sig":null,"attributes":[{"value":"/ The compact type; this can be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61536,"byte_end":61569,"line_start":217,"line_end":217,"column_start":2,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":594},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82401,"byte_end":82407,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"Joiner","qualname":"::joiner::Joiner","value":"Joiner","parent":null,"children":[{"krate":0,"index":595}],"decl_id":null,"docs":" Trait to allow itself to be serialised into a value which can be extended\n by bytes.\n","sig":null,"attributes":[{"value":"/ Trait to allow itself to be serialised into a value which can be extended","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82299,"byte_end":82376,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ by bytes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82377,"byte_end":82390,"line_start":22,"line_end":22,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82455,"byte_end":82458,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"and","qualname":"::joiner::Joiner::and","value":"pub fn and<V: Codec + Sized>(Self, &V) -> Self","parent":{"krate":0,"index":594},"children":[],"decl_id":null,"docs":" Append encoding of value to `Self`.\n","sig":null,"attributes":[{"value":"/ Append encoding of value to `Self`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82411,"byte_end":82450,"line_start":24,"line_end":24,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/keyedvec.rs","byte_start":83472,"byte_end":83480,"line_start":23,"line_end":23,"column_start":11,"column_end":19},"name":"KeyedVec","qualname":"::keyedvec::KeyedVec","value":"KeyedVec","parent":null,"children":[{"krate":0,"index":608}],"decl_id":null,"docs":" Trait to allow itself to be serialised and prepended by a given slice.\n","sig":null,"attributes":[{"value":"/ Trait to allow itself to be serialised and prepended by a given slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/keyedvec.rs","byte_start":83387,"byte_end":83461,"line_start":22,"line_end":22,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/keyedvec.rs","byte_start":83547,"byte_end":83559,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"to_keyed_vec","qualname":"::keyedvec::KeyedVec::to_keyed_vec","value":"pub fn to_keyed_vec(&Self, &[u8]) -> Vec<u8>","parent":{"krate":0,"index":607},"children":[],"decl_id":null,"docs":" Return an encoding of `Self` prepended by given slice.\n","sig":null,"attributes":[{"value":"/ Return an encoding of `Self` prepended by given slice.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/keyedvec.rs","byte_start":83484,"byte_end":83542,"line_start":24,"line_end":24,"column_start":2,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":618},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84712,"byte_end":84721,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"DecodeAll","qualname":"::decode_all::DecodeAll","value":"DecodeAll: Sized","parent":null,"children":[{"krate":0,"index":619}],"decl_id":null,"docs":" Extension trait to [`Decode`] that ensures that the given input data is consumed completly while\n decoding.\n","sig":null,"attributes":[{"value":"/ Extension trait to [`Decode`] that ensures that the given input data is consumed completly while","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84587,"byte_end":84687,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84688,"byte_end":84701,"line_start":21,"line_end":21,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84851,"byte_end":84861,"line_start":25,"line_end":25,"column_start":5,"column_end":15},"name":"decode_all","qualname":"::decode_all::DecodeAll::decode_all","value":"pub fn decode_all(&[u8]) -> Result<Self, Error>","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":" Decode `Self` and consume all of the given input data. If not all data is consumed, an error\n is returned.\n","sig":null,"attributes":[{"value":"/ Decode `Self` and consume all of the given input data. If not all data is consumed, an error","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84732,"byte_end":84828,"line_start":23,"line_end":23,"column_start":2,"column_end":98}},{"value":"/ is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84830,"byte_end":84846,"line_start":24,"line_end":24,"column_start":2,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":629},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87618,"byte_end":87629,"line_start":22,"line_end":22,"column_start":11,"column_end":22},"name":"DecodeLimit","qualname":"::depth_limit::DecodeLimit","value":"DecodeLimit: Sized","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631}],"decl_id":null,"docs":" Extension trait to [`Decode`] that ensures that the given input data is consumed completly while\n decoding.\n","sig":null,"attributes":[{"value":"/ Extension trait to [`Decode`] that ensures that the given input data is consumed completly while","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87493,"byte_end":87593,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ decoding.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87594,"byte_end":87607,"line_start":21,"line_end":21,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87716,"byte_end":87739,"line_start":25,"line_end":25,"column_start":5,"column_end":28},"name":"decode_with_depth_limit","qualname":"::depth_limit::DecodeLimit::decode_with_depth_limit","value":"pub fn decode_with_depth_limit(u32, &[u8]) -> Result<Self, Error>","parent":{"krate":0,"index":629},"children":[],"decl_id":null,"docs":" Decode `Self` with given maximum recursion depth.\n is returned.\n","sig":null,"attributes":[{"value":"/ Decode `Self` with given maximum recursion depth.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87640,"byte_end":87693,"line_start":23,"line_end":23,"column_start":2,"column_end":55}},{"value":"/ is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87695,"byte_end":87711,"line_start":24,"line_end":24,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87910,"byte_end":87937,"line_start":28,"line_end":28,"column_start":5,"column_end":32},"name":"decode_all_with_depth_limit","qualname":"::depth_limit::DecodeLimit::decode_all_with_depth_limit","value":"pub fn decode_all_with_depth_limit(u32, &[u8]) -> Result<Self, Error>","parent":{"krate":0,"index":629},"children":[],"decl_id":null,"docs":" Decode `Self` and consume all of the given input data. If not all data is consumed, an error\n is returned.\n","sig":null,"attributes":[{"value":"/ Decode `Self` and consume all of the given input data. If not all data is consumed, an error","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87791,"byte_end":87887,"line_start":26,"line_end":26,"column_start":2,"column_end":98}},{"value":"/ is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87889,"byte_end":87905,"line_start":27,"line_end":27,"column_start":2,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":663},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90584,"byte_end":90596,"line_start":24,"line_end":24,"column_start":11,"column_end":23},"name":"EncodeAppend","qualname":"::encode_append::EncodeAppend","value":"EncodeAppend","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":668}],"decl_id":null,"docs":" Trait that allows to append items to an encoded representation without\n decoding all previous added items.\n","sig":null,"attributes":[{"value":"/ Trait that allows to append items to an encoded representation without","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90460,"byte_end":90534,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ decoding all previous added items.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90535,"byte_end":90573,"line_start":23,"line_end":23,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":664},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90642,"byte_end":90646,"line_start":26,"line_end":26,"column_start":7,"column_end":11},"name":"Item","qualname":"::encode_append::EncodeAppend::Item","value":"type Item: Encode;","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" The item that will be appended.\n","sig":null,"attributes":[{"value":"/ The item that will be appended.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90600,"byte_end":90635,"line_start":25,"line_end":25,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90875,"byte_end":90881,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"append","qualname":"::encode_append::EncodeAppend::append","value":"pub fn append<'a, I: IntoIterator<Item = &'a Self::Item>>(Vec<u8>, I)\n-> Result<Vec<u8>, Error> where Self::Item: 'a, I::IntoIter: ExactSizeIterator","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Append all items in `iter` to the given `self_encoded` representation\n or if `self_encoded` value is empty then insert the given input data.\n","sig":null,"attributes":[{"value":"/ Append all items in `iter` to the given `self_encoded` representation","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90658,"byte_end":90731,"line_start":28,"line_end":28,"column_start":2,"column_end":75}},{"value":"/ or if `self_encoded` value is empty then insert the given input data.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90733,"byte_end":90806,"line_start":29,"line_end":29,"column_start":2,"column_end":75}},{"value":"deprecated(note = \"Consider using `append_or_new` instead\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":90808,"byte_end":90870,"line_start":30,"line_end":30,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91637,"byte_end":91650,"line_start":53,"line_end":53,"column_start":5,"column_end":18},"name":"append_or_new","qualname":"::encode_append::EncodeAppend::append_or_new","value":"pub fn append_or_new<EncodeLikeItem, I>(Vec<u8>, I) -> Result<Vec<u8>, Error>\nwhere I: IntoIterator<Item = EncodeLikeItem>,\nEncodeLikeItem: EncodeLike<Self::Item>, I::IntoIter: ExactSizeIterator","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Append all items in `iter` to the given `self_encoded` representation\n or if `self_encoded` value is empty, `iter` is encoded to the `Self` representation.","sig":null,"attributes":[{"value":"/ Append all items in `iter` to the given `self_encoded` representation","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91046,"byte_end":91119,"line_start":36,"line_end":36,"column_start":2,"column_end":75}},{"value":"/ or if `self_encoded` value is empty, `iter` is encoded to the `Self` representation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91121,"byte_end":91209,"line_start":37,"line_end":37,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91211,"byte_end":91214,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91216,"byte_end":91229,"line_start":39,"line_end":39,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91231,"byte_end":91234,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91236,"byte_end":91243,"line_start":41,"line_end":41,"column_start":2,"column_end":9}},{"value":"/# use parity_scale_codec::EncodeAppend;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91245,"byte_end":91287,"line_start":42,"line_end":42,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91289,"byte_end":91292,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ // Some encoded data","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91294,"byte_end":91318,"line_start":44,"line_end":44,"column_start":2,"column_end":26}},{"value":"/ let data = Vec::new();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91320,"byte_end":91346,"line_start":45,"line_end":45,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91348,"byte_end":91351,"line_start":46,"line_end":46,"column_start":2,"column_end":5}},{"value":"/ let item = 8u32;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91353,"byte_end":91373,"line_start":47,"line_end":47,"column_start":2,"column_end":22}},{"value":"/ let encoded = <Vec<u32> as EncodeAppend>::append(data, std::iter::once(&item)).expect(\"Adds new element\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91375,"byte_end":91485,"line_start":48,"line_end":48,"column_start":2,"column_end":112}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91487,"byte_end":91490,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ // Add multiple element","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91492,"byte_end":91519,"line_start":50,"line_end":50,"column_start":2,"column_end":29}},{"value":"/ <Vec<u32> as EncodeAppend>::append(encoded, &[700u32, 800u32, 10u32]).expect(\"Adds new elements\");","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91521,"byte_end":91623,"line_start":51,"line_end":51,"column_start":2,"column_end":104}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91625,"byte_end":91632,"line_start":52,"line_end":52,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":701},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100497,"byte_end":100507,"line_start":73,"line_end":73,"column_start":11,"column_end":21},"name":"EncodeLike","qualname":"::encode_like::EncodeLike","value":"EncodeLike<T: Encode = Self>: Sized + Encode","parent":null,"children":[],"decl_id":null,"docs":" A marker trait that tells the compiler that a type encode to the same representation as another\n type.","sig":null,"attributes":[{"value":"/ A marker trait that tells the compiler that a type encode to the same representation as another","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98398,"byte_end":98497,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"/ type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98498,"byte_end":98507,"line_start":18,"line_end":18,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98508,"byte_end":98511,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ E.g. `Vec<u8>` has the same encoded representation as `&[u8]`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98512,"byte_end":98578,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98579,"byte_end":98582,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98583,"byte_end":98596,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98597,"byte_end":98600,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98601,"byte_end":98608,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/# use parity_scale_codec::{EncodeLike, Encode};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98609,"byte_end":98659,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ fn encode_like<T: Encode, R: EncodeLike<T>>(data: &R) {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98660,"byte_end":98719,"line_start":26,"line_end":26,"column_start":1,"column_end":60}},{"value":"/     data.encode(); // Valid `T` encoded value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98720,"byte_end":98770,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98771,"byte_end":98776,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98777,"byte_end":98780,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98781,"byte_end":98796,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/     // Just pass the a reference to the normal tuple.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98797,"byte_end":98854,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/     encode_like::<(u32, u32), _>(&(1u32, 2u32));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98855,"byte_end":98907,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/     // Pass a tuple of references","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98908,"byte_end":98945,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/     encode_like::<(u32, u32), _>(&(&1u32, &2u32));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":98946,"byte_end":99000,"line_start":34,"line_end":34,"column_start":1,"column_end":55}},{"value":"/     // Pass a tuple of a reference and a value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99001,"byte_end":99052,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/     encode_like::<(u32, u32), _>(&(&1u32, 2u32));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99053,"byte_end":99106,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99107,"byte_end":99112,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99113,"byte_end":99120,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99121,"byte_end":99124,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99125,"byte_end":99138,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99139,"byte_end":99142,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The relation is not symetric, `T` implements `EncodeLike<U>` does not mean `U` has same","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99143,"byte_end":99234,"line_start":42,"line_end":42,"column_start":1,"column_end":92}},{"value":"/ representation as `T`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99235,"byte_end":99261,"line_start":43,"line_end":43,"column_start":1,"column_end":27}},{"value":"/ For instance we could imaging a non zero integer to be encoded to the same representation as","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99262,"byte_end":99358,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ the said integer but not the other way around.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99359,"byte_end":99409,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99410,"byte_end":99413,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Limitation","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99414,"byte_end":99430,"line_start":47,"line_end":47,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99431,"byte_end":99434,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Not all possible implementations of EncodeLike are implemented (for instance `Box<Box<u32>>`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99435,"byte_end":99531,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"/ does not implement `EncodeLike<u32>`). To bypass this issue either open a PR to add the new","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99532,"byte_end":99627,"line_start":50,"line_end":50,"column_start":1,"column_end":96}},{"value":"/ combination or use [`Ref`](./struct.Ref.html) reference wrapper or define your own wrapper","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99628,"byte_end":99722,"line_start":51,"line_end":51,"column_start":1,"column_end":95}},{"value":"/ and implement `EncodeLike` on it as such:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99723,"byte_end":99768,"line_start":52,"line_end":52,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99769,"byte_end":99776,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/# use parity_scale_codec::{EncodeLike, Encode, WrapperTypeEncode};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99777,"byte_end":99846,"line_start":54,"line_end":54,"column_start":1,"column_end":70}},{"value":"/ fn encode_like<T: Encode, R: EncodeLike<T>>(data: &R) {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99847,"byte_end":99906,"line_start":55,"line_end":55,"column_start":1,"column_end":60}},{"value":"/     data.encode(); // Valid `T` encoded value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99907,"byte_end":99957,"line_start":56,"line_end":56,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99958,"byte_end":99963,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99964,"byte_end":99967,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ struct MyWrapper<'a>(&'a (Box<Box<u32>>, u32));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":99968,"byte_end":100019,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ impl<'a> core::ops::Deref for MyWrapper<'a> { // Or use derive_deref crate","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100020,"byte_end":100098,"line_start":60,"line_end":60,"column_start":1,"column_end":79}},{"value":"/     type Target = (Box<Box<u32>>, u32);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100099,"byte_end":100142,"line_start":61,"line_end":61,"column_start":1,"column_end":44}},{"value":"/     fn deref(&self) -> &Self::Target { &self.0 }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100143,"byte_end":100195,"line_start":62,"line_end":62,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100196,"byte_end":100201,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100202,"byte_end":100205,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ impl<'a> parity_scale_codec::WrapperTypeEncode for MyWrapper<'a> {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100206,"byte_end":100277,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/ impl<'a> parity_scale_codec::EncodeLike<(u32, u32)> for MyWrapper<'a> {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100278,"byte_end":100354,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100355,"byte_end":100358,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100359,"byte_end":100374,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/     let v = (Box::new(Box::new(0)), 0);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100375,"byte_end":100418,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/     encode_like::<(u32, u32), _>(&MyWrapper(&v));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100419,"byte_end":100472,"line_start":70,"line_end":70,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100473,"byte_end":100478,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100479,"byte_end":100486,"line_start":72,"line_end":72,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":703},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100944,"byte_end":100947,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"Ref","qualname":"::encode_like::Ref","value":"","parent":null,"children":[],"decl_id":null,"docs":" Reference wrapper that implement encode like any type that is encoded like its inner type.","sig":null,"attributes":[{"value":"/ Reference wrapper that implement encode like any type that is encoded like its inner type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100546,"byte_end":100640,"line_start":75,"line_end":75,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100641,"byte_end":100644,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100645,"byte_end":100658,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100659,"byte_end":100662,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100663,"byte_end":100674,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ # use parity_scale_codec::{EncodeLike, Ref};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100675,"byte_end":100723,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"/ fn foo<T: EncodeLike<u8>>(t: T) -> T {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100724,"byte_end":100766,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/     store_t(Ref::from(&t)); // Store t without moving it, but only using a reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100767,"byte_end":100856,"line_start":82,"line_end":82,"column_start":1,"column_end":90}},{"value":"/     t","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100857,"byte_end":100866,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100867,"byte_end":100872,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100873,"byte_end":100876,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ fn store_t<T: EncodeLike<u8>>(t: T) {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100877,"byte_end":100918,"line_start":86,"line_end":86,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100919,"byte_end":100924,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100925,"byte_end":100932,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11823,"byte_end":11828,"line_start":66,"line_end":66,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12311,"byte_end":12316,"line_start":87,"line_end":87,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12458,"byte_end":12463,"line_start":94,"line_end":94,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12542,"byte_end":12547,"line_start":100,"line_end":100,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":14493,"byte_end":14498,"line_start":165,"line_end":165,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15888,"byte_end":15896,"line_start":199,"line_end":199,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16647,"byte_end":16648,"line_start":233,"line_end":233,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19103,"byte_end":19104,"line_start":316,"line_end":316,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19330,"byte_end":19331,"line_start":321,"line_end":321,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19554,"byte_end":19555,"line_start":326,"line_end":326,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19871,"byte_end":19874,"line_start":335,"line_end":335,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19921,"byte_end":19924,"line_start":336,"line_end":336,"column_start":41,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19965,"byte_end":19968,"line_start":337,"line_end":337,"column_start":35,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20014,"byte_end":20015,"line_start":338,"line_end":338,"column_start":40,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20185,"byte_end":20186,"line_start":343,"line_end":343,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20267,"byte_end":20268,"line_start":345,"line_end":345,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20454,"byte_end":20455,"line_start":350,"line_end":350,"column_start":40,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20512,"byte_end":20515,"line_start":352,"line_end":352,"column_start":53,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20580,"byte_end":20583,"line_start":353,"line_end":353,"column_start":55,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20642,"byte_end":20645,"line_start":354,"line_end":354,"column_start":49,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20713,"byte_end":20714,"line_start":355,"line_end":355,"column_start":58,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20860,"byte_end":20863,"line_start":361,"line_end":361,"column_start":40,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20911,"byte_end":20914,"line_start":362,"line_end":362,"column_start":42,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20956,"byte_end":20959,"line_start":363,"line_end":363,"column_start":36,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21006,"byte_end":21007,"line_start":364,"line_end":364,"column_start":41,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21051,"byte_end":21053,"line_start":366,"line_end":366,"column_start":40,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21101,"byte_end":21103,"line_start":367,"line_end":367,"column_start":42,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21145,"byte_end":21147,"line_start":368,"line_end":368,"column_start":36,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21193,"byte_end":21194,"line_start":369,"line_end":369,"column_start":40,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21227,"byte_end":21233,"line_start":371,"line_end":371,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21258,"byte_end":21264,"line_start":372,"line_end":372,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21295,"byte_end":21301,"line_start":373,"line_end":373,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21367,"byte_end":21368,"line_start":377,"line_end":377,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22010,"byte_end":22013,"line_start":405,"line_end":405,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22117,"byte_end":22120,"line_start":409,"line_end":409,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22224,"byte_end":22226,"line_start":413,"line_end":413,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22276,"byte_end":22277,"line_start":417,"line_end":417,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":23871,"byte_end":23877,"line_start":460,"line_end":460,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24284,"byte_end":24290,"line_start":482,"line_end":482,"column_start":63,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24423,"byte_end":24429,"line_start":490,"line_end":490,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24868,"byte_end":24878,"line_start":504,"line_end":504,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24991,"byte_end":25001,"line_start":510,"line_end":510,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25257,"byte_end":25267,"line_start":524,"line_end":524,"column_start":21,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25288,"byte_end":25298,"line_start":526,"line_end":526,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25629,"byte_end":25635,"line_start":537,"line_end":537,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25670,"byte_end":25676,"line_start":539,"line_end":539,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25991,"byte_end":25997,"line_start":558,"line_end":558,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30341,"byte_end":30344,"line_start":712,"line_end":712,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30523,"byte_end":30534,"line_start":720,"line_end":720,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30561,"byte_end":30572,"line_start":722,"line_end":722,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30650,"byte_end":30661,"line_start":726,"line_end":726,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30816,"byte_end":30822,"line_start":733,"line_end":733,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34580,"byte_end":34583,"line_start":857,"line_end":857,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34647,"byte_end":34650,"line_start":858,"line_end":858,"column_start":58,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34712,"byte_end":34715,"line_start":859,"line_end":859,"column_start":56,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34815,"byte_end":34818,"line_start":862,"line_end":862,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37645,"byte_end":37653,"line_start":960,"line_end":960,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37715,"byte_end":37723,"line_start":961,"line_end":961,"column_start":56,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37857,"byte_end":37865,"line_start":963,"line_end":963,"column_start":58,"column_end":66},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37934,"byte_end":37937,"line_start":964,"line_end":964,"column_start":63,"column_end":66},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37972,"byte_end":37980,"line_start":966,"line_end":966,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":38901,"byte_end":38909,"line_start":1004,"line_end":1004,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":43984,"byte_end":43992,"line_start":1225,"line_end":1225,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":44221,"byte_end":44229,"line_start":1237,"line_end":1237,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":44517,"byte_end":44525,"line_start":1248,"line_end":1248,"column_start":21,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":56762,"byte_end":56777,"line_start":25,"line_end":25,"column_start":46,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57237,"byte_end":57248,"line_start":49,"line_end":49,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58107,"byte_end":58114,"line_start":80,"line_end":80,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58201,"byte_end":58208,"line_start":84,"line_end":84,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58612,"byte_end":58619,"line_start":100,"line_end":100,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58688,"byte_end":58695,"line_start":105,"line_end":105,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":59105,"byte_end":59115,"line_start":126,"line_end":126,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":59211,"byte_end":59221,"line_start":132,"line_end":132,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":59694,"byte_end":59701,"line_start":154,"line_end":154,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60325,"byte_end":60335,"line_start":181,"line_end":181,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60422,"byte_end":60429,"line_start":185,"line_end":185,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60608,"byte_end":60615,"line_start":192,"line_end":192,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60849,"byte_end":60856,"line_start":199,"line_end":199,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61218,"byte_end":61219,"line_start":208,"line_end":208,"column_start":29,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61735,"byte_end":61742,"line_start":222,"line_end":222,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61864,"byte_end":61865,"line_start":226,"line_end":226,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62043,"byte_end":62053,"line_start":233,"line_end":233,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62264,"byte_end":62274,"line_start":246,"line_end":246,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62725,"byte_end":62732,"line_start":265,"line_end":265,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62856,"byte_end":62866,"line_start":274,"line_end":274,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":63401,"byte_end":63408,"line_start":294,"line_end":294,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":63569,"byte_end":63579,"line_start":304,"line_end":304,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":64225,"byte_end":64232,"line_start":328,"line_end":328,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":64448,"byte_end":64458,"line_start":339,"line_end":339,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":65456,"byte_end":65463,"line_start":370,"line_end":370,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":65731,"byte_end":65741,"line_start":383,"line_end":383,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":66743,"byte_end":66750,"line_start":414,"line_end":414,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":67017,"byte_end":67024,"line_start":427,"line_end":427,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":67479,"byte_end":67486,"line_start":439,"line_end":439,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":67943,"byte_end":67950,"line_start":457,"line_end":457,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":68650,"byte_end":68657,"line_start":483,"line_end":483,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":69645,"byte_end":69652,"line_start":522,"line_end":522,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":71051,"byte_end":71058,"line_start":577,"line_end":577,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82525,"byte_end":82526,"line_start":28,"line_end":28,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/keyedvec.rs","byte_start":83630,"byte_end":83631,"line_start":28,"line_end":28,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84933,"byte_end":84934,"line_start":28,"line_end":28,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":88107,"byte_end":88125,"line_start":38,"line_end":38,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":88706,"byte_end":88707,"line_start":67,"line_end":67,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91897,"byte_end":91900,"line_start":63,"line_end":63,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":92506,"byte_end":92514,"line_start":86,"line_end":86,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101078,"byte_end":101081,"line_start":90,"line_end":90,"column_start":60,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101221,"byte_end":101224,"line_start":95,"line_end":95,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101367,"byte_end":101370,"line_start":100,"line_end":100,"column_start":68,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101440,"byte_end":101443,"line_start":101,"line_end":101,"column_start":57,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":11823,"byte_end":11828,"line_start":66,"line_end":66,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12311,"byte_end":12316,"line_start":87,"line_end":87,"column_start":28,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":760},"to":{"krate":2,"index":6568}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12458,"byte_end":12463,"line_start":94,"line_end":94,"column_start":28,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":12542,"byte_end":12547,"line_start":100,"line_end":100,"column_start":29,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":760},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":14493,"byte_end":14498,"line_start":165,"line_end":165,"column_start":31,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":760},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":15888,"byte_end":15896,"line_start":199,"line_end":199,"column_start":50,"column_end":58},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":79},"to":{"krate":0,"index":66}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16149,"byte_end":16154,"line_start":210,"line_end":210,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":16647,"byte_end":16648,"line_start":233,"line_end":233,"column_start":36,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":93},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":18639,"byte_end":18644,"line_start":304,"line_end":304,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19049,"byte_end":19055,"line_start":315,"line_end":315,"column_start":18,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19058,"byte_end":19064,"line_start":315,"line_end":315,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":118},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19103,"byte_end":19104,"line_start":316,"line_end":316,"column_start":36,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":136},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19263,"byte_end":19269,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":118},"to":{"krate":0,"index":137}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19272,"byte_end":19282,"line_start":320,"line_end":320,"column_start":32,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":701},"to":{"krate":0,"index":137}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19330,"byte_end":19331,"line_start":321,"line_end":321,"column_start":45,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":139},"to":{"krate":0,"index":137}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19488,"byte_end":19494,"line_start":325,"line_end":325,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19497,"byte_end":19507,"line_start":325,"line_end":325,"column_start":31,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":137},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19554,"byte_end":19555,"line_start":326,"line_end":326,"column_start":44,"column_end":45},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":142},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19823,"byte_end":19828,"line_start":333,"line_end":333,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2233},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19871,"byte_end":19874,"line_start":335,"line_end":335,"column_start":39,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19921,"byte_end":19924,"line_start":336,"line_end":336,"column_start":41,"column_end":44},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":19965,"byte_end":19968,"line_start":337,"line_end":337,"column_start":35,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20014,"byte_end":20015,"line_start":338,"line_end":338,"column_start":40,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":151},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20185,"byte_end":20186,"line_start":343,"line_end":343,"column_start":36,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":159},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20267,"byte_end":20268,"line_start":345,"line_end":345,"column_start":37,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":163},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20454,"byte_end":20455,"line_start":350,"line_end":350,"column_start":40,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":171},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20512,"byte_end":20515,"line_start":352,"line_end":352,"column_start":53,"column_end":56},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":345},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20580,"byte_end":20583,"line_start":353,"line_end":353,"column_start":55,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":5,"index":345},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20642,"byte_end":20645,"line_start":354,"line_end":354,"column_start":49,"column_end":52},"kind":{"Impl":{"id":19}},"from":{"krate":5,"index":345},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20713,"byte_end":20714,"line_start":355,"line_end":355,"column_start":58,"column_end":59},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":183},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20860,"byte_end":20863,"line_start":361,"line_end":361,"column_start":40,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":5,"index":4219},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20911,"byte_end":20914,"line_start":362,"line_end":362,"column_start":42,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":5,"index":4219},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":20956,"byte_end":20959,"line_start":363,"line_end":363,"column_start":36,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":5,"index":4219},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21006,"byte_end":21007,"line_start":364,"line_end":364,"column_start":41,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21051,"byte_end":21053,"line_start":366,"line_end":366,"column_start":40,"column_end":42},"kind":{"Impl":{"id":25}},"from":{"krate":5,"index":3329},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21101,"byte_end":21103,"line_start":367,"line_end":367,"column_start":42,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":5,"index":3329},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21145,"byte_end":21147,"line_start":368,"line_end":368,"column_start":36,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":5,"index":3329},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21193,"byte_end":21194,"line_start":369,"line_end":369,"column_start":40,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":201},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21227,"byte_end":21233,"line_start":371,"line_end":371,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":5,"index":5316},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21258,"byte_end":21264,"line_start":372,"line_end":372,"column_start":22,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":5,"index":5316},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21295,"byte_end":21301,"line_start":373,"line_end":373,"column_start":28,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":5,"index":5316},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21367,"byte_end":21368,"line_start":377,"line_end":377,"column_start":23,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":208},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":21922,"byte_end":21927,"line_start":401,"line_end":401,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22010,"byte_end":22013,"line_start":405,"line_end":405,"column_start":31,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22117,"byte_end":22120,"line_start":409,"line_end":409,"column_start":31,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":5,"index":4219},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22224,"byte_end":22226,"line_start":413,"line_end":413,"column_start":31,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":5,"index":3329},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":22276,"byte_end":22277,"line_start":417,"line_end":417,"column_start":23,"column_end":24},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":229},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":23871,"byte_end":23877,"line_start":460,"line_end":460,"column_start":39,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":2,"index":32017},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24284,"byte_end":24290,"line_start":482,"line_end":482,"column_start":63,"column_end":69},"kind":{"Impl":{"id":38}},"from":{"krate":2,"index":32017},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24423,"byte_end":24429,"line_start":490,"line_end":490,"column_start":39,"column_end":45},"kind":{"Impl":{"id":39}},"from":{"krate":2,"index":32017},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24868,"byte_end":24878,"line_start":504,"line_end":504,"column_start":27,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":774},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":24991,"byte_end":25001,"line_start":510,"line_end":510,"column_start":17,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":774},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25257,"byte_end":25267,"line_start":524,"line_end":524,"column_start":21,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":774},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25288,"byte_end":25298,"line_start":526,"line_end":526,"column_start":17,"column_end":27},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":774},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25629,"byte_end":25635,"line_start":537,"line_end":537,"column_start":61,"column_end":67},"kind":{"Impl":{"id":44}},"from":{"krate":2,"index":31858},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25670,"byte_end":25676,"line_start":539,"line_end":539,"column_start":28,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":2,"index":31858},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":25991,"byte_end":25997,"line_start":558,"line_end":558,"column_start":28,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":2,"index":31858},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30341,"byte_end":30344,"line_start":712,"line_end":712,"column_start":42,"column_end":45},"kind":{"Impl":{"id":68}},"from":{"krate":5,"index":345},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30523,"byte_end":30534,"line_start":720,"line_end":720,"column_start":24,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":2,"index":2056},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30561,"byte_end":30572,"line_start":722,"line_end":722,"column_start":20,"column_end":31},"kind":{"Impl":{"id":70}},"from":{"krate":2,"index":2056},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30650,"byte_end":30661,"line_start":726,"line_end":726,"column_start":20,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":2,"index":2056},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":30816,"byte_end":30822,"line_start":733,"line_end":733,"column_start":17,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":5,"index":5316},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34580,"byte_end":34583,"line_start":857,"line_end":857,"column_start":31,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34647,"byte_end":34650,"line_start":858,"line_end":858,"column_start":58,"column_end":61},"kind":{"Impl":{"id":74}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34712,"byte_end":34715,"line_start":859,"line_end":859,"column_start":56,"column_end":59},"kind":{"Impl":{"id":75}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":34815,"byte_end":34818,"line_start":862,"line_end":862,"column_start":28,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37645,"byte_end":37653,"line_start":960,"line_end":960,"column_start":32,"column_end":40},"kind":{"Impl":{"id":77}},"from":{"krate":5,"index":2830},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37715,"byte_end":37723,"line_start":961,"line_end":961,"column_start":56,"column_end":64},"kind":{"Impl":{"id":78}},"from":{"krate":5,"index":2830},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37857,"byte_end":37865,"line_start":963,"line_end":963,"column_start":58,"column_end":66},"kind":{"Impl":{"id":79}},"from":{"krate":5,"index":2830},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37934,"byte_end":37937,"line_start":964,"line_end":964,"column_start":63,"column_end":66},"kind":{"Impl":{"id":80}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":37972,"byte_end":37980,"line_start":966,"line_end":966,"column_start":28,"column_end":36},"kind":{"Impl":{"id":81}},"from":{"krate":5,"index":2830},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":38901,"byte_end":38909,"line_start":1004,"line_end":1004,"column_start":28,"column_end":36},"kind":{"Impl":{"id":82}},"from":{"krate":5,"index":2830},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":43984,"byte_end":43992,"line_start":1225,"line_end":1225,"column_start":17,"column_end":25},"kind":{"Impl":{"id":116}},"from":{"krate":2,"index":34378},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":44221,"byte_end":44229,"line_start":1237,"line_end":1237,"column_start":17,"column_end":25},"kind":{"Impl":{"id":117}},"from":{"krate":2,"index":34378},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/codec.rs","byte_start":44517,"byte_end":44525,"line_start":1248,"line_end":1248,"column_start":21,"column_end":29},"kind":{"Impl":{"id":118}},"from":{"krate":2,"index":34378},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":56762,"byte_end":56777,"line_start":25,"line_end":25,"column_start":46,"column_end":61},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":407},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":57237,"byte_end":57248,"line_start":49,"line_end":49,"column_start":35,"column_end":46},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":415},"to":{"krate":0,"index":66}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58107,"byte_end":58114,"line_start":80,"line_end":80,"column_start":21,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":6682},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58201,"byte_end":58208,"line_start":84,"line_end":84,"column_start":35,"column_end":42},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":6682},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58335,"byte_end":58339,"line_start":89,"line_end":89,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":435}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58612,"byte_end":58619,"line_start":100,"line_end":100,"column_start":24,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":58688,"byte_end":58695,"line_start":105,"line_end":105,"column_start":20,"column_end":27},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":59105,"byte_end":59115,"line_start":126,"line_end":126,"column_start":28,"column_end":38},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":59211,"byte_end":59221,"line_start":132,"line_end":132,"column_start":24,"column_end":34},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":59694,"byte_end":59701,"line_start":154,"line_end":154,"column_start":20,"column_end":27},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60325,"byte_end":60335,"line_start":181,"line_end":181,"column_start":29,"column_end":39},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6724},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60422,"byte_end":60429,"line_start":185,"line_end":185,"column_start":30,"column_end":37},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":6682},"to":{"krate":2,"index":6563}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60608,"byte_end":60615,"line_start":192,"line_end":192,"column_start":30,"column_end":37},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":6682},"to":{"krate":21,"index":1680}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":60849,"byte_end":60856,"line_start":199,"line_end":199,"column_start":42,"column_end":49},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":6682},"to":{"krate":21,"index":1192}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61105,"byte_end":61110,"line_start":206,"line_end":206,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":489}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61120,"byte_end":61129,"line_start":206,"line_end":206,"column_start":54,"column_end":63},"kind":"SuperTrait","from":{"krate":21,"index":1680},"to":{"krate":0,"index":489}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61147,"byte_end":61158,"line_start":206,"line_end":206,"column_start":81,"column_end":92},"kind":"SuperTrait","from":{"krate":21,"index":1192},"to":{"krate":0,"index":489}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61218,"byte_end":61219,"line_start":208,"line_end":208,"column_start":29,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":489}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61527,"byte_end":61532,"line_start":216,"line_end":216,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":494}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61735,"byte_end":61742,"line_start":222,"line_end":222,"column_start":40,"column_end":47},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":233}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":61864,"byte_end":61865,"line_start":226,"line_end":226,"column_start":33,"column_end":34},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":502},"to":{"krate":0,"index":494}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62043,"byte_end":62053,"line_start":233,"line_end":233,"column_start":21,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62264,"byte_end":62274,"line_start":246,"line_end":246,"column_start":21,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62725,"byte_end":62732,"line_start":265,"line_end":265,"column_start":25,"column_end":32},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":62856,"byte_end":62866,"line_start":274,"line_end":274,"column_start":21,"column_end":31},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":63401,"byte_end":63408,"line_start":294,"line_end":294,"column_start":26,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":63569,"byte_end":63579,"line_start":304,"line_end":304,"column_start":21,"column_end":31},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":64225,"byte_end":64232,"line_start":328,"line_end":328,"column_start":26,"column_end":33},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":64448,"byte_end":64458,"line_start":339,"line_end":339,"column_start":21,"column_end":31},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":65456,"byte_end":65463,"line_start":370,"line_end":370,"column_start":26,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":65731,"byte_end":65741,"line_start":383,"line_end":383,"column_start":21,"column_end":31},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":6724},"to":{"krate":0,"index":118}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":66743,"byte_end":66750,"line_start":414,"line_end":414,"column_start":27,"column_end":34},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":67017,"byte_end":67024,"line_start":427,"line_end":427,"column_start":17,"column_end":24},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":67479,"byte_end":67486,"line_start":439,"line_end":439,"column_start":17,"column_end":24},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":67943,"byte_end":67950,"line_start":457,"line_end":457,"column_start":17,"column_end":24},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":68650,"byte_end":68657,"line_start":483,"line_end":483,"column_start":17,"column_end":24},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":69645,"byte_end":69652,"line_start":522,"line_end":522,"column_start":17,"column_end":24},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/compact.rs","byte_start":71051,"byte_end":71058,"line_start":577,"line_end":577,"column_start":17,"column_end":24},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6682},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/joiner.rs","byte_start":82525,"byte_end":82526,"line_start":28,"line_end":28,"column_start":20,"column_end":21},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":598},"to":{"krate":0,"index":594}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/keyedvec.rs","byte_start":83630,"byte_end":83631,"line_start":28,"line_end":28,"column_start":29,"column_end":30},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":610},"to":{"krate":0,"index":607}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84723,"byte_end":84728,"line_start":22,"line_end":22,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":618}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/decode_all.rs","byte_start":84933,"byte_end":84934,"line_start":28,"line_end":28,"column_start":31,"column_end":32},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":621},"to":{"krate":0,"index":618}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":87631,"byte_end":87636,"line_start":22,"line_end":22,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":629}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":88107,"byte_end":88125,"line_start":38,"line_end":38,"column_start":29,"column_end":47},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":632},"to":{"krate":0,"index":66}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/depth_limit.rs","byte_start":88706,"byte_end":88707,"line_start":67,"line_end":67,"column_start":33,"column_end":34},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":647},"to":{"krate":0,"index":629}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":91897,"byte_end":91900,"line_start":63,"line_end":63,"column_start":34,"column_end":37},"kind":{"Impl":{"id":162}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":663}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_append.rs","byte_start":92506,"byte_end":92514,"line_start":86,"line_end":86,"column_start":61,"column_end":69},"kind":{"Impl":{"id":163}},"from":{"krate":5,"index":2830},"to":{"krate":0,"index":663}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100527,"byte_end":100532,"line_start":73,"line_end":73,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":100535,"byte_end":100541,"line_start":73,"line_end":73,"column_start":49,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":118},"to":{"krate":0,"index":701}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101078,"byte_end":101081,"line_start":90,"line_end":90,"column_start":60,"column_end":63},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":703},"to":{"krate":2,"index":2233}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101221,"byte_end":101224,"line_start":95,"line_end":95,"column_start":55,"column_end":58},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":703},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101367,"byte_end":101370,"line_start":100,"line_end":100,"column_start":68,"column_end":71},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":703},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-1.3.6/src/encode_like.rs","byte_start":101440,"byte_end":101443,"line_start":101,"line_end":101,"column_start":57,"column_end":60},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":703},"to":{"krate":0,"index":701}}]}