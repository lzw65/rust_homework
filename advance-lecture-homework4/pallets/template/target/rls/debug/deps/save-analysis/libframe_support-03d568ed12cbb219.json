{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1","program":"/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","frame_support","--edition=2018","/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"once_cell\"","--cfg","feature=\"serde\"","--cfg","feature=\"sp-state-machine\"","--cfg","feature=\"std\"","-C","metadata=03d568ed12cbb219","-C","extra-filename=-03d568ed12cbb219","--out-dir","/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps","-L","dependency=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps","--extern","bitmask=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libbitmask-895aedf2f72978ac.rmeta","--extern","frame_metadata=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libframe_metadata-91ffc4ccbe9830b6.rmeta","--extern","frame_support_procedural=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libframe_support_procedural-1ed7c5083da88dda.so","--extern","impl_trait_for_tuples=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libimpl_trait_for_tuples-bcee771c5d5cb357.so","--extern","log=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/liblog-e2edfe49f297c73c.rmeta","--extern","once_cell=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libonce_cell-cbbd00cf36730bcf.rmeta","--extern","codec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libparity_scale_codec-c2a3c300da64cba4.rmeta","--extern","paste=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libpaste-3ccd0f35efce1279.rmeta","--extern","serde=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libserde-80263e68ba500d78.rmeta","--extern","smallvec=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsmallvec-ec7d1f646ba11906.rmeta","--extern","sp_arithmetic=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_arithmetic-48f462f38cdb6ff2.rmeta","--extern","sp_core=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_core-717447d3c8b452e7.rmeta","--extern","sp_inherents=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_inherents-f7701fab689c3bfe.rmeta","--extern","sp_io=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_io-6d638056bcc5e815.rmeta","--extern","sp_runtime=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_runtime-da66cb9221848145.rmeta","--extern","sp_state_machine=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_state_machine-99feee1d186e64d2.rmeta","--extern","sp_std=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_std-e8e779e008c5c2c6.rmeta","--extern","sp_tracing=/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libsp_tracing-55ed7047ad0ffe47.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lzw/.rustup/toolchains/nightly-2020-10-06-x86_64-unknown-linux-gnu"],"output":"/home/lzw/code/rust/advance-lecture-04-ocw/assignment/lecture-demo/pallets/template/target/rls/debug/deps/libframe_support-03d568ed12cbb219.rmeta"},"prelude":{"crate_id":{"name":"frame_support","disambiguator":[12340206065294375437,12517115610589478589]},"crate_root":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src","external_crates":[{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12552152252844610669,861143519395295934]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","num":2,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6114913909297575976,2747657943747640239]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17650494196611787224,16696351671010573705]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9336778117618987315,17870517156373193216]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17103378408486634939,751433449546080727]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10975069866030769009,5505173346458313804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6334346674486718091,8161957233453149106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[9975713641904480798,7580100659723909163]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13017381940559774955,1473560800469322545]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[18046481696643307721,13304330266021309686]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[16808540700296544273,10362068119654760402]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[10687136976133547149,15343372157523177244]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[11646022853023642053,10781225934013639530]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":18,"id":{"name":"bitmask","disambiguator":[5782473917540145618,17697772774806715406]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":19,"id":{"name":"sp_tracing","disambiguator":[126940985002760439,9833769351350342315]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","num":20,"id":{"name":"sp_std","disambiguator":[7356154292131214206,15539128417196248828]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","num":21,"id":{"name":"parity_scale_codec","disambiguator":[16439007312830197035,13769093477079864056]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","num":22,"id":{"name":"parity_scale_codec_derive","disambiguator":[15916895702609288415,13390909414312069258]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","num":23,"id":{"name":"arrayvec","disambiguator":[9711399210076819589,6533224003713073282]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","num":24,"id":{"name":"byte_slice_cast","disambiguator":[7351640255773626293,2315590138104183949]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","num":25,"id":{"name":"serde","disambiguator":[18094986483354249175,15403000118412511765]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","num":26,"id":{"name":"serde_derive","disambiguator":[2422799003874411447,4301428410593763920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":27,"id":{"name":"tracing_core","disambiguator":[11099356479621910520,18239274797054692367]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":28,"id":{"name":"lazy_static","disambiguator":[16863586403248268720,14388819080293591203]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":29,"id":{"name":"tracing","disambiguator":[3149344748273194146,14186679869154291241]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":30,"id":{"name":"cfg_if","disambiguator":[7841183052640537120,5700978676433312502]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":31,"id":{"name":"tracing_attributes","disambiguator":[7168521433842290992,2127477278266717051]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":32,"id":{"name":"pin_project_lite","disambiguator":[11050117765846224188,12097442257352640106]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":33,"id":{"name":"tracing_subscriber","disambiguator":[9358978854053975941,10302906392016292032]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":34,"id":{"name":"regex","disambiguator":[14166398965641423822,8934033390557199130]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":35,"id":{"name":"aho_corasick","disambiguator":[15910827016742496248,14514165624868714725]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":36,"id":{"name":"memchr","disambiguator":[8299827481518300842,8423653226847344489]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":37,"id":{"name":"regex_syntax","disambiguator":[10387838999179421385,14884883596696298333]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":38,"id":{"name":"thread_local","disambiguator":[972737615355812521,3494330021733074280]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":39,"id":{"name":"matchers","disambiguator":[16148120748263327968,10793795200785214139]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":40,"id":{"name":"regex_automata","disambiguator":[6713063222348330078,15962450321991702012]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":41,"id":{"name":"byteorder","disambiguator":[14496735423178217807,13585885797689701047]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":42,"id":{"name":"ansi_term","disambiguator":[18134670208497847193,6469936381989789516]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":43,"id":{"name":"tracing_log","disambiguator":[12555983769818244310,6947546561298633655]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","num":44,"id":{"name":"log","disambiguator":[7636163145545913312,4986669806278621293]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":45,"id":{"name":"cfg_if","disambiguator":[502369263979125416,6128217184247387066]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":46,"id":{"name":"serde_json","disambiguator":[13564730519325168607,8931654559015479844]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":47,"id":{"name":"itoa","disambiguator":[708245801620839046,10644891861074126777]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":48,"id":{"name":"ryu","disambiguator":[2595139073293063990,3633285781182786758]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":49,"id":{"name":"tracing_serde","disambiguator":[11704797471514300989,6477851010748340264]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":50,"id":{"name":"sharded_slab","disambiguator":[1434945501934548753,1609764728048645911]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","num":51,"id":{"name":"smallvec","disambiguator":[2602844660267825758,15179553114549196714]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":52,"id":{"name":"chrono","disambiguator":[1398100316059925436,10467824243359959529]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":53,"id":{"name":"time","disambiguator":[8823501580382950712,2504982711049837973]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":54,"id":{"name":"libc","disambiguator":[6571333170903906260,2103687221578517612]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":55,"id":{"name":"num_integer","disambiguator":[7545622164281545846,2648898713402766561]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":56,"id":{"name":"num_traits","disambiguator":[215404550585587115,5285806180049352428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":57,"id":{"name":"sp_core","disambiguator":[11528989304794749901,4991667551486174003]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":58,"id":{"name":"sp_runtime_interface","disambiguator":[12255499159526350672,1465949469223168246]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":59,"id":{"name":"sp_wasm_interface","disambiguator":[1572342640069422977,5885890102663370953]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","num":60,"id":{"name":"impl_trait_for_tuples","disambiguator":[13508714756144950212,10399417239549626737]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":61,"id":{"name":"wasmi","disambiguator":[14702682962039512728,8205603541115655459]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":62,"id":{"name":"memory_units","disambiguator":[2681920765984350785,12479645465886095865]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":63,"id":{"name":"parity_wasm","disambiguator":[3627318675752641491,16087573038623804516]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":64,"id":{"name":"wasmi_validation","disambiguator":[10122444132145811748,13686239439309676495]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":65,"id":{"name":"num_rational","disambiguator":[14874358685442605711,14454857550384661125]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":66,"id":{"name":"num_bigint","disambiguator":[10424519725353920175,15970225686228915190]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":67,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[13822519134176450310,2862860596345121761]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":68,"id":{"name":"sp_externalities","disambiguator":[18150108195161110747,13250564693672382873]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":69,"id":{"name":"sp_storage","disambiguator":[12878955236357233593,16822974782930621063]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":70,"id":{"name":"sp_debug_derive","disambiguator":[11752057424767612336,6988741196861483299]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":71,"id":{"name":"ref_cast","disambiguator":[17238424032127906489,14681179534522775997]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":72,"id":{"name":"ref_cast_impl","disambiguator":[4857299677253861727,8902270623010207562]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":73,"id":{"name":"impl_serde","disambiguator":[6223019066819668752,3300984703168818873]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":74,"id":{"name":"environmental","disambiguator":[17937490940284361027,13093274495722560157]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":75,"id":{"name":"primitive_types","disambiguator":[6962691650698255454,13234617421742094078]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":76,"id":{"name":"fixed_hash","disambiguator":[10245915055372472413,1069574987168551768]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":77,"id":{"name":"static_assertions","disambiguator":[3780011359165158122,3262507017755003872]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":78,"id":{"name":"rustc_hex","disambiguator":[10677294477045725496,7865879812543119472]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":79,"id":{"name":"rand","disambiguator":[7383846236653092870,5177629652404358757]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":80,"id":{"name":"rand_core","disambiguator":[7787386706198440185,12678578198977233203]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":81,"id":{"name":"getrandom","disambiguator":[12258613803940040387,911838537080231532]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":82,"id":{"name":"rand_chacha","disambiguator":[4434170198255513034,5056478396886919284]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":83,"id":{"name":"ppv_lite86","disambiguator":[4955318928114684575,7768061473571892432]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":84,"id":{"name":"rand_pcg","disambiguator":[16660534335728405525,7074470424998610614]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":85,"id":{"name":"uint","disambiguator":[16896315795860882296,16425098083545408739]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":86,"id":{"name":"crunchy","disambiguator":[8074030940710953961,6579732958665489341]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":87,"id":{"name":"impl_codec","disambiguator":[11443448416482552248,8414137674207687421]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":88,"id":{"name":"blake2_rfc","disambiguator":[16318291045264156809,15238637185383600405]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":89,"id":{"name":"arrayvec","disambiguator":[13122490319398419543,2245831403817998155]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":90,"id":{"name":"nodrop","disambiguator":[15847319047609925228,7892947817709334700]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":91,"id":{"name":"constant_time_eq","disambiguator":[4123012020743147552,17233470839404695501]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":92,"id":{"name":"sha2","disambiguator":[2453755181374717418,14347587692546718153]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":93,"id":{"name":"block_buffer","disambiguator":[16942864271414254883,5806726910624965455]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":94,"id":{"name":"block_padding","disambiguator":[6536457226507187524,13096456614147870598]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":95,"id":{"name":"byte_tools","disambiguator":[4563776192090798664,13975107662144777646]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":96,"id":{"name":"generic_array","disambiguator":[10217328049382864786,4581712530308178966]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":97,"id":{"name":"typenum","disambiguator":[2877625186163250866,4188862493781366168]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":98,"id":{"name":"fake_simd","disambiguator":[8529024942259881634,1036883736573479363]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":99,"id":{"name":"opaque_debug","disambiguator":[14296233586290889095,7185983566499738172]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":100,"id":{"name":"digest","disambiguator":[10339741361097660047,3253664700456863542]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":101,"id":{"name":"tiny_keccak","disambiguator":[8951611112105442366,1965224039660394079]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":102,"id":{"name":"twox_hash","disambiguator":[7304964477320420634,14353450951517215289]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":103,"id":{"name":"parking_lot","disambiguator":[4673953683555930918,2566291569203134280]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":104,"id":{"name":"lock_api","disambiguator":[12216129644845520116,17168985521050561292]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":105,"id":{"name":"scopeguard","disambiguator":[10393400622481042710,15774391541485536781]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":106,"id":{"name":"parking_lot_core","disambiguator":[9723357634030298779,6709165033563235635]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":107,"id":{"name":"base58","disambiguator":[1021050924381740148,14694021983045483675]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":108,"id":{"name":"zeroize","disambiguator":[12293724131559688162,14607591128595310952]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":109,"id":{"name":"zeroize_derive","disambiguator":[2502408763374724958,13277304647653553031]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":110,"id":{"name":"secrecy","disambiguator":[17095926779506074658,7537668124013333220]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":111,"id":{"name":"ed25519_dalek","disambiguator":[15558391115965967113,3378155016804440964]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":112,"id":{"name":"ed25519","disambiguator":[17902604484033039668,17597880322881036383]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":113,"id":{"name":"signature","disambiguator":[11156352833949250189,12745597200273491384]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":114,"id":{"name":"curve25519_dalek","disambiguator":[2809248406966777197,8813816561018099626]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":115,"id":{"name":"digest","disambiguator":[7153347457544459114,4850652739674458903]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":116,"id":{"name":"generic_array","disambiguator":[785913366860281496,3566111910551851268]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":117,"id":{"name":"subtle","disambiguator":[17342818449220861691,9110388592586064331]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":118,"id":{"name":"sha2","disambiguator":[1377922229528131517,491842461206503580]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":119,"id":{"name":"block_buffer","disambiguator":[5863490318768043264,9384554601350983024]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":120,"id":{"name":"opaque_debug","disambiguator":[5955724391880543345,12225655711726523850]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":121,"id":{"name":"cpuid_bool","disambiguator":[3944863459372053080,10012978824416111698]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":122,"id":{"name":"substrate_bip39","disambiguator":[17869869569785452858,17634889153902495303]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":123,"id":{"name":"hmac","disambiguator":[13299399138808770209,8486335613303949460]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":124,"id":{"name":"crypto_mac","disambiguator":[5021103083656845048,9272942338553678022]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":125,"id":{"name":"subtle","disambiguator":[2461963045928777698,9783036260425898804]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":126,"id":{"name":"pbkdf2","disambiguator":[1585251910033992458,4658055053388768448]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":127,"id":{"name":"schnorrkel","disambiguator":[16756806575561678970,14458639493351552668]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":128,"id":{"name":"arrayref","disambiguator":[12864533597306545026,8294063698849415262]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":129,"id":{"name":"curve25519_dalek","disambiguator":[6977723647751213875,9340163827551043317]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":130,"id":{"name":"merlin","disambiguator":[9377376087280658574,8799116673561925753]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":131,"id":{"name":"keccak","disambiguator":[7922441978553466502,10628234470639316489]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":132,"id":{"name":"bip39","disambiguator":[1314823592052820078,5424826910968609762]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":133,"id":{"name":"failure","disambiguator":[14582756781862167549,11010751447158768529]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":134,"id":{"name":"failure_derive","disambiguator":[16915148327015633678,6325708317200431250]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":135,"id":{"name":"backtrace","disambiguator":[9482193228311631792,18299589283485015896]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":136,"id":{"name":"rustc_demangle","disambiguator":[4050923033623787977,6585868120045361612]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":137,"id":{"name":"addr2line","disambiguator":[3660529096934478798,18165035533582110625]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":138,"id":{"name":"gimli","disambiguator":[467126543121056434,10447895090847301584]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":139,"id":{"name":"object","disambiguator":[12217760478832808573,5860930654909093820]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":140,"id":{"name":"miniz_oxide","disambiguator":[17514238117289429065,16538556448136967903]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":141,"id":{"name":"adler","disambiguator":[10300648466069169448,3652155315817441043]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":142,"id":{"name":"rustc_hash","disambiguator":[2899680881299965521,3351650253772854689]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":143,"id":{"name":"once_cell","disambiguator":[14043164444755290385,2267165041750352920]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":144,"id":{"name":"parking_lot","disambiguator":[13413556939081280175,6595608378640516759]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":145,"id":{"name":"instant","disambiguator":[16657590810520803667,6600116491891240348]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":146,"id":{"name":"lock_api","disambiguator":[1370039747192521928,13370481355962836312]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":147,"id":{"name":"parking_lot_core","disambiguator":[6910326554005380636,13334944336695677100]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":148,"id":{"name":"unicode_normalization","disambiguator":[5195362221549747439,14521615614827495836]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":149,"id":{"name":"tinyvec","disambiguator":[14392653114268736918,7149426386502746538]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":150,"id":{"name":"tinyvec_macros","disambiguator":[12069190721701906036,1989476166457901195]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":151,"id":{"name":"secp256k1","disambiguator":[7408403086072926232,10619138547561338344]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":152,"id":{"name":"hmac_drbg","disambiguator":[2354928866440715200,11965278983472350123]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":153,"id":{"name":"hash_db","disambiguator":[1694494872242499477,7973777796579231756]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":154,"id":{"name":"hash256_std_hasher","disambiguator":[6334138255241792746,1846295599312392070]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":155,"id":{"name":"parity_util_mem","disambiguator":[3040824742387538142,13160465756699134223]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":156,"id":{"name":"parity_util_mem_derive","disambiguator":[18323117741153977268,3575845138050348775]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":157,"id":{"name":"hashbrown","disambiguator":[8514644902414888020,14821523315265927041]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":158,"id":{"name":"ahash","disambiguator":[11645240038511292298,1901198331339866248]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":159,"id":{"name":"derive_more","disambiguator":[2698756104843969994,14444477136067550206]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":160,"id":{"name":"dyn_clonable","disambiguator":[8242438631393957323,14003146638030063325]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":161,"id":{"name":"dyn_clone","disambiguator":[4691791614177411806,10864154608713969261]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":162,"id":{"name":"dyn_clonable_impl","disambiguator":[4615130658418671392,6958782800412037695]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":163,"id":{"name":"hex","disambiguator":[1554532179233287652,7706981720287221831]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":164,"id":{"name":"futures","disambiguator":[7191882713553373375,5784363091584244339]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":165,"id":{"name":"futures_core","disambiguator":[18128997065636809979,13049398925650811592]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":166,"id":{"name":"futures_util","disambiguator":[6826120639398116430,15849646236374289672]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":167,"id":{"name":"pin_utils","disambiguator":[14006933666536538846,10325894616585527374]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":168,"id":{"name":"proc_macro_hack","disambiguator":[16105205298844134494,461428951662562663]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":169,"id":{"name":"futures_task","disambiguator":[17591182617236407828,908714568475142235]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":170,"id":{"name":"futures_sink","disambiguator":[18304585830995575034,16327236895633893015]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":171,"id":{"name":"futures_channel","disambiguator":[6517228745129513001,1111405895964483599]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":172,"id":{"name":"slab","disambiguator":[7754159738850082191,972067075306833933]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":173,"id":{"name":"futures_io","disambiguator":[8909187937396878977,2922841661346725167]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":174,"id":{"name":"futures_macro","disambiguator":[7362818316734880593,477739355724548135]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":175,"id":{"name":"futures_executor","disambiguator":[2718974542857099553,14805374385779778428]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":176,"id":{"name":"num_cpus","disambiguator":[17237370829952825392,8933627738761765040]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":177,"id":{"name":"paste","disambiguator":[15401685209398254990,873450930854060675]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","num":178,"id":{"name":"paste_impl","disambiguator":[11772883914023517439,10129306859390362089]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":179,"id":{"name":"sp_state_machine","disambiguator":[16871039762670672788,2893481927570229250]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":180,"id":{"name":"sp_trie","disambiguator":[11252105861350862833,1708726736418102481]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":181,"id":{"name":"trie_db","disambiguator":[18271978803945158697,17262652499401197515]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":182,"id":{"name":"hashbrown","disambiguator":[5245551859052833817,6349580907210778731]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":183,"id":{"name":"ahash","disambiguator":[2391589251574575903,4260304121454177733]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":184,"id":{"name":"trie_root","disambiguator":[1580444581320396263,11318692011956243941]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":185,"id":{"name":"memory_db","disambiguator":[1774147319952519439,6218163937387775773]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":186,"id":{"name":"sp_panic_handler","disambiguator":[1493573841702380073,2894375925513246248]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":187,"id":{"name":"sp_io","disambiguator":[8095273759518359470,284860053986169440]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","num":188,"id":{"name":"frame_metadata","disambiguator":[14080957284037454698,12568029235722453335]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","num":189,"id":{"name":"sp_runtime","disambiguator":[16022351216222556352,16416952812497401383]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","num":190,"id":{"name":"sp_application_crypto","disambiguator":[12835149352766628184,13192684411583912951]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","num":191,"id":{"name":"sp_arithmetic","disambiguator":[11188263385090241613,11050410231310448845]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","num":192,"id":{"name":"integer_sqrt","disambiguator":[6159326418223766355,11569997483938519441]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","num":193,"id":{"name":"either","disambiguator":[11907231751799516344,6556694577995769697]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","num":194,"id":{"name":"sp_inherents","disambiguator":[10785847656675007332,11321297868410126711]}},{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","num":195,"id":{"name":"frame_support_procedural","disambiguator":[9484197330836620554,1743859436921206163]}}],"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":686,"byte_end":23485,"line_start":18,"line_end":824,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":19,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":920,"byte_end":930,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_tracing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":965,"byte_end":970,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"alias_span":null,"name":"serde","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":57,"index":3878},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":989,"byte_end":993,"line_start":33,"line_end":33,"column_start":18,"column_end":22},"alias_span":null,"name":"Void","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1018,"byte_end":1024,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"alias_span":null,"name":"sp_std","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1049,"byte_end":1054,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"alias_span":null,"name":"codec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":143,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1103,"byte_end":1112,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"alias_span":null,"name":"once_cell","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":177,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1137,"byte_end":1142,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"alias_span":null,"name":"paste","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":179,"index":2249},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1209,"byte_end":1227,"line_start":45,"line_end":45,"column_start":27,"column_end":45},"alias_span":null,"name":"BasicExternalities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":187,"index":136},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1269,"byte_end":1273,"line_start":47,"line_end":47,"column_start":26,"column_end":30},"alias_span":null,"name":"storage_root","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":187,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1252,"byte_end":1257,"line_start":47,"line_end":47,"column_start":9,"column_end":14},"alias_span":null,"name":"sp_io","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":70,"index":43},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1333,"byte_end":1345,"line_start":49,"line_end":49,"column_start":21,"column_end":33},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":44,"index":16},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26797,"byte_end":26801,"line_start":92,"line_end":92,"column_start":15,"column_end":19},"alias_span":null,"name":"info","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":44,"index":17},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26803,"byte_end":26808,"line_start":92,"line_end":92,"column_start":21,"column_end":26},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":44,"index":14},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26810,"byte_end":26815,"line_start":92,"line_end":92,"column_start":28,"column_end":33},"alias_span":null,"name":"error","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":44,"index":18},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26817,"byte_end":26822,"line_start":92,"line_end":92,"column_start":35,"column_end":40},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":44,"index":15},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26824,"byte_end":26828,"line_start":92,"line_end":92,"column_start":42,"column_end":46},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26846,"byte_end":26859,"line_start":93,"line_end":93,"column_start":16,"column_end":29},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":20,"index":47},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26886,"byte_end":26892,"line_start":94,"line_end":94,"column_start":17,"column_end":23},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":44,"index":16},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27108,"byte_end":27112,"line_start":102,"line_end":102,"column_start":18,"column_end":22},"alias_span":null,"name":"info","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27114,"byte_end":27119,"line_start":102,"line_end":102,"column_start":24,"column_end":29},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":44,"index":17},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27114,"byte_end":27119,"line_start":102,"line_end":102,"column_start":24,"column_end":29},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":44,"index":14},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27121,"byte_end":27126,"line_start":102,"line_end":102,"column_start":31,"column_end":36},"alias_span":null,"name":"error","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":44,"index":18},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27128,"byte_end":27133,"line_start":102,"line_end":102,"column_start":38,"column_end":43},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":44,"index":15},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27135,"byte_end":27139,"line_start":102,"line_end":102,"column_start":45,"column_end":49},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27141,"byte_end":27146,"line_start":102,"line_end":102,"column_start":51,"column_end":56},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":2,"index":5989},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44406,"byte_end":44412,"line_start":21,"line_end":21,"column_start":25,"column_end":31},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":5,"index":3155},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44414,"byte_end":44417,"line_start":21,"line_end":21,"column_start":33,"column_end":36},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":5,"index":4556},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44429,"byte_end":44432,"line_start":21,"line_end":21,"column_start":48,"column_end":51},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":2,"index":1736},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44434,"byte_end":44439,"line_start":21,"line_end":21,"column_start":53,"column_end":58},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":2,"index":1739},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44434,"byte_end":44439,"line_start":21,"line_end":21,"column_start":53,"column_end":58},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":57}},{"kind":"Use","ref_id":{"krate":2,"index":1769},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44441,"byte_end":44443,"line_start":21,"line_end":21,"column_start":60,"column_end":62},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":2,"index":1771},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44441,"byte_end":44443,"line_start":21,"line_end":21,"column_start":60,"column_end":62},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":2,"index":1764},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44445,"byte_end":44454,"line_start":21,"line_end":21,"column_start":64,"column_end":73},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":2,"index":1768},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44445,"byte_end":44454,"line_start":21,"line_end":21,"column_start":64,"column_end":73},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":59}},{"kind":"Use","ref_id":{"krate":2,"index":2032},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44457,"byte_end":44463,"line_start":21,"line_end":21,"column_start":76,"column_end":82},"alias_span":null,"name":"marker","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":21,"index":134},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44489,"byte_end":44494,"line_start":22,"line_end":22,"column_start":24,"column_end":29},"alias_span":null,"name":"Codec","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":21,"index":701},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44496,"byte_end":44506,"line_start":22,"line_end":22,"column_start":31,"column_end":41},"alias_span":null,"name":"EncodeLike","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":21,"index":130},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44508,"byte_end":44514,"line_start":22,"line_end":22,"column_start":43,"column_end":49},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":22,"index":186},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44508,"byte_end":44514,"line_start":22,"line_end":22,"column_start":43,"column_end":49},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":64}},{"kind":"Use","ref_id":{"krate":21,"index":118},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44516,"byte_end":44522,"line_start":22,"line_end":22,"column_start":51,"column_end":57},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":22,"index":185},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44516,"byte_end":44522,"line_start":22,"line_end":22,"column_start":51,"column_end":57},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":65}},{"kind":"Use","ref_id":{"krate":21,"index":66},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44524,"byte_end":44529,"line_start":22,"line_end":22,"column_start":59,"column_end":64},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":21,"index":87},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44531,"byte_end":44537,"line_start":22,"line_end":22,"column_start":66,"column_end":72},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":21,"index":494},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44539,"byte_end":44549,"line_start":22,"line_end":22,"column_start":74,"column_end":84},"alias_span":null,"name":"HasCompact","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":21,"index":233},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44551,"byte_end":44562,"line_start":22,"line_end":22,"column_start":86,"column_end":97},"alias_span":null,"name":"EncodeAsRef","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":113},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44592,"byte_end":44608,"line_start":24,"line_end":24,"column_start":2,"column_end":18},"alias_span":null,"name":"FunctionMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44610,"byte_end":44625,"line_start":24,"line_end":24,"column_start":20,"column_end":35},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":45},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44627,"byte_end":44647,"line_start":24,"line_end":24,"column_start":37,"column_end":57},"alias_span":null,"name":"DecodeDifferentArray","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":145},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44649,"byte_end":44673,"line_start":24,"line_end":24,"column_start":59,"column_end":83},"alias_span":null,"name":"FunctionArgumentMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44676,"byte_end":44698,"line_start":25,"line_end":25,"column_start":2,"column_end":24},"alias_span":null,"name":"ModuleConstantMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":69},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44700,"byte_end":44711,"line_start":25,"line_end":25,"column_start":26,"column_end":37},"alias_span":null,"name":"DefaultByte","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":349},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44713,"byte_end":44730,"line_start":25,"line_end":25,"column_start":39,"column_end":56},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":350},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44713,"byte_end":44730,"line_start":25,"line_end":25,"column_start":39,"column_end":56},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":188,"index":65},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44732,"byte_end":44751,"line_start":25,"line_end":25,"column_start":58,"column_end":77},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":188,"index":318},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44753,"byte_end":44766,"line_start":25,"line_end":25,"column_start":79,"column_end":92},"alias_span":null,"name":"ErrorMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44797,"byte_end":44812,"line_start":28,"line_end":28,"column_start":2,"column_end":17},"alias_span":null,"name":"GetDispatchInfo","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":5920},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44814,"byte_end":44826,"line_start":28,"line_end":28,"column_start":19,"column_end":31},"alias_span":null,"name":"DispatchInfo","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44828,"byte_end":44837,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"alias_span":null,"name":"WeighData","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1469},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44839,"byte_end":44855,"line_start":28,"line_end":28,"column_start":44,"column_end":60},"alias_span":null,"name":"ClassifyDispatch","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":189,"index":1224},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44857,"byte_end":44876,"line_start":28,"line_end":28,"column_start":62,"column_end":81},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1456},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44878,"byte_end":44884,"line_start":28,"line_end":28,"column_start":83,"column_end":89},"alias_span":null,"name":"Weight","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1472},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44887,"byte_end":44894,"line_start":29,"line_end":29,"column_start":2,"column_end":9},"alias_span":null,"name":"PaysFee","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":5949},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44896,"byte_end":44912,"line_start":29,"line_end":29,"column_start":11,"column_end":27},"alias_span":null,"name":"PostDispatchInfo","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1507},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44914,"byte_end":44934,"line_start":29,"line_end":29,"column_start":29,"column_end":49},"alias_span":null,"name":"WithPostDispatchInfo","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":189,"index":1086},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44968,"byte_end":44980,"line_start":31,"line_end":31,"column_start":30,"column_end":42},"alias_span":null,"name":"Dispatchable","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":189,"index":3790},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44982,"byte_end":44995,"line_start":31,"line_end":31,"column_start":44,"column_end":57},"alias_span":null,"name":"DispatchError","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":3525},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45022,"byte_end":45034,"line_start":32,"line_end":32,"column_start":25,"column_end":37},"alias_span":null,"name":"CallMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1364},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45036,"byte_end":45051,"line_start":32,"line_end":32,"column_start":39,"column_end":54},"alias_span":null,"name":"GetCallMetadata","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45053,"byte_end":45064,"line_start":32,"line_end":32,"column_start":56,"column_end":67},"alias_span":null,"name":"GetCallName","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1401},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45066,"byte_end":45088,"line_start":32,"line_end":32,"column_start":69,"column_end":91},"alias_span":null,"name":"UnfilteredDispatchable","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":189,"index":1510},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128416,"byte_end":128434,"line_start":24,"line_end":24,"column_start":21,"column_end":39},"alias_span":null,"name":"TransactionOutcome","value":"","parent":{"krate":0,"index":121}},{"kind":"Use","ref_id":{"krate":69,"index":404},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162013,"byte_end":162022,"line_start":26,"line_end":26,"column_start":28,"column_end":37},"alias_span":null,"name":"ChildInfo","value":"","parent":{"krate":0,"index":226}},{"kind":"Use","ref_id":{"krate":69,"index":430},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162024,"byte_end":162033,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"alias_span":null,"name":"ChildType","value":"","parent":{"krate":0,"index":226}},{"kind":"Use","ref_id":{"krate":0,"index":285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167596,"byte_end":167606,"line_start":31,"line_end":31,"column_start":14,"column_end":24},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":265}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167628,"byte_end":167644,"line_start":32,"line_end":32,"column_start":21,"column_end":37},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":265}},{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167661,"byte_end":167673,"line_start":33,"line_end":33,"column_start":16,"column_end":28},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":265}},{"kind":"Use","ref_id":{"krate":188,"index":219},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":215988,"byte_end":216001,"line_start":20,"line_end":20,"column_start":26,"column_end":39},"alias_span":null,"name":"EventMetadata","value":"","parent":{"krate":0,"index":923}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":216003,"byte_end":216018,"line_start":20,"line_end":20,"column_start":41,"column_end":56},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":923}},{"kind":"Use","ref_id":{"krate":188,"index":188},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":216020,"byte_end":216038,"line_start":20,"line_end":20,"column_start":58,"column_end":76},"alias_span":null,"name":"OuterEventMetadata","value":"","parent":{"krate":0,"index":923}},{"kind":"Use","ref_id":{"krate":188,"index":176},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":216040,"byte_end":216048,"line_start":20,"line_end":20,"column_start":78,"column_end":86},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":923}},{"kind":"Use","ref_id":{"krate":188,"index":177},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":216040,"byte_end":216048,"line_start":20,"line_end":20,"column_start":78,"column_end":86},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":928}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236064,"byte_end":236079,"line_start":19,"line_end":19,"column_start":2,"column_end":17},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":176},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236081,"byte_end":236089,"line_start":19,"line_end":19,"column_start":19,"column_end":27},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":177},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236081,"byte_end":236089,"line_start":19,"line_end":19,"column_start":19,"column_end":27},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":937}},{"kind":"Use","ref_id":{"krate":188,"index":561},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236091,"byte_end":236106,"line_start":19,"line_end":19,"column_start":29,"column_end":44},"alias_span":null,"name":"RuntimeMetadata","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":671},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236108,"byte_end":236122,"line_start":19,"line_end":19,"column_start":46,"column_end":60},"alias_span":null,"name":"ModuleMetadata","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":91},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236124,"byte_end":236150,"line_start":19,"line_end":19,"column_start":62,"column_end":88},"alias_span":null,"name":"RuntimeMetadataLastVersion","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":349},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236153,"byte_end":236170,"line_start":20,"line_end":20,"column_start":2,"column_end":19},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":350},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236153,"byte_end":236170,"line_start":20,"line_end":20,"column_start":2,"column_end":19},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":941}},{"kind":"Use","ref_id":{"krate":188,"index":502},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236172,"byte_end":236195,"line_start":20,"line_end":20,"column_start":21,"column_end":44},"alias_span":null,"name":"RuntimeMetadataPrefixed","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":503},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236172,"byte_end":236195,"line_start":20,"line_end":20,"column_start":21,"column_end":44},"alias_span":null,"name":"RuntimeMetadataPrefixed","value":"","parent":{"krate":0,"index":942}},{"kind":"Use","ref_id":{"krate":188,"index":251},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236197,"byte_end":236217,"line_start":20,"line_end":20,"column_start":46,"column_end":66},"alias_span":null,"name":"StorageEntryMetadata","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":471},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236219,"byte_end":236234,"line_start":20,"line_end":20,"column_start":68,"column_end":83},"alias_span":null,"name":"StorageMetadata","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":396},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236237,"byte_end":236253,"line_start":21,"line_end":21,"column_start":2,"column_end":18},"alias_span":null,"name":"StorageEntryType","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":439},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236255,"byte_end":236275,"line_start":21,"line_end":21,"column_start":20,"column_end":40},"alias_span":null,"name":"StorageEntryModifier","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":69},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236277,"byte_end":236288,"line_start":21,"line_end":21,"column_start":42,"column_end":53},"alias_span":null,"name":"DefaultByte","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":354},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236290,"byte_end":236303,"line_start":21,"line_end":21,"column_start":55,"column_end":68},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":65},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236305,"byte_end":236324,"line_start":21,"line_end":21,"column_start":70,"column_end":89},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":188,"index":532},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":236327,"byte_end":236344,"line_start":22,"line_end":22,"column_start":2,"column_end":19},"alias_span":null,"name":"ExtrinsicMetadata","value":"","parent":{"krate":0,"index":934}},{"kind":"Use","ref_id":{"krate":5,"index":4556},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":252906,"byte_end":252909,"line_start":19,"line_end":19,"column_start":29,"column_end":32},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":189,"index":1048},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":252962,"byte_end":252967,"line_start":21,"line_end":21,"column_start":37,"column_end":42},"alias_span":null,"name":"BlockT","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":189,"index":1058},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":252979,"byte_end":252988,"line_start":21,"line_end":21,"column_start":54,"column_end":63},"alias_span":null,"name":"Extrinsic","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":194,"index":101},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":253029,"byte_end":253041,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"alias_span":null,"name":"InherentData","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":194,"index":72},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":253043,"byte_end":253058,"line_start":23,"line_end":23,"column_start":38,"column_end":53},"alias_span":null,"name":"ProvideInherent","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":194,"index":122},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":253060,"byte_end":253080,"line_start":23,"line_end":23,"column_start":55,"column_end":75},"alias_span":null,"name":"CheckInherentsResult","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":194,"index":64},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":253082,"byte_end":253094,"line_start":23,"line_end":23,"column_start":77,"column_end":89},"alias_span":null,"name":"IsFatalError","value":"","parent":{"krate":0,"index":956}},{"kind":"Use","ref_id":{"krate":189,"index":1134},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","byte_start":259905,"byte_end":259921,"line_start":19,"line_end":19,"column_start":36,"column_end":52},"alias_span":null,"name":"ValidateUnsigned","value":"","parent":{"krate":0,"index":967}},{"kind":"Use","ref_id":{"krate":189,"index":1243},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","byte_start":259990,"byte_end":260009,"line_start":22,"line_end":22,"column_start":2,"column_end":21},"alias_span":null,"name":"TransactionValidity","value":"","parent":{"krate":0,"index":967}},{"kind":"Use","ref_id":{"krate":189,"index":3364},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","byte_start":260011,"byte_end":260029,"line_start":22,"line_end":22,"column_start":23,"column_end":41},"alias_span":null,"name":"UnknownTransaction","value":"","parent":{"krate":0,"index":967}},{"kind":"Use","ref_id":{"krate":189,"index":3401},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","byte_start":260031,"byte_end":260055,"line_start":22,"line_end":22,"column_start":43,"column_end":67},"alias_span":null,"name":"TransactionValidityError","value":"","parent":{"krate":0,"index":967}},{"kind":"Use","ref_id":{"krate":189,"index":3437},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","byte_start":260057,"byte_end":260074,"line_start":22,"line_end":22,"column_start":69,"column_end":86},"alias_span":null,"name":"TransactionSource","value":"","parent":{"krate":0,"index":967}},{"kind":"Use","ref_id":{"krate":189,"index":2772},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":263958,"byte_end":263969,"line_start":21,"line_end":21,"column_start":30,"column_end":41},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":189,"index":2773},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":263958,"byte_end":263969,"line_start":21,"line_end":21,"column_start":30,"column_end":41},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":977}},{"kind":"Use","ref_id":{"krate":189,"index":2757},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":263971,"byte_end":263980,"line_start":21,"line_end":21,"column_start":43,"column_end":52},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":189,"index":2758},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":263971,"byte_end":263980,"line_start":21,"line_end":21,"column_start":43,"column_end":52},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":978}},{"kind":"Use","ref_id":{"krate":188,"index":65},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":264023,"byte_end":264042,"line_start":23,"line_end":23,"column_start":26,"column_end":45},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":188,"index":318},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":264044,"byte_end":264057,"line_start":23,"line_end":23,"column_start":47,"column_end":60},"alias_span":null,"name":"ErrorMetadata","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":264059,"byte_end":264074,"line_start":23,"line_end":23,"column_start":62,"column_end":77},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":2,"index":1313},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270021,"byte_end":270025,"line_start":38,"line_end":38,"column_start":24,"column_end":28},"alias_span":null,"name":"swap","value":"","parent":{"krate":0,"index":984}},{"kind":"Use","ref_id":{"krate":2,"index":1315},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270027,"byte_end":270031,"line_start":38,"line_end":38,"column_start":30,"column_end":34},"alias_span":null,"name":"take","value":"","parent":{"krate":0,"index":984}},{"kind":"Use","ref_id":{"krate":2,"index":2969},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270040,"byte_end":270047,"line_start":38,"line_end":38,"column_start":43,"column_end":50},"alias_span":null,"name":"RefCell","value":"","parent":{"krate":0,"index":984}},{"kind":"Use","ref_id":{"krate":5,"index":4556},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270054,"byte_end":270057,"line_start":38,"line_end":38,"column_start":57,"column_end":60},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":984}},{"kind":"Use","ref_id":{"krate":5,"index":90},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270066,"byte_end":270069,"line_start":38,"line_end":38,"column_start":69,"column_end":72},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":984}},{"kind":"Use","ref_id":{"krate":189,"index":1224},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332718,"byte_end":332737,"line_start":143,"line_end":143,"column_start":43,"column_end":62},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":1428}},{"kind":"Use","ref_id":{"krate":0,"index":916},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1665,"byte_end":1672,"line_start":73,"line_end":73,"column_start":2,"column_end":9},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":917},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1665,"byte_end":1672,"line_start":73,"line_end":73,"column_start":2,"column_end":9},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":1625}},{"kind":"Use","ref_id":{"krate":0,"index":909},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1674,"byte_end":1681,"line_start":73,"line_end":73,"column_start":11,"column_end":18},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":910},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1674,"byte_end":1681,"line_start":73,"line_end":73,"column_start":11,"column_end":18},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":1626}},{"kind":"Use","ref_id":{"krate":0,"index":902},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1683,"byte_end":1693,"line_start":73,"line_end":73,"column_start":20,"column_end":30},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":903},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1683,"byte_end":1693,"line_start":73,"line_end":73,"column_start":20,"column_end":30},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":1627}},{"kind":"Use","ref_id":{"krate":0,"index":895},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1695,"byte_end":1705,"line_start":73,"line_end":73,"column_start":32,"column_end":42},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":896},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1695,"byte_end":1705,"line_start":73,"line_end":73,"column_start":32,"column_end":42},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":1628}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1707,"byte_end":1715,"line_start":73,"line_end":73,"column_start":44,"column_end":52},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":875},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1707,"byte_end":1715,"line_start":73,"line_end":73,"column_start":44,"column_end":52},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":1629}},{"kind":"Use","ref_id":{"krate":0,"index":881},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1717,"byte_end":1729,"line_start":73,"line_end":73,"column_start":54,"column_end":66},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":882},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1717,"byte_end":1729,"line_start":73,"line_end":73,"column_start":54,"column_end":66},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":1630}},{"kind":"Use","ref_id":{"krate":0,"index":888},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1731,"byte_end":1747,"line_start":73,"line_end":73,"column_start":68,"column_end":84},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1731,"byte_end":1747,"line_start":73,"line_end":73,"column_start":68,"column_end":84},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":1631}},{"kind":"Use","ref_id":{"krate":0,"index":844},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1749,"byte_end":1757,"line_start":73,"line_end":73,"column_start":86,"column_end":94},"alias_span":null,"name":"Hashable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":869},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1760,"byte_end":1773,"line_start":74,"line_end":74,"column_start":2,"column_end":15},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":872},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1775,"byte_end":1798,"line_start":74,"line_end":74,"column_start":17,"column_end":40},"alias_span":null,"name":"ReversibleStorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":624},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1828,"byte_end":1840,"line_start":77,"line_end":77,"column_start":2,"column_end":14},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":651},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1842,"byte_end":1852,"line_start":77,"line_end":77,"column_start":16,"column_end":26},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1854,"byte_end":1870,"line_start":77,"line_end":77,"column_start":28,"column_end":44},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":803},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1872,"byte_end":1890,"line_start":77,"line_end":77,"column_start":46,"column_end":64},"alias_span":null,"name":"StoragePrefixedMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":700},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1892,"byte_end":1910,"line_start":77,"line_end":77,"column_start":66,"column_end":84},"alias_span":null,"name":"IterableStorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":709},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1913,"byte_end":1937,"line_start":78,"line_end":78,"column_start":2,"column_end":26},"alias_span":null,"name":"IterableStorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1939,"byte_end":1948,"line_start":78,"line_end":78,"column_start":28,"column_end":37},"alias_span":null,"name":"migration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1977,"byte_end":1986,"line_start":80,"line_end":80,"column_start":26,"column_end":35},"alias_span":null,"name":"Parameter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1988,"byte_end":1996,"line_start":80,"line_end":80,"column_start":37,"column_end":45},"alias_span":null,"name":"Callable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1998,"byte_end":2007,"line_start":80,"line_end":80,"column_start":47,"column_end":56},"alias_span":null,"name":"IsSubType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":2018,"byte_end":2028,"line_start":81,"line_end":81,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":1374},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":2037,"byte_end":2054,"line_start":81,"line_end":81,"column_start":28,"column_end":45},"alias_span":null,"name":"ConsensusEngineId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":1500},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":2056,"byte_end":2061,"line_start":81,"line_end":81,"column_start":47,"column_end":52},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":1192},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":2071,"byte_end":2080,"line_start":81,"line_end":81,"column_start":62,"column_end":71},"alias_span":null,"name":"Printable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":195,"index":425},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":7370,"byte_end":7382,"line_start":270,"line_end":270,"column_start":36,"column_end":48},"alias_span":null,"name":"decl_storage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":195,"index":426},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":7384,"byte_end":7401,"line_start":270,"line_end":270,"column_start":50,"column_end":67},"alias_span":null,"name":"construct_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":195,"index":427},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":7403,"byte_end":7416,"line_start":270,"line_end":270,"column_start":69,"column_end":82},"alias_span":null,"name":"transactional","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":1680},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":9902,"byte_end":9911,"line_start":369,"line_end":369,"column_start":17,"column_end":26},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":26,"index":860},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":9902,"byte_end":9911,"line_start":369,"line_end":369,"column_start":17,"column_end":26},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":1666}},{"kind":"Use","ref_id":{"krate":25,"index":1192},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":9913,"byte_end":9924,"line_start":369,"line_end":369,"column_start":28,"column_end":39},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":26,"index":861},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":9913,"byte_end":9924,"line_start":369,"line_end":369,"column_start":28,"column_end":39},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":1667}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":686,"byte_end":23485,"line_start":18,"line_end":824,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":121},{"krate":0,"index":835},{"krate":0,"index":923},{"krate":0,"index":934},{"krate":0,"index":956},{"krate":0,"index":967},{"krate":0,"index":975},{"krate":0,"index":984},{"krate":0,"index":1428},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":6499},{"krate":0,"index":1626},{"krate":0,"index":6501},{"krate":0,"index":1627},{"krate":0,"index":6503},{"krate":0,"index":1628},{"krate":0,"index":6505},{"krate":0,"index":1629},{"krate":0,"index":6507},{"krate":0,"index":1630},{"krate":0,"index":6509},{"krate":0,"index":1631},{"krate":0,"index":6511},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":6028},{"krate":0,"index":6029},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":6553},{"krate":0,"index":1667},{"krate":0,"index":6555}],"decl_id":null,"docs":" Support code for the runtime.\n","sig":null,"attributes":[{"value":"/ Support code for the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":686,"byte_end":719,"line_start":18,"line_end":18,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":6055},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44}],"decl_id":null,"docs":" Runtime debugging and logging utilities.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1348,"byte_end":1360,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ Runtime debugging and logging utilities.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24173,"byte_end":24217,"line_start":18,"line_end":18,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24218,"byte_end":24221,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This module contains macros and functions that will allow","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24222,"byte_end":24283,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ you to print logs out of the runtime code.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24284,"byte_end":24330,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24331,"byte_end":24334,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ First and foremost be aware that adding regular logging code to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24335,"byte_end":24402,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/ your runtime will have a negative effect on the performance","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24403,"byte_end":24466,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ and size of the blob. Luckily there are some ways to mitigate","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24467,"byte_end":24532,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ this that are described below.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24533,"byte_end":24567,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24568,"byte_end":24571,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ First component to utilize debug-printing and logging is actually","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24572,"byte_end":24641,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ located in `primitives` crate: `sp_core::RuntimeDebug`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24642,"byte_end":24701,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"/ This custom-derive generates `core::fmt::Debug` implementation,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24702,"byte_end":24769,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/ just like regular `derive(Debug)`, however it does not generate","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24770,"byte_end":24837,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ any code when the code is compiled to WASM. This means that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24838,"byte_end":24901,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ you can safely sprinkle `RuntimeDebug` in your runtime codebase,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24902,"byte_end":24970,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ without affecting the size. This also allows you to print/log","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":24971,"byte_end":25036,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/ both when the code is running natively or in WASM, but note","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25037,"byte_end":25100,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/ that WASM debug formatting of structs will be empty.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25101,"byte_end":25157,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25158,"byte_end":25161,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25162,"byte_end":25180,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/\tuse frame_support::debug;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25181,"byte_end":25210,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25211,"byte_end":25214,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ #[derive(sp_core::RuntimeDebug)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25215,"byte_end":25251,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"/\tstruct MyStruct {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25252,"byte_end":25273,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/   a: u64,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25274,"byte_end":25287,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/\t}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25288,"byte_end":25293,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25294,"byte_end":25297,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // First initialize the logger.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25298,"byte_end":25333,"line_start":46,"line_end":46,"column_start":1,"column_end":36}},{"value":"/ //","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25334,"byte_end":25340,"line_start":47,"line_end":47,"column_start":1,"column_end":7}},{"value":"/ // This is only required when you want the logs to be printed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25341,"byte_end":25406,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ // also during non-native run.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25407,"byte_end":25441,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"/ // Note that enabling the logger has performance impact on","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25442,"byte_end":25504,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ // WASM runtime execution and should be used sparingly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25505,"byte_end":25564,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/\tdebug::RuntimeLogger::init();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25565,"byte_end":25598,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25599,"byte_end":25602,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ let x = MyStruct { a: 5 };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25603,"byte_end":25633,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/\t// will log an info line `\"My struct: MyStruct{a:5}\"` when running","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25634,"byte_end":25704,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/\t// natively, but will only print `\"My struct: \"` when running WASM.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25705,"byte_end":25776,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/\tdebug::info!(\"My struct: {:?}\", x);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25777,"byte_end":25816,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25817,"byte_end":25820,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/\t// same output here, although this will print to stdout","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25821,"byte_end":25880,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"/\t// (and without log format)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25881,"byte_end":25912,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/\tdebug::print!(\"My struct: {:?}\", x);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25913,"byte_end":25953,"line_start":61,"line_end":61,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25954,"byte_end":25961,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25962,"byte_end":25965,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ If you want to avoid extra overhead in WASM, but still be able","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":25966,"byte_end":26032,"line_start":64,"line_end":64,"column_start":1,"column_end":67}},{"value":"/ to print / log when the code is executed natively you can use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26033,"byte_end":26098,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/ macros coming from `native` sub-module. This module enables","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26099,"byte_end":26162,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"/ logs conditionally and strips out logs in WASM.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26163,"byte_end":26214,"line_start":67,"line_end":67,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26215,"byte_end":26218,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26219,"byte_end":26237,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"/\tuse frame_support::debug::native;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26238,"byte_end":26275,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26276,"byte_end":26279,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ #[derive(sp_core::RuntimeDebug)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26280,"byte_end":26316,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"/\tstruct MyStruct {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26317,"byte_end":26338,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"/   a: u64,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26339,"byte_end":26352,"line_start":74,"line_end":74,"column_start":1,"column_end":14}},{"value":"/\t}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26353,"byte_end":26358,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26359,"byte_end":26362,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ // We don't initialize the logger, since","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26363,"byte_end":26407,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"/ // we are not printing anything out in WASM.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26408,"byte_end":26456,"line_start":78,"line_end":78,"column_start":1,"column_end":49}},{"value":"/\t// debug::RuntimeLogger::init();","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26457,"byte_end":26493,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26494,"byte_end":26497,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let x = MyStruct { a: 5 };","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26498,"byte_end":26528,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26529,"byte_end":26532,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/\t// Displays an info log when running natively, nothing when WASM.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26533,"byte_end":26602,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/\tnative::info!(\"My struct: {:?}\", x);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26603,"byte_end":26643,"line_start":84,"line_end":84,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26644,"byte_end":26647,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/\t// same output to stdout, no overhead on WASM.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26648,"byte_end":26698,"line_start":86,"line_end":86,"column_start":1,"column_end":51}},{"value":"/\tnative::print!(\"My struct: {:?}\", x);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26699,"byte_end":26740,"line_start":87,"line_end":87,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26741,"byte_end":26748,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27082,"byte_end":27088,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"name":"native","qualname":"::debug::native","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":6073},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Native-only logging.","sig":null,"attributes":[{"value":"/ Native-only logging.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26895,"byte_end":26919,"line_start":96,"line_end":96,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26920,"byte_end":26923,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Using any functions from this module will have any effect","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26924,"byte_end":26985,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/ only if the runtime is running natively (i.e. not via WASM)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":26986,"byte_end":27049,"line_start":99,"line_end":99,"column_start":1,"column_end":64}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27050,"byte_end":27073,"line_start":100,"line_end":100,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27968,"byte_end":27973,"line_start":143,"line_end":143,"column_start":8,"column_end":13},"name":"debug","qualname":"::debug::debug","value":"pub fn debug<impl Debug: Debug>(&impl Debug)","parent":null,"children":[],"decl_id":null,"docs":" Print out the debuggable type.\n","sig":null,"attributes":[{"value":"/ Print out the debuggable type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":27926,"byte_end":27960,"line_start":142,"line_end":142,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28579,"byte_end":28592,"line_start":159,"line_end":159,"column_start":12,"column_end":25},"name":"RuntimeLogger","qualname":"::debug::RuntimeLogger","value":"","parent":null,"children":[],"decl_id":null,"docs":" Runtime logger implementation - `log` crate backend.","sig":null,"attributes":[{"value":"/ Runtime logger implementation - `log` crate backend.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28029,"byte_end":28085,"line_start":147,"line_end":147,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28086,"byte_end":28089,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The logger should be initialized if you want to display","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28090,"byte_end":28149,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ logs inside the runtime that is not necessarily running natively.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28150,"byte_end":28219,"line_start":150,"line_end":150,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28220,"byte_end":28223,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ When runtime is executed natively any log statements are displayed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28224,"byte_end":28294,"line_start":152,"line_end":152,"column_start":1,"column_end":71}},{"value":"/ even if this logger is NOT initialized.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28295,"byte_end":28338,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28339,"byte_end":28342,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Note that even though the logs are not displayed in WASM, they","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28343,"byte_end":28409,"line_start":155,"line_end":155,"column_start":1,"column_end":67}},{"value":"/ may still affect the size and performance of the generated runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28410,"byte_end":28481,"line_start":156,"line_end":156,"column_start":1,"column_end":72}},{"value":"/ To lower the footprint make sure to only use macros from `native`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28482,"byte_end":28551,"line_start":157,"line_end":157,"column_start":1,"column_end":70}},{"value":"/ sub-module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28552,"byte_end":28567,"line_start":158,"line_end":158,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28734,"byte_end":28738,"line_start":166,"line_end":166,"column_start":9,"column_end":13},"name":"init","qualname":"<RuntimeLogger>::init","value":"pub fn init()","parent":null,"children":[],"decl_id":null,"docs":" Initialize the logger.","sig":null,"attributes":[{"value":"/ Initialize the logger.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28617,"byte_end":28643,"line_start":162,"line_end":162,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28645,"byte_end":28648,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ This is a no-op when running natively (`std`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28650,"byte_end":28700,"line_start":164,"line_end":164,"column_start":2,"column_end":52}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28702,"byte_end":28725,"line_start":165,"line_end":165,"column_start":2,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dispatch","qualname":"::dispatch","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":6093},{"krate":0,"index":58},{"krate":0,"index":6095},{"krate":0,"index":59},{"krate":0,"index":6097},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":6105},{"krate":0,"index":65},{"krate":0,"index":6107},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":6129},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":111}],"decl_id":null,"docs":" Dispatch system. Contains a macro for defining runtime modules and\n generating values representing lazy module function calls.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1401,"byte_end":1413,"line_start":55,"line_end":55,"column_start":1,"column_end":13}},{"value":"/ Dispatch system. Contains a macro for defining runtime modules and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44247,"byte_end":44317,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ generating values representing lazy module function calls.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":44318,"byte_end":44380,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45290,"byte_end":45316,"line_start":37,"line_end":37,"column_start":10,"column_end":36},"name":"DispatchResultWithPostInfo","qualname":"::dispatch::DispatchResultWithPostInfo","value":"sp_runtime::DispatchResultWithInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The return typ of a `Dispatchable` in frame. When returned explicitly from\n a dispatchable function it allows overriding the default `PostDispatchInfo`\n returned from a dispatch.\n","sig":null,"attributes":[{"value":"/ The return typ of a `Dispatchable` in frame. When returned explicitly from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45092,"byte_end":45170,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ a dispatchable function it allows overriding the default `PostDispatchInfo`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45171,"byte_end":45250,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ returned from a dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45251,"byte_end":45280,"line_start":36,"line_end":36,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45740,"byte_end":45754,"line_start":44,"line_end":44,"column_start":10,"column_end":24},"name":"DispatchResult","qualname":"::dispatch::DispatchResult","value":"Result<(), sp_runtime::DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Unaugmented version of `DispatchResultWithPostInfo` that can be returned from\n dispatchable functions and is automatically converted to the augmented type. Should be\n used whenever the `PostDispatchInfo` does not need to be overwritten. As this should\n be the common case it is the implicit return type when none is specified.\n","sig":null,"attributes":[{"value":"/ Unaugmented version of `DispatchResultWithPostInfo` that can be returned from","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45391,"byte_end":45472,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/ dispatchable functions and is automatically converted to the augmented type. Should be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45473,"byte_end":45563,"line_start":41,"line_end":41,"column_start":1,"column_end":91}},{"value":"/ used whenever the `PostDispatchInfo` does not need to be overwritten. As this should","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45564,"byte_end":45652,"line_start":42,"line_end":42,"column_start":1,"column_end":89}},{"value":"/ be the common case it is the implicit return type when none is specified.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45653,"byte_end":45730,"line_start":43,"line_end":43,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45870,"byte_end":45895,"line_start":47,"line_end":47,"column_start":10,"column_end":35},"name":"DispatchErrorWithPostInfo","qualname":"::dispatch::DispatchErrorWithPostInfo","value":"sp_runtime::DispatchErrorWithPostInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The error type contained in a `DispatchResultWithPostInfo`.\n","sig":null,"attributes":[{"value":"/ The error type contained in a `DispatchResultWithPostInfo`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45797,"byte_end":45860,"line_start":46,"line_end":46,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46032,"byte_end":46040,"line_start":51,"line_end":51,"column_start":11,"column_end":19},"name":"Callable","qualname":"::dispatch::Callable","value":"Callable<T>","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" Serializable version of pallet dispatchable.\n","sig":null,"attributes":[{"value":"/ Serializable version of pallet dispatchable.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":45973,"byte_end":46021,"line_start":50,"line_end":50,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":103},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46052,"byte_end":46056,"line_start":52,"line_end":52,"column_start":7,"column_end":11},"name":"Call","qualname":"::dispatch::Callable::Call","value":"type Call: UnfilteredDispatchable + Codec + Clone + PartialEq + Eq;","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46225,"byte_end":46240,"line_start":57,"line_end":57,"column_start":10,"column_end":25},"name":"CallableCallFor","qualname":"::dispatch::CallableCallFor","value":"<A as Callable<R>>::Call","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":107},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46450,"byte_end":46459,"line_start":62,"line_end":62,"column_start":11,"column_end":20},"name":"Parameter","qualname":"::dispatch::Parameter","value":"Parameter: Codec + EncodeLike + Clone + Eq + fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" A type that can be used as a parameter in a dispatchable function.","sig":null,"attributes":[{"value":"/ A type that can be used as a parameter in a dispatchable function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46276,"byte_end":46346,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46347,"byte_end":46350,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ When using `decl_module` all arguments for call functions must implement this trait.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46351,"byte_end":46439,"line_start":61,"line_end":61,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":111},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":107759,"byte_end":107768,"line_start":1903,"line_end":1903,"column_start":11,"column_end":20},"name":"IsSubType","qualname":"::dispatch::IsSubType","value":"IsSubType<T>","parent":null,"children":[{"krate":0,"index":113}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":107778,"byte_end":107789,"line_start":1904,"line_end":1904,"column_start":5,"column_end":16},"name":"is_sub_type","qualname":"::dispatch::IsSubType::is_sub_type","value":"pub fn is_sub_type(&Self) -> Option<&T>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":121},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"storage","qualname":"::storage","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":6169},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":6173},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":6175},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":170},{"krate":0,"index":226},{"krate":0,"index":265},{"krate":0,"index":557},{"krate":0,"index":616},{"krate":0,"index":624},{"krate":0,"index":651},{"krate":0,"index":700},{"krate":0,"index":709},{"krate":0,"index":724},{"krate":0,"index":792},{"krate":0,"index":798},{"krate":0,"index":803},{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":833}],"decl_id":null,"docs":" Stuff to do with the runtime's storage.\n","sig":null,"attributes":[{"value":"/ Stuff to do with the runtime's storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128173,"byte_end":128216,"line_start":18,"line_end":18,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unhashed","qualname":"::storage::unhashed","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":6185},{"krate":0,"index":140},{"krate":0,"index":6187},{"krate":0,"index":141},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"decl_id":null,"docs":" Operation on unhashed runtime storage.\n","sig":null,"attributes":[{"value":"/ Operation on unhashed runtime storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":153292,"byte_end":153334,"line_start":18,"line_end":18,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":153495,"byte_end":153498,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::unhashed::get","value":"pub fn get<T: Decode + Sized>(&[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":153390,"byte_end":153487,"line_start":23,"line_end":23,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":153896,"byte_end":153910,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::unhashed::get_or_default","value":"pub fn get_or_default<T: Decode + Sized + Default>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":153775,"byte_end":153868,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":153869,"byte_end":153888,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":147},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154123,"byte_end":154129,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::unhashed::get_or","value":"pub fn get_or<T: Decode + Sized>(&[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154005,"byte_end":154095,"line_start":40,"line_end":40,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154096,"byte_end":154115,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154344,"byte_end":154355,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::unhashed::get_or_else","value":"pub fn get_or_else<T: Decode + Sized, F: FnOnce() -> T>(&[u8], F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154224,"byte_end":154316,"line_start":46,"line_end":46,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154317,"byte_end":154336,"line_start":47,"line_end":47,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154520,"byte_end":154523,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::unhashed::put","value":"pub fn put<T: Encode + ?Sized>(&[u8], &T)","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154473,"byte_end":154512,"line_start":52,"line_end":52,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154742,"byte_end":154746,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::unhashed::take","value":"pub fn take<T: Decode + Sized>(&[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154635,"byte_end":154734,"line_start":57,"line_end":57,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154988,"byte_end":155003,"line_start":68,"line_end":68,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::unhashed::take_or_default","value":"pub fn take_or_default<T: Decode + Sized + Default>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154852,"byte_end":154950,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":154951,"byte_end":154980,"line_start":67,"line_end":67,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":159},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155262,"byte_end":155269,"line_start":74,"line_end":74,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::unhashed::take_or","value":"pub fn take_or<T: Decode + Sized>(&[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155099,"byte_end":155189,"line_start":72,"line_end":72,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155190,"byte_end":155254,"line_start":73,"line_end":73,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155530,"byte_end":155542,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::unhashed::take_or_else","value":"pub fn take_or_else<T: Decode + Sized, F: FnOnce() -> T>(&[u8], F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155365,"byte_end":155457,"line_start":78,"line_end":78,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155458,"byte_end":155522,"line_start":79,"line_end":79,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":164},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155728,"byte_end":155734,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::unhashed::exists","value":"pub fn exists(&[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155661,"byte_end":155720,"line_start":84,"line_end":84,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155874,"byte_end":155878,"line_start":90,"line_end":90,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::unhashed::kill","value":"pub fn kill(&[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155816,"byte_end":155866,"line_start":89,"line_end":89,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156000,"byte_end":156011,"line_start":95,"line_end":95,"column_start":8,"column_end":19},"name":"kill_prefix","qualname":"::storage::unhashed::kill_prefix","value":"pub fn kill_prefix(&[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure keys with the given `prefix` have no entries in storage.\n","sig":null,"attributes":[{"value":"/ Ensure keys with the given `prefix` have no entries in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":155925,"byte_end":155992,"line_start":94,"line_end":94,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":168},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156115,"byte_end":156122,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::unhashed::get_raw","value":"pub fn get_raw(&[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156071,"byte_end":156107,"line_start":99,"line_end":99,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156439,"byte_end":156446,"line_start":109,"line_end":109,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::unhashed::put_raw","value":"pub fn put_raw(&[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156185,"byte_end":156223,"line_start":104,"line_end":104,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156224,"byte_end":156227,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ **WARNING**: If you set the storage of the Substrate Wasm (`well_known_keys::CODE`),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156228,"byte_end":156316,"line_start":106,"line_end":106,"column_start":1,"column_end":89}},{"value":"/ you should also call `frame_system::RuntimeUpgraded::put(true)` to trigger the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156317,"byte_end":156399,"line_start":107,"line_end":107,"column_start":1,"column_end":83}},{"value":"/ `on_runtime_upgrade` logic.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/unhashed.rs","byte_start":156400,"byte_end":156431,"line_start":108,"line_end":108,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hashed","qualname":"::storage::hashed","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":6193},{"krate":0,"index":175},{"krate":0,"index":6195},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":188},{"krate":0,"index":193},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223}],"decl_id":null,"docs":" Operation on runtime storage using hashed keys.\n","sig":null,"attributes":[{"value":"/ Operation on runtime storage using hashed keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157197,"byte_end":157248,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157430,"byte_end":157433,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::hashed::get","value":"pub fn get<T, HashFn, R>(&HashFn, &[u8]) -> Option<T> where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157325,"byte_end":157422,"line_start":24,"line_end":24,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157718,"byte_end":157732,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::hashed::get_or_default","value":"pub fn get_or_default<T, HashFn, R>(&HashFn, &[u8]) -> T where T: Decode +\nSized + Default, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157597,"byte_end":157690,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157691,"byte_end":157710,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158027,"byte_end":158033,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::hashed::get_or","value":"pub fn get_or<T, HashFn, R>(&HashFn, &[u8], T) -> T where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":157909,"byte_end":157999,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158000,"byte_end":158019,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158345,"byte_end":158356,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::hashed::get_or_else","value":"pub fn get_or_else<T, F, HashFn, R>(&HashFn, &[u8], F) -> T where T: Decode +\nSized, F: FnOnce() -> T, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158225,"byte_end":158317,"line_start":56,"line_end":56,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158318,"byte_end":158337,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158622,"byte_end":158625,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::hashed::put","value":"pub fn put<T, HashFn, R>(&HashFn, &[u8], &T) where T: Encode,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158575,"byte_end":158614,"line_start":68,"line_end":68,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158893,"byte_end":158897,"line_start":79,"line_end":79,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::hashed::take","value":"pub fn take<T, HashFn, R>(&HashFn, &[u8]) -> Option<T> where T: Decode +\nSized, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":158786,"byte_end":158885,"line_start":78,"line_end":78,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159198,"byte_end":159213,"line_start":90,"line_end":90,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::hashed::take_or_default","value":"pub fn take_or_default<T, HashFn, R>(&HashFn, &[u8]) -> T where T: Decode +\nSized + Default, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159062,"byte_end":159160,"line_start":88,"line_end":88,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159161,"byte_end":159190,"line_start":89,"line_end":89,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159554,"byte_end":159561,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::hashed::take_or","value":"pub fn take_or<T, HashFn, R>(&HashFn, &[u8], T) -> T where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159391,"byte_end":159481,"line_start":99,"line_end":99,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159482,"byte_end":159546,"line_start":100,"line_end":100,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159919,"byte_end":159931,"line_start":112,"line_end":112,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::hashed::take_or_else","value":"pub fn take_or_else<T, F, HashFn, R>(&HashFn, &[u8], F) -> T where T: Decode +\nSized, F: FnOnce() -> T, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159754,"byte_end":159846,"line_start":110,"line_end":110,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":159847,"byte_end":159911,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160218,"byte_end":160224,"line_start":123,"line_end":123,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::hashed::exists","value":"pub fn exists<HashFn, R>(&HashFn, &[u8]) -> bool where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160151,"byte_end":160210,"line_start":122,"line_end":122,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160421,"byte_end":160425,"line_start":132,"line_end":132,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::hashed::kill","value":"pub fn kill<HashFn, R>(&HashFn, &[u8]) where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160363,"byte_end":160413,"line_start":131,"line_end":131,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160598,"byte_end":160605,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::hashed::get_raw","value":"pub fn get_raw<HashFn, R>(&HashFn, &[u8]) -> Option<Vec<u8>> where\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160554,"byte_end":160590,"line_start":140,"line_end":140,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160802,"byte_end":160809,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::hashed::put_raw","value":"pub fn put_raw<HashFn, R>(&HashFn, &[u8], &[u8]) where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/hashed.rs","byte_start":160756,"byte_end":160794,"line_start":149,"line_end":149,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":226},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"child","qualname":"::storage::child","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":6199},{"krate":0,"index":231},{"krate":0,"index":6201},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" Operation on runtime child storages.","sig":null,"attributes":[{"value":"/ Operation on runtime child storages.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":161648,"byte_end":161688,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":161689,"byte_end":161692,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This module is a currently only a variant of unhashed with additional `child_info`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":161693,"byte_end":161780,"line_start":20,"line_end":20,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":235},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162142,"byte_end":162145,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::child::get","value":"pub fn get<T: Decode + Sized>(&ChildInfo, &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162037,"byte_end":162134,"line_start":28,"line_end":28,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162773,"byte_end":162787,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::child::get_or_default","value":"pub fn get_or_default<T: Decode + Sized + Default>(&ChildInfo, &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162652,"byte_end":162745,"line_start":50,"line_end":50,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162746,"byte_end":162765,"line_start":51,"line_end":51,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163041,"byte_end":163047,"line_start":61,"line_end":61,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::child::get_or","value":"pub fn get_or<T: Decode + Sized>(&ChildInfo, &[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":162923,"byte_end":163013,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163014,"byte_end":163033,"line_start":60,"line_end":60,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163304,"byte_end":163315,"line_start":71,"line_end":71,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::child::get_or_else","value":"pub fn get_or_else<T: Decode + Sized, F: FnOnce() -> T>(&ChildInfo, &[u8], F)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163184,"byte_end":163276,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163277,"byte_end":163296,"line_start":70,"line_end":70,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163522,"byte_end":163525,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::child::put","value":"pub fn put<T: Encode>(&ChildInfo, &[u8], &T)","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163475,"byte_end":163514,"line_start":79,"line_end":79,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163892,"byte_end":163896,"line_start":97,"line_end":97,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::child::take","value":"pub fn take<T: Decode + Sized>(&ChildInfo, &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":163785,"byte_end":163884,"line_start":96,"line_end":96,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164191,"byte_end":164206,"line_start":110,"line_end":110,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::child::take_or_default","value":"pub fn take_or_default<T: Codec + Sized + Default>(&ChildInfo, &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164055,"byte_end":164153,"line_start":108,"line_end":108,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164154,"byte_end":164183,"line_start":109,"line_end":109,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164505,"byte_end":164512,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::child::take_or","value":"pub fn take_or<T: Codec + Sized>(&ChildInfo, &[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164342,"byte_end":164432,"line_start":117,"line_end":117,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164433,"byte_end":164497,"line_start":118,"line_end":118,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":255},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164814,"byte_end":164826,"line_start":129,"line_end":129,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::child::take_or_else","value":"pub fn take_or_else<T: Codec + Sized, F: FnOnce() -> T>(&ChildInfo, &[u8], F)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164649,"byte_end":164741,"line_start":127,"line_end":127,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164742,"byte_end":164806,"line_start":128,"line_end":128,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165053,"byte_end":165059,"line_start":138,"line_end":138,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::child::exists","value":"pub fn exists(&ChildInfo, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":164986,"byte_end":165045,"line_start":137,"line_end":137,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165332,"byte_end":165344,"line_start":151,"line_end":151,"column_start":8,"column_end":20},"name":"kill_storage","qualname":"::storage::child::kill_storage","value":"pub fn kill_storage(&ChildInfo)","parent":null,"children":[],"decl_id":null,"docs":" Remove all `storage_key` key/values\n","sig":null,"attributes":[{"value":"/ Remove all `storage_key` key/values","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165285,"byte_end":165324,"line_start":150,"line_end":150,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165578,"byte_end":165582,"line_start":162,"line_end":162,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::child::kill","value":"pub fn kill(&ChildInfo, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165520,"byte_end":165570,"line_start":161,"line_end":161,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165829,"byte_end":165836,"line_start":177,"line_end":177,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::child::get_raw","value":"pub fn get_raw(&ChildInfo, &[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":165785,"byte_end":165821,"line_start":176,"line_end":176,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":166089,"byte_end":166096,"line_start":190,"line_end":190,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::child::put_raw","value":"pub fn put_raw(&ChildInfo, &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":166043,"byte_end":166081,"line_start":189,"line_end":189,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":166356,"byte_end":166360,"line_start":205,"line_end":205,"column_start":8,"column_end":12},"name":"root","qualname":"::storage::child::root","value":"pub fn root(&ChildInfo) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Calculate current child root value.\n","sig":null,"attributes":[{"value":"/ Calculate current child root value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/child.rs","byte_start":166309,"byte_end":166348,"line_start":204,"line_end":204,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"generator","qualname":"::storage::generator","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":373},{"krate":0,"index":499},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556}],"decl_id":null,"docs":" Generators are a set of trait on which storage traits are implemented.","sig":null,"attributes":[{"value":"/ Generators are a set of trait on which storage traits are implemented.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167225,"byte_end":167299,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167300,"byte_end":167303,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ (i.e. implementing the generator for StorageValue on a type will automatically derive the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167304,"byte_end":167397,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ implementation of StorageValue for this type).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167398,"byte_end":167448,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167449,"byte_end":167452,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ They are used by `decl_storage`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167453,"byte_end":167489,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167490,"byte_end":167493,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is internal api and is subject to change.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/mod.rs","byte_start":167494,"byte_end":167544,"line_start":25,"line_end":25,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172441,"byte_end":172451,"line_start":38,"line_end":38,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::generator::map::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"decl_id":null,"docs":" Generator for `StorageMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageMap` used by `decl_storage`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172023,"byte_end":172077,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172078,"byte_end":172081,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ By default each key value is stored at:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172082,"byte_end":172125,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ ```nocompile","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172126,"byte_end":172142,"line_start":30,"line_end":30,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher(encode(key))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172143,"byte_end":172219,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172220,"byte_end":172227,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172228,"byte_end":172231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172232,"byte_end":172245,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172246,"byte_end":172249,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172250,"byte_end":172343,"line_start":36,"line_end":36,"column_start":1,"column_end":94}},{"value":"/ `blake2_256` must be used.  Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172344,"byte_end":172430,"line_start":37,"line_end":37,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":288},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172526,"byte_end":172531,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::map::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172484,"byte_end":172519,"line_start":39,"line_end":39,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":289},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172584,"byte_end":172590,"line_start":43,"line_end":43,"column_start":7,"column_end":13},"name":"Hasher","qualname":"::storage::generator::map::StorageMap::Hasher","value":"type Hasher: StorageHasher;","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Hasher. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Hasher. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172535,"byte_end":172577,"line_start":42,"line_end":42,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172663,"byte_end":172676,"line_start":46,"line_end":46,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::map::StorageMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172609,"byte_end":172658,"line_start":45,"line_end":45,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172754,"byte_end":172768,"line_start":49,"line_end":49,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::map::StorageMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172699,"byte_end":172749,"line_start":48,"line_end":48,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172900,"byte_end":172911,"line_start":53,"line_end":53,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::map::StorageMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172791,"byte_end":172872,"line_start":51,"line_end":51,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":172874,"byte_end":172895,"line_start":52,"line_end":52,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":173373,"byte_end":173401,"line_start":68,"line_end":68,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::map::StorageMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":173295,"byte_end":173368,"line_start":67,"line_end":67,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":173493,"byte_end":173521,"line_start":71,"line_end":71,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::map::StorageMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":173434,"byte_end":173488,"line_start":70,"line_end":70,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":173605,"byte_end":173626,"line_start":74,"line_end":74,"column_start":5,"column_end":26},"name":"storage_map_final_key","qualname":"::storage::generator::map::StorageMap::storage_map_final_key","value":"pub fn storage_map_final_key<KeyArg>(KeyArg) -> Vec<u8> where\nKeyArg: EncodeLike<K>","parent":{"krate":0,"index":285},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":173554,"byte_end":173600,"line_start":73,"line_end":73,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":393},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185048,"byte_end":185064,"line_start":44,"line_end":44,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::generator::double_map::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":407}],"decl_id":null,"docs":" Generator for `StorageDoubleMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageDoubleMap` used by `decl_storage`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184086,"byte_end":184146,"line_start":24,"line_end":24,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184147,"byte_end":184150,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Mapping of keys to a storage path","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184151,"byte_end":184190,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184191,"byte_end":184194,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The storage key (i.e. the key under which the `Value` will be stored) is created from two parts.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184195,"byte_end":184295,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"/ The first part is a hash of a concatenation of the `key1_prefix` and `Key1`. And the second part","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184296,"byte_end":184396,"line_start":29,"line_end":29,"column_start":1,"column_end":101}},{"value":"/ is a hash of a `Key2`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184397,"byte_end":184423,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184424,"byte_end":184427,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Thus value for (key1, key2) is stored at:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184428,"byte_end":184473,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/ ```nocompile","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184474,"byte_end":184490,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher1(encode(key1)) ++ Hasher2(encode(key2))","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184491,"byte_end":184594,"line_start":34,"line_end":34,"column_start":1,"column_end":104}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184595,"byte_end":184602,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184603,"byte_end":184606,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184607,"byte_end":184620,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184621,"byte_end":184624,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ If the key1s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184625,"byte_end":184719,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher1. Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184720,"byte_end":184817,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ If the key2s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184818,"byte_end":184912,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher2. Otherwise, other items in storage with the same first","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":184913,"byte_end":185009,"line_start":42,"line_end":42,"column_start":1,"column_end":97}},{"value":"/ key can be compromised.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185010,"byte_end":185037,"line_start":43,"line_end":43,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":397},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185156,"byte_end":185161,"line_start":46,"line_end":46,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::double_map::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185114,"byte_end":185149,"line_start":45,"line_end":45,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185201,"byte_end":185208,"line_start":49,"line_end":49,"column_start":7,"column_end":14},"name":"Hasher1","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher1","value":"type Hasher1: StorageHasher;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Hasher for the first key.\n","sig":null,"attributes":[{"value":"/ Hasher for the first key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185165,"byte_end":185194,"line_start":48,"line_end":48,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":399},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185264,"byte_end":185271,"line_start":52,"line_end":52,"column_start":7,"column_end":14},"name":"Hasher2","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher2","value":"type Hasher2: StorageHasher;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Hasher for the second key.\n","sig":null,"attributes":[{"value":"/ Hasher for the second key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185227,"byte_end":185257,"line_start":51,"line_end":51,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185344,"byte_end":185357,"line_start":55,"line_end":55,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185290,"byte_end":185339,"line_start":54,"line_end":54,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185435,"byte_end":185449,"line_start":58,"line_end":58,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185380,"byte_end":185430,"line_start":57,"line_end":57,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185581,"byte_end":185592,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::double_map::StorageDoubleMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185472,"byte_end":185553,"line_start":60,"line_end":60,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185555,"byte_end":185576,"line_start":61,"line_end":61,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186054,"byte_end":186082,"line_start":77,"line_end":77,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::double_map::StorageDoubleMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":185976,"byte_end":186049,"line_start":76,"line_end":76,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186174,"byte_end":186202,"line_start":80,"line_end":80,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::double_map::StorageDoubleMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186115,"byte_end":186169,"line_start":79,"line_end":79,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186299,"byte_end":186328,"line_start":83,"line_end":83,"column_start":5,"column_end":34},"name":"storage_double_map_final_key1","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key1","value":"pub fn storage_double_map_final_key1<KArg1>(KArg1) -> Vec<u8> where\nKArg1: EncodeLike<K1>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Generate the first part of the key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the first part of the key used in top storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186235,"byte_end":186294,"line_start":82,"line_end":82,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186970,"byte_end":186998,"line_start":102,"line_end":102,"column_start":5,"column_end":33},"name":"storage_double_map_final_key","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key","value":"pub fn storage_double_map_final_key<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8>\nwhere KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":186919,"byte_end":186965,"line_start":101,"line_end":101,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":514},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200723,"byte_end":200735,"line_start":31,"line_end":31,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::generator::value::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521}],"decl_id":null,"docs":" Generator for `StorageValue` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageValue` used by `decl_storage`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200538,"byte_end":200594,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200595,"byte_end":200598,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ By default value is stored at:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200599,"byte_end":200633,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ ```nocompile","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200634,"byte_end":200650,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200651,"byte_end":200704,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200705,"byte_end":200712,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200795,"byte_end":200800,"line_start":33,"line_end":33,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::value::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200753,"byte_end":200788,"line_start":32,"line_end":32,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200858,"byte_end":200871,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::value::StorageValue::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200804,"byte_end":200853,"line_start":35,"line_end":35,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200949,"byte_end":200963,"line_start":39,"line_end":39,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::value::StorageValue::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200894,"byte_end":200944,"line_start":38,"line_end":38,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201064,"byte_end":201092,"line_start":42,"line_end":42,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::value::StorageValue::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<T>) -> Self::Query","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":200986,"byte_end":201059,"line_start":41,"line_end":41,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201184,"byte_end":201212,"line_start":45,"line_end":45,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::value::StorageValue::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<T>","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201125,"byte_end":201179,"line_start":44,"line_end":44,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201296,"byte_end":201319,"line_start":48,"line_end":48,"column_start":5,"column_end":28},"name":"storage_value_final_key","qualname":"::storage::generator::value::StorageValue::storage_value_final_key","value":"pub fn storage_value_final_key() -> [u8; ]","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201245,"byte_end":201291,"line_start":47,"line_end":47,"column_start":2,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":557},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"migration","qualname":"::storage::migration","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":6291},{"krate":0,"index":561},{"krate":0,"index":6293},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":6297},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":572},{"krate":0,"index":577},{"krate":0,"index":582},{"krate":0,"index":590},{"krate":0,"index":597},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":612}],"decl_id":null,"docs":" Some utilities for helping access storage with arbitrary key types.\n","sig":null,"attributes":[{"value":"/ Some utilities for helping access storage with arbitrary key types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":204491,"byte_end":204562,"line_start":18,"line_end":18,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":566},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":204761,"byte_end":204776,"line_start":26,"line_end":26,"column_start":12,"column_end":27},"name":"StorageIterator","qualname":"::storage::migration::StorageIterator","value":"StorageIterator {  }","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":204697,"byte_end":204749,"line_start":25,"line_end":25,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205012,"byte_end":205015,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageIterator<T>>::new","value":"pub fn new(&[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":204916,"byte_end":205003,"line_start":34,"line_end":34,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205198,"byte_end":205209,"line_start":40,"line_end":40,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageIterator<T>>::with_suffix","value":"pub fn with_suffix(&[u8], &[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205102,"byte_end":205189,"line_start":39,"line_end":39,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205650,"byte_end":205655,"line_start":50,"line_end":50,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageIterator<T>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205550,"byte_end":205641,"line_start":49,"line_end":49,"column_start":2,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":582},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206470,"byte_end":206488,"line_start":84,"line_end":84,"column_start":12,"column_end":30},"name":"StorageKeyIterator","qualname":"::storage::migration::StorageKeyIterator","value":"StorageKeyIterator {  }","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206406,"byte_end":206458,"line_start":83,"line_end":83,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206803,"byte_end":206806,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageKeyIterator<K, T, H>>::new","value":"pub fn new(&[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206707,"byte_end":206794,"line_start":92,"line_end":92,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206989,"byte_end":207000,"line_start":98,"line_end":98,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageKeyIterator<K, T, H>>::with_suffix","value":"pub fn with_suffix(&[u8], &[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206893,"byte_end":206980,"line_start":97,"line_end":97,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":207441,"byte_end":207446,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageKeyIterator<K, T, H>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":207341,"byte_end":207432,"line_start":107,"line_end":107,"column_start":2,"column_end":93}}]},{"kind":"Function","id":{"krate":0,"index":604},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":208492,"byte_end":208510,"line_start":150,"line_end":150,"column_start":8,"column_end":26},"name":"have_storage_value","qualname":"::storage::migration::have_storage_value","value":"pub fn have_storage_value(&[u8], &[u8], &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":208388,"byte_end":208484,"line_start":149,"line_end":149,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":605},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":208724,"byte_end":208741,"line_start":155,"line_end":155,"column_start":8,"column_end":25},"name":"get_storage_value","qualname":"::storage::migration::get_storage_value","value":"pub fn get_storage_value<T: Decode + Sized>(&[u8], &[u8], &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":208620,"byte_end":208716,"line_start":154,"line_end":154,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":209157,"byte_end":209175,"line_start":164,"line_end":164,"column_start":8,"column_end":26},"name":"take_storage_value","qualname":"::storage::migration::take_storage_value","value":"pub fn take_storage_value<T: Decode + Sized>(&[u8], &[u8], &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":209052,"byte_end":209149,"line_start":163,"line_end":163,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":209593,"byte_end":209610,"line_start":173,"line_end":173,"column_start":8,"column_end":25},"name":"put_storage_value","qualname":"::storage::migration::put_storage_value","value":"pub fn put_storage_value<T: Encode>(&[u8], &[u8], &[u8], T)","parent":null,"children":[],"decl_id":null,"docs":" Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":209487,"byte_end":209585,"line_start":172,"line_end":172,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":611},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":210018,"byte_end":210039,"line_start":182,"line_end":182,"column_start":8,"column_end":29},"name":"remove_storage_prefix","qualname":"::storage::migration::remove_storage_prefix","value":"pub fn remove_storage_prefix(&[u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":209914,"byte_end":210010,"line_start":181,"line_end":181,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":612},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":210425,"byte_end":210442,"line_start":191,"line_end":191,"column_start":8,"column_end":25},"name":"take_storage_item","qualname":"::storage::migration::take_storage_item","value":"pub fn take_storage_item<K: Encode + Sized, T: Decode + Sized,\n                         H: StorageHasher>(&[u8], &[u8], K) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":210321,"byte_end":210417,"line_start":190,"line_end":190,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":616},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128845,"byte_end":128861,"line_start":39,"line_end":39,"column_start":8,"column_end":24},"name":"with_transaction","qualname":"::storage::with_transaction","value":"pub fn with_transaction<R, impl FnOnce() -> TransactionOutcome<R>: FnOnce() ->\n                        TransactionOutcome<R>>(impl FnOnce() -> TransactionOutcome<R>)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the supplied function in a new storage transaction.","sig":null,"attributes":[{"value":"/ Execute the supplied function in a new storage transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128540,"byte_end":128603,"line_start":33,"line_end":33,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128604,"byte_end":128607,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All changes to storage performed by the supplied function are discarded if the returned","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128608,"byte_end":128699,"line_start":35,"line_end":35,"column_start":1,"column_end":92}},{"value":"/ outcome is `TransactionOutcome::Rollback`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128700,"byte_end":128746,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128747,"byte_end":128750,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Transactions can be nested to any depth. Commits happen to the parent transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128751,"byte_end":128837,"line_start":38,"line_end":38,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":624},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129360,"byte_end":129372,"line_start":56,"line_end":56,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":650}],"decl_id":null,"docs":" A trait for working with macro-generated storage values under the substrate storage API.","sig":null,"attributes":[{"value":"/ A trait for working with macro-generated storage values under the substrate storage API.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129175,"byte_end":129267,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129268,"byte_end":129271,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129272,"byte_end":129317,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ [`generator::StorageValue`]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129318,"byte_end":129349,"line_start":55,"line_end":55,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":626},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129431,"byte_end":129436,"line_start":58,"line_end":58,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129390,"byte_end":129424,"line_start":57,"line_end":57,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129469,"byte_end":129479,"line_start":61,"line_end":61,"column_start":5,"column_end":15},"name":"hashed_key","qualname":"::storage::StorageValue::hashed_key","value":"pub fn hashed_key() -> [u8; ]","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Get the storage key.\n","sig":null,"attributes":[{"value":"/ Get the storage key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129440,"byte_end":129464,"line_start":60,"line_end":60,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129551,"byte_end":129557,"line_start":64,"line_end":64,"column_start":5,"column_end":11},"name":"exists","qualname":"::storage::StorageValue::exists","value":"pub fn exists() -> bool","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129497,"byte_end":129546,"line_start":63,"line_end":63,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129630,"byte_end":129633,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageValue::get","value":"pub fn get() -> Self::Query","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Load the value from the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Load the value from the provided storage instance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129571,"byte_end":129625,"line_start":66,"line_end":66,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129768,"byte_end":129775,"line_start":71,"line_end":71,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageValue::try_get","value":"pub fn try_get() -> Result<T, ()>","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Try to get the underlying value from the provided storage instance; `Ok` if it exists,\n `Err` if not.\n","sig":null,"attributes":[{"value":"/ Try to get the underlying value from the provided storage instance; `Ok` if it exists,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129654,"byte_end":129744,"line_start":69,"line_end":69,"column_start":2,"column_end":92}},{"value":"/ `Err` if not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129746,"byte_end":129763,"line_start":70,"line_end":70,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130683,"byte_end":130692,"line_start":93,"line_end":93,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::StorageValue::translate","value":"pub fn translate<O: Decode, F: FnOnce(Option<O>) -> Option<T>>(F)\n-> Result<Option<T>, ()>","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Translate a value from some previous type (`O`) to the current type.","sig":null,"attributes":[{"value":"/ Translate a value from some previous type (`O`) to the current type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129798,"byte_end":129870,"line_start":73,"line_end":73,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129872,"byte_end":129875,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ `f: F` is the translation function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129877,"byte_end":129916,"line_start":75,"line_end":75,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129918,"byte_end":129921,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the storage item could not be interpreted as the old type, and Ok, along","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":129923,"byte_end":130016,"line_start":77,"line_end":77,"column_start":2,"column_end":95}},{"value":"/ with the new value if it could.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130018,"byte_end":130053,"line_start":78,"line_end":78,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130055,"byte_end":130058,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ NOTE: This operates from and to `Option<_>` types; no effort is made to respect the default","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130060,"byte_end":130155,"line_start":80,"line_end":80,"column_start":2,"column_end":97}},{"value":"/ value of the original type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130157,"byte_end":130188,"line_start":81,"line_end":81,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130190,"byte_end":130193,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130195,"byte_end":130208,"line_start":83,"line_end":83,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130210,"byte_end":130213,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130215,"byte_end":130308,"line_start":85,"line_end":85,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130310,"byte_end":130382,"line_start":86,"line_end":86,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130384,"byte_end":130387,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130389,"byte_end":130400,"line_start":88,"line_end":88,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130402,"byte_end":130405,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade, while","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130407,"byte_end":130503,"line_start":90,"line_end":90,"column_start":2,"column_end":98}},{"value":"/ ensuring **no usage of this storage are made before the call to `on_runtime_upgrade`**. (More","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130505,"byte_end":130602,"line_start":91,"line_end":91,"column_start":2,"column_end":99}},{"value":"/ precisely prior initialized modules doesn't make use of this storage).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130604,"byte_end":130678,"line_start":92,"line_end":92,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130846,"byte_end":130849,"line_start":96,"line_end":96,"column_start":5,"column_end":8},"name":"put","qualname":"::storage::StorageValue::put","value":"pub fn put<Arg: EncodeLike<T>>(Arg)","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130773,"byte_end":130841,"line_start":95,"line_end":95,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131020,"byte_end":131023,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"set","qualname":"::storage::StorageValue::set","value":"pub fn set(Self::Query)","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance; this uses the query\n type rather than the underlying value.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance; this uses the query","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130883,"byte_end":130971,"line_start":98,"line_end":98,"column_start":2,"column_end":90}},{"value":"/ type rather than the underlying value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":130973,"byte_end":131015,"line_start":99,"line_end":99,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131070,"byte_end":131076,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageValue::mutate","value":"pub fn mutate<R, F: FnOnce(&mut Self::Query) -> R>(F) -> R","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Mutate the value\n","sig":null,"attributes":[{"value":"/ Mutate the value","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131045,"byte_end":131065,"line_start":102,"line_end":102,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131177,"byte_end":131187,"line_start":106,"line_end":106,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageValue::try_mutate","value":"pub fn try_mutate<R, E, F: FnOnce(&mut Self::Query) -> Result<R, E>>(F)\n-> Result<R, E>","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Mutate the value if closure returns `Ok`\n","sig":null,"attributes":[{"value":"/ Mutate the value if closure returns `Ok`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131128,"byte_end":131172,"line_start":105,"line_end":105,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131297,"byte_end":131301,"line_start":109,"line_end":109,"column_start":5,"column_end":9},"name":"kill","qualname":"::storage::StorageValue::kill","value":"pub fn kill()","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Clear the storage value.\n","sig":null,"attributes":[{"value":"/ Clear the storage value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131264,"byte_end":131292,"line_start":108,"line_end":108,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131366,"byte_end":131370,"line_start":112,"line_end":112,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageValue::take","value":"pub fn take() -> Self::Query","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131307,"byte_end":131361,"line_start":111,"line_end":111,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131724,"byte_end":131730,"line_start":123,"line_end":123,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageValue::append","value":"pub fn append<Item, EncodeLikeItem>(EncodeLikeItem) where Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, T: StorageAppend<Item>","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131391,"byte_end":131445,"line_start":114,"line_end":114,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131447,"byte_end":131450,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageAppend`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131452,"byte_end":131503,"line_start":116,"line_end":116,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131505,"byte_end":131508,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131510,"byte_end":131523,"line_start":118,"line_end":118,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131525,"byte_end":131528,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage item will be overwritten","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131530,"byte_end":131615,"line_start":120,"line_end":120,"column_start":2,"column_end":87}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131617,"byte_end":131700,"line_start":121,"line_end":121,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131702,"byte_end":131719,"line_start":122,"line_end":122,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132290,"byte_end":132300,"line_start":140,"line_end":140,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageValue::decode_len","value":"pub fn decode_len() -> Option<usize> where T: StorageDecodeLength","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131862,"byte_end":131937,"line_start":129,"line_end":129,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131939,"byte_end":131942,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":131944,"byte_end":132001,"line_start":131,"line_end":131,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132003,"byte_end":132006,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132008,"byte_end":132094,"line_start":133,"line_end":133,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132096,"byte_end":132134,"line_start":134,"line_end":134,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132136,"byte_end":132139,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132141,"byte_end":132154,"line_start":136,"line_end":136,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132156,"byte_end":132159,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132161,"byte_end":132254,"line_start":138,"line_end":138,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132256,"byte_end":132285,"line_start":139,"line_end":139,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":651},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132521,"byte_end":132531,"line_start":149,"line_end":149,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":673},{"krate":0,"index":678},{"krate":0,"index":682},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":698}],"decl_id":null,"docs":" A strongly-typed map in storage.","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132394,"byte_end":132430,"line_start":145,"line_end":145,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132431,"byte_end":132434,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132435,"byte_end":132480,"line_start":147,"line_end":147,"column_start":1,"column_end":46}},{"value":"/ [`generator::StorageMap`]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132481,"byte_end":132510,"line_start":148,"line_end":148,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":654},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132605,"byte_end":132610,"line_start":151,"line_end":151,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132564,"byte_end":132598,"line_start":150,"line_end":150,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132697,"byte_end":132711,"line_start":154,"line_end":154,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageMap::hashed_key_for","value":"pub fn hashed_key_for<KeyArg: EncodeLike<K>>(KeyArg) -> Vec<u8>","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132614,"byte_end":132692,"line_start":153,"line_end":153,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132816,"byte_end":132828,"line_start":157,"line_end":157,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageMap::contains_key","value":"pub fn contains_key<KeyArg: EncodeLike<K>>(KeyArg) -> bool","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132762,"byte_end":132811,"line_start":156,"line_end":156,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132943,"byte_end":132946,"line_start":160,"line_end":160,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageMap::get","value":"pub fn get<KeyArg: EncodeLike<K>>(KeyArg) -> Self::Query","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":132876,"byte_end":132938,"line_start":159,"line_end":159,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133038,"byte_end":133042,"line_start":163,"line_end":163,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageMap::swap","value":"pub fn swap<KeyArg1: EncodeLike<K>, KeyArg2: EncodeLike<K>>(KeyArg1, KeyArg2)","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133001,"byte_end":133033,"line_start":162,"line_end":162,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133196,"byte_end":133202,"line_start":166,"line_end":166,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageMap::insert","value":"pub fn insert<KeyArg: EncodeLike<K>, ValArg: EncodeLike<V>>(KeyArg, ValArg)","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133124,"byte_end":133191,"line_start":165,"line_end":165,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133316,"byte_end":133322,"line_start":169,"line_end":169,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageMap::remove","value":"pub fn remove<KeyArg: EncodeLike<K>>(KeyArg)","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133278,"byte_end":133311,"line_start":168,"line_end":168,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133400,"byte_end":133406,"line_start":172,"line_end":172,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageMap::mutate","value":"pub fn mutate<KeyArg: EncodeLike<K>, R, F: FnOnce(&mut Self::Query) ->\n              R>(KeyArg, F) -> R","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133362,"byte_end":133395,"line_start":171,"line_end":171,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133554,"byte_end":133564,"line_start":175,"line_end":175,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageMap::try_mutate","value":"pub fn try_mutate<KeyArg: EncodeLike<K>, R, E, F: FnOnce(&mut Self::Query) ->\n                  Result<R, E>>(KeyArg, F) -> Result<R, E>","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133494,"byte_end":133549,"line_start":174,"line_end":174,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133764,"byte_end":133777,"line_start":181,"line_end":181,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageMap::mutate_exists","value":"pub fn mutate_exists<KeyArg: EncodeLike<K>, R, F: FnOnce(&mut Option<V>) ->\n                     R>(KeyArg, F) -> R","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Mutate the value under a key. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133685,"byte_end":133759,"line_start":180,"line_end":180,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133964,"byte_end":133981,"line_start":184,"line_end":184,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageMap::try_mutate_exists","value":"pub fn try_mutate_exists<KeyArg: EncodeLike<K>, R, E,\n                         F: FnOnce(&mut Option<V>) -> Result<R, E>>(KeyArg, F)\n-> Result<R, E>","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":133863,"byte_end":133959,"line_start":183,"line_end":183,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134136,"byte_end":134140,"line_start":190,"line_end":190,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageMap::take","value":"pub fn take<KeyArg: EncodeLike<K>>(KeyArg) -> Self::Query","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134100,"byte_end":134131,"line_start":189,"line_end":189,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134528,"byte_end":134534,"line_start":201,"line_end":201,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageMap::append","value":"pub fn append<Item, EncodeLikeItem,\n              EncodeLikeKey>(EncodeLikeKey, EncodeLikeItem) where\nEncodeLikeKey: EncodeLike<K>, Item: Encode, EncodeLikeItem: EncodeLike<Item>,\nV: StorageAppend<Item>","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134195,"byte_end":134250,"line_start":192,"line_end":192,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134252,"byte_end":134255,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134257,"byte_end":134312,"line_start":194,"line_end":194,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134314,"byte_end":134317,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134319,"byte_end":134332,"line_start":196,"line_end":196,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134334,"byte_end":134337,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134339,"byte_end":134419,"line_start":198,"line_end":198,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134421,"byte_end":134504,"line_start":199,"line_end":199,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134506,"byte_end":134523,"line_start":200,"line_end":200,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135188,"byte_end":135198,"line_start":220,"line_end":220,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageMap::decode_len","value":"pub fn decode_len<KeyArg: EncodeLike<K>>(KeyArg) -> Option<usize> where\nV: StorageDecodeLength","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134733,"byte_end":134817,"line_start":208,"line_end":208,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134819,"byte_end":134835,"line_start":209,"line_end":209,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134837,"byte_end":134840,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134842,"byte_end":134899,"line_start":211,"line_end":211,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134901,"byte_end":134904,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134906,"byte_end":134992,"line_start":213,"line_end":213,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":134994,"byte_end":135032,"line_start":214,"line_end":214,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135034,"byte_end":135037,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135039,"byte_end":135052,"line_start":216,"line_end":216,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135054,"byte_end":135057,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135059,"byte_end":135152,"line_start":218,"line_end":218,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135154,"byte_end":135183,"line_start":219,"line_end":219,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135525,"byte_end":135536,"line_start":229,"line_end":229,"column_start":5,"column_end":16},"name":"migrate_key","qualname":"::storage::StorageMap::migrate_key","value":"pub fn migrate_key<OldHasher: StorageHasher, KeyArg: EncodeLike<K>>(KeyArg)\n-> Option<V>","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135336,"byte_end":135426,"line_start":226,"line_end":226,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135428,"byte_end":135431,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135433,"byte_end":135520,"line_start":228,"line_end":228,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135804,"byte_end":135826,"line_start":234,"line_end":234,"column_start":5,"column_end":27},"name":"migrate_key_from_blake","qualname":"::storage::StorageMap::migrate_key_from_blake","value":"pub fn migrate_key_from_blake<KeyArg: EncodeLike<K>>(KeyArg) -> Option<V>","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135615,"byte_end":135705,"line_start":231,"line_end":231,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135707,"byte_end":135710,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135712,"byte_end":135799,"line_start":233,"line_end":233,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":700},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136034,"byte_end":136052,"line_start":240,"line_end":240,"column_start":11,"column_end":29},"name":"IterableStorageMap","qualname":"::storage::IterableStorageMap","value":"IterableStorageMap<K: FullEncode, V: FullCodec>: StorageMap<K, V>","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"decl_id":null,"docs":" A strongly-typed map in storage whose keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage whose keys and values can be iterated over.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":135944,"byte_end":136023,"line_start":239,"line_end":239,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":703},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136161,"byte_end":136169,"line_start":242,"line_end":242,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageMap::Iterator","value":"type Iterator: Iterator<Item = (K, V)>;","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key, value)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136103,"byte_end":136154,"line_start":241,"line_end":241,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136338,"byte_end":136342,"line_start":246,"line_end":246,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order. If you alter the map while doing\n this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order. If you alter the map while doing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136198,"byte_end":136292,"line_start":244,"line_end":244,"column_start":2,"column_end":96}},{"value":"/ this, you'll get undefined results.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136294,"byte_end":136333,"line_start":245,"line_end":245,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136540,"byte_end":136545,"line_start":250,"line_end":250,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order. If you\n add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order. If you","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136366,"byte_end":136458,"line_start":248,"line_end":248,"column_start":2,"column_end":94}},{"value":"/ add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136460,"byte_end":136535,"line_start":249,"line_end":249,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136840,"byte_end":136849,"line_start":256,"line_end":256,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageMap::translate","value":"pub fn translate<O: Decode, F: Fn(K, O) -> Option<V>>(F)","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136569,"byte_end":136663,"line_start":252,"line_end":252,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136665,"byte_end":136744,"line_start":253,"line_end":253,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136746,"byte_end":136749,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136751,"byte_end":136835,"line_start":255,"line_end":255,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":709},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137004,"byte_end":137028,"line_start":260,"line_end":260,"column_start":11,"column_end":35},"name":"IterableStorageDoubleMap","qualname":"::storage::IterableStorageDoubleMap","value":"IterableStorageDoubleMap<K1: FullCodec, K2: FullCodec, V: FullCodec>: StorageDoubleMap<K1, K2, V>","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721}],"decl_id":null,"docs":" A strongly-typed double map in storage whose secondary keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed double map in storage whose secondary keys and values can be iterated over.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136897,"byte_end":136993,"line_start":259,"line_end":259,"column_start":1,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":713},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137169,"byte_end":137183,"line_start":266,"line_end":266,"column_start":7,"column_end":21},"name":"PrefixIterator","qualname":"::storage::IterableStorageDoubleMap::PrefixIterator","value":"type PrefixIterator: Iterator<Item = (K2, V)>;","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key2, value)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137110,"byte_end":137162,"line_start":265,"line_end":265,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":714},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137278,"byte_end":137286,"line_start":269,"line_end":269,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageDoubleMap::Iterator","value":"type Iterator: Iterator<Item = (K1, K2, V)>;","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2, value)`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137213,"byte_end":137271,"line_start":268,"line_end":268,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137527,"byte_end":137538,"line_start":274,"line_end":274,"column_start":5,"column_end":16},"name":"iter_prefix","qualname":"::storage::IterableStorageDoubleMap::iter_prefix","value":"pub fn iter_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PrefixIterator","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` in no particular order. If you add or\n remove values whose first key is `k1` to the map while doing this, you'll get undefined\n results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` in no particular order. If you add or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137320,"byte_end":137415,"line_start":271,"line_end":271,"column_start":2,"column_end":97}},{"value":"/ remove values whose first key is `k1` to the map while doing this, you'll get undefined","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137417,"byte_end":137508,"line_start":272,"line_end":272,"column_start":2,"column_end":93}},{"value":"/ results.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137510,"byte_end":137522,"line_start":273,"line_end":273,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137810,"byte_end":137822,"line_start":279,"line_end":279,"column_start":5,"column_end":17},"name":"drain_prefix","qualname":"::storage::IterableStorageDoubleMap::drain_prefix","value":"pub fn drain_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PrefixIterator","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Remove all elements from the map with first key `k1` and iterate through them in no\n particular order. If you add elements with first key `k1` to the map while doing this,\n you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map with first key `k1` and iterate through them in no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137591,"byte_end":137678,"line_start":276,"line_end":276,"column_start":2,"column_end":89}},{"value":"/ particular order. If you add elements with first key `k1` to the map while doing this,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137680,"byte_end":137770,"line_start":277,"line_end":277,"column_start":2,"column_end":92}},{"value":"/ you'll get undefined results.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137772,"byte_end":137805,"line_start":278,"line_end":278,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138033,"byte_end":138037,"line_start":283,"line_end":283,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageDoubleMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order. If you add or remove values to\n the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order. If you add or remove values to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137875,"byte_end":137967,"line_start":281,"line_end":281,"column_start":2,"column_end":94}},{"value":"/ the map while doing this, you'll get undefined results.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137969,"byte_end":138028,"line_start":282,"line_end":282,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138235,"byte_end":138240,"line_start":287,"line_end":287,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageDoubleMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order. If you\n add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order. If you","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138061,"byte_end":138153,"line_start":285,"line_end":285,"column_start":2,"column_end":94}},{"value":"/ add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138155,"byte_end":138230,"line_start":286,"line_end":286,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138535,"byte_end":138544,"line_start":293,"line_end":293,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageDoubleMap::translate","value":"pub fn translate<O: Decode, F: Fn(K1, K2, O) -> Option<V>>(F)","parent":{"krate":0,"index":709},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138264,"byte_end":138358,"line_start":289,"line_end":289,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138360,"byte_end":138439,"line_start":290,"line_end":290,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138441,"byte_end":138444,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138446,"byte_end":138530,"line_start":292,"line_end":292,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":724},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138850,"byte_end":138866,"line_start":303,"line_end":303,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":746},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":762},{"krate":0,"index":768},{"krate":0,"index":773},{"krate":0,"index":779},{"krate":0,"index":784},{"krate":0,"index":787}],"decl_id":null,"docs":" An implementation of a map with a two keys.","sig":null,"attributes":[{"value":"/ An implementation of a map with a two keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138597,"byte_end":138644,"line_start":296,"line_end":296,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138645,"byte_end":138648,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ It provides an important ability to efficiently remove all entries","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138649,"byte_end":138719,"line_start":298,"line_end":298,"column_start":1,"column_end":71}},{"value":"/ that have a common first key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138720,"byte_end":138753,"line_start":299,"line_end":299,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138754,"byte_end":138757,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138758,"byte_end":138803,"line_start":301,"line_end":301,"column_start":1,"column_end":46}},{"value":"/ [`generator::StorageDoubleMap`]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138804,"byte_end":138839,"line_start":302,"line_end":302,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":728},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138958,"byte_end":138963,"line_start":305,"line_end":305,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138916,"byte_end":138951,"line_start":304,"line_end":304,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139050,"byte_end":139064,"line_start":308,"line_end":308,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageDoubleMap::hashed_key_for","value":"pub fn hashed_key_for<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":138967,"byte_end":139045,"line_start":307,"line_end":307,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139225,"byte_end":139237,"line_start":314,"line_end":314,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageDoubleMap::contains_key","value":"pub fn contains_key<KArg1, KArg2>(KArg1, KArg2) -> bool where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139171,"byte_end":139220,"line_start":313,"line_end":313,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139415,"byte_end":139418,"line_start":320,"line_end":320,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageDoubleMap::get","value":"pub fn get<KArg1, KArg2>(KArg1, KArg2) -> Self::Query where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the double map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the double map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139341,"byte_end":139410,"line_start":319,"line_end":319,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139588,"byte_end":139592,"line_start":326,"line_end":326,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageDoubleMap::take","value":"pub fn take<KArg1, KArg2>(KArg1, KArg2) -> Self::Query where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139529,"byte_end":139583,"line_start":325,"line_end":325,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139745,"byte_end":139749,"line_start":332,"line_end":332,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageDoubleMap::swap","value":"pub fn swap<XKArg1, XKArg2, YKArg1, YKArg2>(XKArg1, XKArg2, YKArg1, YKArg2)\nwhere XKArg1: EncodeLike<K1>, XKArg2: EncodeLike<K2>, YKArg1: EncodeLike<K1>,\nYKArg2: EncodeLike<K2>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139703,"byte_end":139740,"line_start":331,"line_end":331,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140031,"byte_end":140037,"line_start":340,"line_end":340,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageDoubleMap::insert","value":"pub fn insert<KArg1, KArg2, VArg>(KArg1, KArg2, VArg) where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, VArg: EncodeLike<V>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the double map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the double map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":139951,"byte_end":140026,"line_start":339,"line_end":339,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140220,"byte_end":140226,"line_start":347,"line_end":347,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageDoubleMap::remove","value":"pub fn remove<KArg1, KArg2>(KArg1, KArg2) where KArg1: EncodeLike<K1>,\nKArg2: EncodeLike<K2>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140173,"byte_end":140215,"line_start":346,"line_end":346,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140369,"byte_end":140382,"line_start":353,"line_end":353,"column_start":5,"column_end":18},"name":"remove_prefix","qualname":"::storage::StorageDoubleMap::remove_prefix","value":"pub fn remove_prefix<KArg1: ?Sized>(KArg1) where KArg1: EncodeLike<K1>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140322,"byte_end":140364,"line_start":352,"line_end":352,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140495,"byte_end":140513,"line_start":356,"line_end":356,"column_start":5,"column_end":23},"name":"iter_prefix_values","qualname":"::storage::StorageDoubleMap::iter_prefix_values","value":"pub fn iter_prefix_values<KArg1: ?Sized>(KArg1) -> PrefixIterator<V> where\nKArg1: EncodeLike<K1>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140441,"byte_end":140490,"line_start":355,"line_end":355,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140642,"byte_end":140648,"line_start":360,"line_end":360,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageDoubleMap::mutate","value":"pub fn mutate<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, F: FnOnce(&mut Self::Query) -> R","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140595,"byte_end":140637,"line_start":359,"line_end":359,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140874,"byte_end":140884,"line_start":367,"line_end":367,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageDoubleMap::try_mutate","value":"pub fn try_mutate<KArg1, KArg2, R, E, F>(KArg1, KArg2, F) -> Result<R, E>\nwhere KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>,\nF: FnOnce(&mut Self::Query) -> Result<R, E>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":140797,"byte_end":140869,"line_start":366,"line_end":366,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141146,"byte_end":141159,"line_start":374,"line_end":374,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageDoubleMap::mutate_exists","value":"pub fn mutate_exists<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, F: FnOnce(&mut Option<V>) -> R","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141058,"byte_end":141141,"line_start":373,"line_end":373,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141407,"byte_end":141424,"line_start":381,"line_end":381,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageDoubleMap::try_mutate_exists","value":"pub fn try_mutate_exists<KArg1, KArg2, R, E, F>(KArg1, KArg2, F)\n-> Result<R, E> where KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>,\nF: FnOnce(&mut Option<V>) -> Result<R, E>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141306,"byte_end":141402,"line_start":380,"line_end":380,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141924,"byte_end":141930,"line_start":396,"line_end":396,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageDoubleMap::append","value":"pub fn append<Item, EncodeLikeItem, KArg1,\n              KArg2>(KArg1, KArg2, EncodeLikeItem) where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, V: StorageAppend<Item>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141596,"byte_end":141650,"line_start":387,"line_end":387,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141652,"byte_end":141655,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageAppend`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141657,"byte_end":141708,"line_start":389,"line_end":389,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141710,"byte_end":141713,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141715,"byte_end":141728,"line_start":391,"line_end":391,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141730,"byte_end":141733,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141735,"byte_end":141815,"line_start":393,"line_end":393,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141817,"byte_end":141900,"line_start":394,"line_end":394,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":141902,"byte_end":141919,"line_start":395,"line_end":395,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142624,"byte_end":142634,"line_start":419,"line_end":419,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDoubleMap::decode_len","value":"pub fn decode_len<KArg1, KArg2>(KArg1, KArg2) -> Option<usize> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, V: StorageDecodeLength","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142157,"byte_end":142241,"line_start":407,"line_end":407,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142243,"byte_end":142271,"line_start":408,"line_end":408,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142273,"byte_end":142276,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142278,"byte_end":142335,"line_start":410,"line_end":410,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142337,"byte_end":142340,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142342,"byte_end":142428,"line_start":412,"line_end":412,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142430,"byte_end":142468,"line_start":413,"line_end":413,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142470,"byte_end":142473,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142475,"byte_end":142488,"line_start":415,"line_end":415,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142490,"byte_end":142493,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142495,"byte_end":142588,"line_start":417,"line_end":417,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142590,"byte_end":142619,"line_start":418,"line_end":418,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143061,"byte_end":143073,"line_start":432,"line_end":432,"column_start":5,"column_end":17},"name":"migrate_keys","qualname":"::storage::StorageDoubleMap::migrate_keys","value":"pub fn migrate_keys<OldHasher1: StorageHasher, OldHasher2: StorageHasher,\n                    KeyArg1: EncodeLike<K1>,\n                    KeyArg2: EncodeLike<K2>>(KeyArg1, KeyArg2) -> Option<V>","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and\n `OldHasher2` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142838,"byte_end":142920,"line_start":428,"line_end":428,"column_start":2,"column_end":84}},{"value":"/ `OldHasher2` to the current hashers.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142922,"byte_end":142962,"line_start":429,"line_end":429,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142964,"byte_end":142967,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":142969,"byte_end":143056,"line_start":431,"line_end":431,"column_start":2,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":792},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143390,"byte_end":143404,"line_start":443,"line_end":443,"column_start":12,"column_end":26},"name":"PrefixIterator","qualname":"::storage::PrefixIterator","value":"PrefixIterator {  }","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797}],"decl_id":null,"docs":" Iterate over a prefix and decode raw_key and raw_value into `T`.","sig":null,"attributes":[{"value":"/ Iterate over a prefix and decode raw_key and raw_value into `T`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143237,"byte_end":143305,"line_start":440,"line_end":440,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143306,"byte_end":143309,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ If any decoding fails it skips it and continues to the next key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143310,"byte_end":143378,"line_start":442,"line_end":442,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":803},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144985,"byte_end":145003,"line_start":502,"line_end":502,"column_start":11,"column_end":29},"name":"StoragePrefixedMap","qualname":"::storage::StoragePrefixedMap","value":"StoragePrefixedMap<Value: FullCodec>","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":813}],"decl_id":null,"docs":" Trait for maps that store all its value after a unique prefix.","sig":null,"attributes":[{"value":"/ Trait for maps that store all its value after a unique prefix.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144789,"byte_end":144855,"line_start":496,"line_end":496,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144856,"byte_end":144859,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/ By default the final prefix is:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144860,"byte_end":144895,"line_start":498,"line_end":498,"column_start":1,"column_end":36}},{"value":"/ ```nocompile","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144896,"byte_end":144912,"line_start":499,"line_end":499,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144913,"byte_end":144966,"line_start":500,"line_end":500,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":144967,"byte_end":144974,"line_start":501,"line_end":501,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145079,"byte_end":145092,"line_start":504,"line_end":504,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::StoragePrefixedMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145025,"byte_end":145074,"line_start":503,"line_end":503,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145170,"byte_end":145184,"line_start":507,"line_end":507,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::StoragePrefixedMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145115,"byte_end":145165,"line_start":506,"line_end":506,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145257,"byte_end":145269,"line_start":510,"line_end":510,"column_start":5,"column_end":17},"name":"final_prefix","qualname":"::storage::StoragePrefixedMap::final_prefix","value":"pub fn final_prefix() -> [u8; ]","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":" Final full prefix that prefixes all keys.\n","sig":null,"attributes":[{"value":"/ Final full prefix that prefixes all keys.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145207,"byte_end":145252,"line_start":509,"line_end":509,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145529,"byte_end":145539,"line_start":518,"line_end":518,"column_start":5,"column_end":15},"name":"remove_all","qualname":"::storage::StoragePrefixedMap::remove_all","value":"pub fn remove_all()","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145488,"byte_end":145524,"line_start":517,"line_end":517,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145740,"byte_end":145751,"line_start":525,"line_end":525,"column_start":5,"column_end":16},"name":"iter_values","qualname":"::storage::StoragePrefixedMap::iter_values","value":"pub fn iter_values() -> PrefixIterator<Value>","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145603,"byte_end":145642,"line_start":522,"line_end":522,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145644,"byte_end":145647,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode becaues storage is corrupted then it is skipped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145649,"byte_end":145735,"line_start":524,"line_end":524,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146574,"byte_end":146590,"line_start":548,"line_end":548,"column_start":5,"column_end":21},"name":"translate_values","qualname":"::storage::StoragePrefixedMap::translate_values","value":"pub fn translate_values<OldValue: Decode, F: Fn(OldValue) -> Option<Value>>(F)","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":145994,"byte_end":146088,"line_start":535,"line_end":535,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146090,"byte_end":146169,"line_start":536,"line_end":536,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146171,"byte_end":146174,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146176,"byte_end":146260,"line_start":538,"line_end":538,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146262,"byte_end":146265,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146267,"byte_end":146280,"line_start":540,"line_end":540,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146282,"byte_end":146285,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146287,"byte_end":146380,"line_start":542,"line_end":542,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146382,"byte_end":146454,"line_start":543,"line_end":543,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146456,"byte_end":146459,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146461,"byte_end":146472,"line_start":545,"line_end":545,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146474,"byte_end":146477,"line_start":546,"line_end":546,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":146479,"byte_end":146569,"line_start":547,"line_end":547,"column_start":2,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":817},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147384,"byte_end":147397,"line_start":576,"line_end":576,"column_start":11,"column_end":24},"name":"StorageAppend","qualname":"::storage::StorageAppend","value":"StorageAppend<Item: Encode>: private::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that will be implemented for types that support the `storage::append` api.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support the `storage::append` api.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147252,"byte_end":147343,"line_start":573,"line_end":573,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147344,"byte_end":147347,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147348,"byte_end":147373,"line_start":575,"line_end":575,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":819},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147705,"byte_end":147724,"line_start":583,"line_end":583,"column_start":11,"column_end":30},"name":"StorageDecodeLength","qualname":"::storage::StorageDecodeLength","value":"StorageDecodeLength: private::Sealed + codec::DecodeLength","parent":null,"children":[{"krate":0,"index":820}],"decl_id":null,"docs":" Marker trait that will be implemented for types that support to decode their length in an\n effificent way. It is expected that the length is at the beginning of the encoded object\n and that the length is a `Compact<u32>`.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support to decode their length in an","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147433,"byte_end":147526,"line_start":578,"line_end":578,"column_start":1,"column_end":94}},{"value":"/ effificent way. It is expected that the length is at the beginning of the encoded object","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147527,"byte_end":147619,"line_start":579,"line_end":579,"column_start":1,"column_end":93}},{"value":"/ and that the length is a `Compact<u32>`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147620,"byte_end":147664,"line_start":580,"line_end":580,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147665,"byte_end":147668,"line_start":581,"line_end":581,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147669,"byte_end":147694,"line_start":582,"line_end":582,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148029,"byte_end":148039,"line_start":590,"line_end":590,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDecodeLength::decode_len","value":"pub fn decode_len(&[u8]) -> Option<usize>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Decode the length of the storage value at `key`.","sig":null,"attributes":[{"value":"/ Decode the length of the storage value at `key`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147767,"byte_end":147819,"line_start":584,"line_end":584,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147821,"byte_end":147824,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ This function assumes that the length is at the beginning of the encoded object","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147826,"byte_end":147909,"line_start":586,"line_end":586,"column_start":2,"column_end":85}},{"value":"/ and is a `Compact<u32>`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147911,"byte_end":147939,"line_start":587,"line_end":587,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147941,"byte_end":147944,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the storage value does not exist or the decoding failed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147946,"byte_end":148024,"line_start":589,"line_end":589,"column_start":2,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":824},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148465,"byte_end":148471,"line_start":604,"line_end":604,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::storage::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":844},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211550,"byte_end":211558,"line_start":25,"line_end":25,"column_start":11,"column_end":19},"name":"Hashable","qualname":"::hash::Hashable","value":"Hashable: Sized","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":855}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211572,"byte_end":211582,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"name":"blake2_128","qualname":"::hash::Hashable::blake2_128","value":"pub fn blake2_128(&Self) -> [u8; ]","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211607,"byte_end":211617,"line_start":27,"line_end":27,"column_start":5,"column_end":15},"name":"blake2_256","qualname":"::hash::Hashable::blake2_256","value":"pub fn blake2_256(&Self) -> [u8; ]","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211642,"byte_end":211659,"line_start":28,"line_end":28,"column_start":5,"column_end":22},"name":"blake2_128_concat","qualname":"::hash::Hashable::blake2_128_concat","value":"pub fn blake2_128_concat(&Self) -> Vec<u8>","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211683,"byte_end":211691,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"twox_128","qualname":"::hash::Hashable::twox_128","value":"pub fn twox_128(&Self) -> [u8; ]","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211716,"byte_end":211724,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"twox_256","qualname":"::hash::Hashable::twox_256","value":"pub fn twox_256(&Self) -> [u8; ]","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211749,"byte_end":211763,"line_start":31,"line_end":31,"column_start":5,"column_end":19},"name":"twox_64_concat","qualname":"::hash::Hashable::twox_64_concat","value":"pub fn twox_64_concat(&Self) -> Vec<u8>","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211787,"byte_end":211795,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"identity","qualname":"::hash::Hashable::identity","value":"pub fn identity(&Self) -> Vec<u8>","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":869},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212418,"byte_end":212431,"line_start":58,"line_end":58,"column_start":11,"column_end":24},"name":"StorageHasher","qualname":"::hash::StorageHasher","value":"StorageHasher: 'static","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.\n","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212355,"byte_end":212407,"line_start":57,"line_end":57,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":870},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212449,"byte_end":212455,"line_start":59,"line_end":59,"column_start":7,"column_end":13},"name":"Output","qualname":"::hash::StorageHasher::Output","value":"type Output: AsRef<[u8]>;","parent":{"krate":0,"index":869},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212474,"byte_end":212478,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"hash","qualname":"::hash::StorageHasher::hash","value":"pub fn hash(&[u8]) -> Self::Output","parent":{"krate":0,"index":869},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":872},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212641,"byte_end":212664,"line_start":66,"line_end":66,"column_start":11,"column_end":34},"name":"ReversibleStorageHasher","qualname":"::hash::ReversibleStorageHasher","value":"ReversibleStorageHasher: StorageHasher","parent":null,"children":[{"krate":0,"index":873}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212509,"byte_end":212561,"line_start":63,"line_end":63,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212562,"byte_end":212565,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Reversible hasher store the encoded key after the hash part.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212566,"byte_end":212630,"line_start":65,"line_end":65,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212804,"byte_end":212811,"line_start":70,"line_end":70,"column_start":5,"column_end":12},"name":"reverse","qualname":"::hash::ReversibleStorageHasher::reverse","value":"pub fn reverse(&[u8]) -> &[u8]","parent":{"krate":0,"index":872},"children":[],"decl_id":null,"docs":" Split the hash part out of the input.","sig":null,"attributes":[{"value":"/ Split the hash part out of the input.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212683,"byte_end":212724,"line_start":67,"line_end":67,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212726,"byte_end":212729,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ I.e. for input `&[hash ++ key ++ some]` returns `&[key ++ some]`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212731,"byte_end":212799,"line_start":69,"line_end":69,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212874,"byte_end":212882,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"Identity","qualname":"::hash::Identity","value":"","parent":null,"children":[],"decl_id":null,"docs":" Store the key directly.\n","sig":null,"attributes":[{"value":"/ Store the key directly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212835,"byte_end":212862,"line_start":73,"line_end":73,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":881},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213144,"byte_end":213156,"line_start":88,"line_end":88,"column_start":12,"column_end":24},"name":"Twox64Concat","qualname":"::hash::Twox64Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(twox64(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(twox64(key), key)`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213079,"byte_end":213132,"line_start":87,"line_end":87,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":888},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213613,"byte_end":213629,"line_start":110,"line_end":110,"column_start":12,"column_end":28},"name":"Blake2_128Concat","qualname":"::hash::Blake2_128Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(blake2_128(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(blake2_128(key), key)`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213544,"byte_end":213601,"line_start":109,"line_end":109,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":895},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214079,"byte_end":214089,"line_start":132,"line_end":132,"column_start":12,"column_end":22},"name":"Blake2_128","qualname":"::hash::Blake2_128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 128","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214030,"byte_end":214067,"line_start":131,"line_end":131,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":902},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214256,"byte_end":214266,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"Blake2_256","qualname":"::hash::Blake2_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 256","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214207,"byte_end":214244,"line_start":140,"line_end":140,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":909},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214431,"byte_end":214438,"line_start":150,"line_end":150,"column_start":12,"column_end":19},"name":"Twox128","qualname":"::hash::Twox128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 128","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214384,"byte_end":214419,"line_start":149,"line_end":149,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":916},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214598,"byte_end":214605,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"Twox256","qualname":"::hash::Twox256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 256","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214551,"byte_end":214586,"line_start":158,"line_end":158,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":923},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"event","qualname":"::event","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":6327}],"decl_id":null,"docs":" Macros that define an Event types. Events can be used to easily report changes or conditions\n in your runtime to external entities like users, chain explorers, or dApps.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1459,"byte_end":1471,"line_start":59,"line_end":59,"column_start":1,"column_end":13}},{"value":"/ Macros that define an Event types. Events can be used to easily report changes or conditions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":215645,"byte_end":215741,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ in your runtime to external entities like users, chain explorers, or dApps.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/event.rs","byte_start":215742,"byte_end":215821,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":934},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"metadata","qualname":"::metadata","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/metadata.rs","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":6331},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":6339},{"krate":0,"index":942},{"krate":0,"index":6341},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1487,"byte_end":1499,"line_start":61,"line_end":61,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":956},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inherent","qualname":"::inherent","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/inherent.rs","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1518,"byte_end":1530,"line_start":63,"line_end":63,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":967},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unsigned","qualname":"::unsigned","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/unsigned.rs","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1549,"byte_end":1561,"line_start":65,"line_end":65,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":975},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":6383},{"krate":0,"index":978},{"krate":0,"index":6385},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982}],"decl_id":null,"docs":" Macro for declaring a module error.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1580,"byte_end":1592,"line_start":67,"line_end":67,"column_start":1,"column_end":13}},{"value":"/ Macro for declaring a module error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/error.rs","byte_start":263873,"byte_end":263912,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":984},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":6395},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":6399},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":6405},{"krate":0,"index":995},{"krate":0,"index":6407},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":6433},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1037},{"krate":0,"index":1042},{"krate":0,"index":1048},{"krate":0,"index":1053},{"krate":0,"index":1057},{"krate":0,"index":1061},{"krate":0,"index":1065},{"krate":0,"index":1069},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1682},{"krate":0,"index":1687},{"krate":0,"index":1693},{"krate":0,"index":1700},{"krate":0,"index":1708},{"krate":0,"index":1717},{"krate":0,"index":1727},{"krate":0,"index":1738},{"krate":0,"index":1750},{"krate":0,"index":1763},{"krate":0,"index":1777},{"krate":0,"index":1792},{"krate":0,"index":1808},{"krate":0,"index":1825},{"krate":0,"index":1843},{"krate":0,"index":1862},{"krate":0,"index":1882},{"krate":0,"index":1903},{"krate":0,"index":1925},{"krate":0,"index":1948},{"krate":0,"index":1972},{"krate":0,"index":1997},{"krate":0,"index":2023},{"krate":0,"index":2050},{"krate":0,"index":2078},{"krate":0,"index":2107},{"krate":0,"index":2137},{"krate":0,"index":2168},{"krate":0,"index":1074},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1106},{"krate":0,"index":1130},{"krate":0,"index":1134},{"krate":0,"index":1138},{"krate":0,"index":1142},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1151},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2206},{"krate":0,"index":2210},{"krate":0,"index":2215},{"krate":0,"index":2221},{"krate":0,"index":2228},{"krate":0,"index":2236},{"krate":0,"index":2245},{"krate":0,"index":2255},{"krate":0,"index":2266},{"krate":0,"index":2278},{"krate":0,"index":2291},{"krate":0,"index":2305},{"krate":0,"index":2320},{"krate":0,"index":2336},{"krate":0,"index":2353},{"krate":0,"index":2371},{"krate":0,"index":2390},{"krate":0,"index":2410},{"krate":0,"index":2431},{"krate":0,"index":2453},{"krate":0,"index":2476},{"krate":0,"index":2500},{"krate":0,"index":2525},{"krate":0,"index":2551},{"krate":0,"index":2578},{"krate":0,"index":2606},{"krate":0,"index":2635},{"krate":0,"index":2665},{"krate":0,"index":2696},{"krate":0,"index":2728},{"krate":0,"index":2761},{"krate":0,"index":2764},{"krate":0,"index":2767},{"krate":0,"index":2771},{"krate":0,"index":2776},{"krate":0,"index":2782},{"krate":0,"index":2789},{"krate":0,"index":2797},{"krate":0,"index":2806},{"krate":0,"index":2816},{"krate":0,"index":2827},{"krate":0,"index":2839},{"krate":0,"index":2852},{"krate":0,"index":2866},{"krate":0,"index":2881},{"krate":0,"index":2897},{"krate":0,"index":2914},{"krate":0,"index":2932},{"krate":0,"index":2951},{"krate":0,"index":2971},{"krate":0,"index":2992},{"krate":0,"index":3014},{"krate":0,"index":3037},{"krate":0,"index":3061},{"krate":0,"index":3086},{"krate":0,"index":3112},{"krate":0,"index":3139},{"krate":0,"index":3167},{"krate":0,"index":3196},{"krate":0,"index":3226},{"krate":0,"index":3257},{"krate":0,"index":3289},{"krate":0,"index":1171},{"krate":0,"index":1176},{"krate":0,"index":1181},{"krate":0,"index":1185},{"krate":0,"index":1191},{"krate":0,"index":1197},{"krate":0,"index":1205},{"krate":0,"index":3322},{"krate":0,"index":3335},{"krate":0,"index":3333},{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3327},{"krate":0,"index":3328},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1227},{"krate":0,"index":1236},{"krate":0,"index":1243},{"krate":0,"index":1252},{"krate":0,"index":1260},{"krate":0,"index":3336},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3357},{"krate":0,"index":3358},{"krate":0,"index":3355},{"krate":0,"index":3354},{"krate":0,"index":3348},{"krate":0,"index":3343},{"krate":0,"index":3341},{"krate":0,"index":1283},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1300},{"krate":0,"index":3363},{"krate":0,"index":3407},{"krate":0,"index":3405},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3399},{"krate":0,"index":3400},{"krate":0,"index":3397},{"krate":0,"index":3395},{"krate":0,"index":3393},{"krate":0,"index":3390},{"krate":0,"index":3384},{"krate":0,"index":3379},{"krate":0,"index":3408},{"krate":0,"index":3447},{"krate":0,"index":3445},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3436},{"krate":0,"index":3430},{"krate":0,"index":3428},{"krate":0,"index":3425},{"krate":0,"index":3415},{"krate":0,"index":3410},{"krate":0,"index":3448},{"krate":0,"index":3463},{"krate":0,"index":3465},{"krate":0,"index":3468},{"krate":0,"index":3471},{"krate":0,"index":3474},{"krate":0,"index":3477},{"krate":0,"index":3480},{"krate":0,"index":3483},{"krate":0,"index":3486},{"krate":0,"index":3489},{"krate":0,"index":3492},{"krate":0,"index":3495},{"krate":0,"index":3498},{"krate":0,"index":3501},{"krate":0,"index":3504},{"krate":0,"index":3507},{"krate":0,"index":3509},{"krate":0,"index":3511},{"krate":0,"index":3513},{"krate":0,"index":3515},{"krate":0,"index":3517},{"krate":0,"index":3519},{"krate":0,"index":3522},{"krate":0,"index":1307},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1314},{"krate":0,"index":1321},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1342},{"krate":0,"index":1345},{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1356},{"krate":0,"index":3525},{"krate":0,"index":3539},{"krate":0,"index":3536},{"krate":0,"index":3537},{"krate":0,"index":3532},{"krate":0,"index":3533},{"krate":0,"index":3530},{"krate":0,"index":3528},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":3541},{"krate":0,"index":3544},{"krate":0,"index":3547},{"krate":0,"index":3551},{"krate":0,"index":3556},{"krate":0,"index":3562},{"krate":0,"index":3569},{"krate":0,"index":3577},{"krate":0,"index":3586},{"krate":0,"index":3596},{"krate":0,"index":3607},{"krate":0,"index":3619},{"krate":0,"index":3632},{"krate":0,"index":3646},{"krate":0,"index":3661},{"krate":0,"index":3677},{"krate":0,"index":3694},{"krate":0,"index":3712},{"krate":0,"index":3731},{"krate":0,"index":3751},{"krate":0,"index":3772},{"krate":0,"index":3794},{"krate":0,"index":3817},{"krate":0,"index":3841},{"krate":0,"index":3866},{"krate":0,"index":3892},{"krate":0,"index":3919},{"krate":0,"index":3947},{"krate":0,"index":3976},{"krate":0,"index":4006},{"krate":0,"index":4037},{"krate":0,"index":4069},{"krate":0,"index":1368},{"krate":0,"index":4102},{"krate":0,"index":4105},{"krate":0,"index":4109},{"krate":0,"index":4114},{"krate":0,"index":4120},{"krate":0,"index":4127},{"krate":0,"index":4135},{"krate":0,"index":4144},{"krate":0,"index":4154},{"krate":0,"index":4165},{"krate":0,"index":4177},{"krate":0,"index":4190},{"krate":0,"index":4204},{"krate":0,"index":4219},{"krate":0,"index":4235},{"krate":0,"index":4252},{"krate":0,"index":4270},{"krate":0,"index":4289},{"krate":0,"index":4309},{"krate":0,"index":4330},{"krate":0,"index":4352},{"krate":0,"index":4375},{"krate":0,"index":4399},{"krate":0,"index":4424},{"krate":0,"index":4450},{"krate":0,"index":4477},{"krate":0,"index":4505},{"krate":0,"index":4534},{"krate":0,"index":4564},{"krate":0,"index":4595},{"krate":0,"index":4627},{"krate":0,"index":1371},{"krate":0,"index":4660},{"krate":0,"index":4662},{"krate":0,"index":4665},{"krate":0,"index":4669},{"krate":0,"index":4674},{"krate":0,"index":4680},{"krate":0,"index":4687},{"krate":0,"index":4695},{"krate":0,"index":4704},{"krate":0,"index":4714},{"krate":0,"index":4725},{"krate":0,"index":4737},{"krate":0,"index":4750},{"krate":0,"index":4764},{"krate":0,"index":4779},{"krate":0,"index":4795},{"krate":0,"index":4812},{"krate":0,"index":4830},{"krate":0,"index":4849},{"krate":0,"index":4869},{"krate":0,"index":4890},{"krate":0,"index":4912},{"krate":0,"index":4935},{"krate":0,"index":4959},{"krate":0,"index":4984},{"krate":0,"index":5010},{"krate":0,"index":5037},{"krate":0,"index":5065},{"krate":0,"index":5094},{"krate":0,"index":5124},{"krate":0,"index":5155},{"krate":0,"index":5187},{"krate":0,"index":5190},{"krate":0,"index":5193},{"krate":0,"index":5197},{"krate":0,"index":5202},{"krate":0,"index":5208},{"krate":0,"index":5215},{"krate":0,"index":5223},{"krate":0,"index":5232},{"krate":0,"index":5242},{"krate":0,"index":5253},{"krate":0,"index":5265},{"krate":0,"index":5278},{"krate":0,"index":5292},{"krate":0,"index":5307},{"krate":0,"index":5323},{"krate":0,"index":5340},{"krate":0,"index":5358},{"krate":0,"index":5377},{"krate":0,"index":5397},{"krate":0,"index":5418},{"krate":0,"index":5440},{"krate":0,"index":5463},{"krate":0,"index":5487},{"krate":0,"index":5512},{"krate":0,"index":5538},{"krate":0,"index":5565},{"krate":0,"index":5593},{"krate":0,"index":5622},{"krate":0,"index":5652},{"krate":0,"index":5683},{"krate":0,"index":5715},{"krate":0,"index":1373},{"krate":0,"index":1395},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1414},{"krate":0,"index":1420},{"krate":0,"index":1426}],"decl_id":null,"docs":" Traits for FRAME.","sig":null,"attributes":[{"value":"/ Traits for FRAME.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":269299,"byte_end":269320,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":269321,"byte_end":269324,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ NOTE: If you're looking for `parameter_types`, it has moved in to the top-level module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":269325,"byte_end":269416,"line_start":20,"line_end":20,"column_start":1,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":1023},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270154,"byte_end":270160,"line_start":41,"line_end":41,"column_start":11,"column_end":17},"name":"Filter","qualname":"::traits::Filter","value":"Filter<T>","parent":null,"children":[{"krate":0,"index":1025}],"decl_id":null,"docs":" Simple trait for providing a filter over a reference to some type.\n","sig":null,"attributes":[{"value":"/ Simple trait for providing a filter over a reference to some type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270073,"byte_end":270143,"line_start":40,"line_end":40,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270264,"byte_end":270270,"line_start":43,"line_end":43,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::Filter::filter","value":"pub fn filter(&T) -> bool","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":" Determine if a given value should be allowed through the filter (returns `true`) or not.\n","sig":null,"attributes":[{"value":"/ Determine if a given value should be allowed through the filter (returns `true`) or not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270167,"byte_end":270259,"line_start":42,"line_end":42,"column_start":2,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1029},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270412,"byte_end":270423,"line_start":51,"line_end":51,"column_start":11,"column_end":22},"name":"FilterStack","qualname":"::traits::FilterStack","value":"FilterStack<T>: Filter<T>","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036}],"decl_id":null,"docs":" Trait to add a constraint onto the filter.\n","sig":null,"attributes":[{"value":"/ Trait to add a constraint onto the filter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270355,"byte_end":270401,"line_start":50,"line_end":50,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1031},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270487,"byte_end":270492,"line_start":53,"line_end":53,"column_start":7,"column_end":12},"name":"Stack","qualname":"::traits::FilterStack::Stack","value":"type Stack;","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" The type used to archive the stack.\n","sig":null,"attributes":[{"value":"/ The type used to archive the stack.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270441,"byte_end":270480,"line_start":52,"line_end":52,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270544,"byte_end":270548,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"push","qualname":"::traits::FilterStack::push","value":"pub fn push<impl Fn(&T) -> bool + 'static: Fn(&T) -> bool +\n            'static>(impl Fn(&T) -> bool + 'static)","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Add a new `constraint` onto the filter.\n","sig":null,"attributes":[{"value":"/ Add a new `constraint` onto the filter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270496,"byte_end":270539,"line_start":55,"line_end":55,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270685,"byte_end":270688,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"pop","qualname":"::traits::FilterStack::pop","value":"pub fn pop()","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Removes the most recently pushed, and not-yet-popped, constraint from the filter.\n","sig":null,"attributes":[{"value":"/ Removes the most recently pushed, and not-yet-popped, constraint from the filter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270595,"byte_end":270680,"line_start":58,"line_end":58,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270778,"byte_end":270782,"line_start":62,"line_end":62,"column_start":5,"column_end":9},"name":"take","qualname":"::traits::FilterStack::take","value":"pub fn take() -> Self::Stack","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Clear the filter, returning a value that may be used later to `restore` it.\n","sig":null,"attributes":[{"value":"/ Clear the filter, returning a value that may be used later to `restore` it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270694,"byte_end":270773,"line_start":61,"line_end":61,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270864,"byte_end":270871,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"restore","qualname":"::traits::FilterStack::restore","value":"pub fn restore(Self::Stack)","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Restore the filter from a previous `take` operation.\n","sig":null,"attributes":[{"value":"/ Restore the filter from a previous `take` operation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270803,"byte_end":270859,"line_start":64,"line_end":64,"column_start":2,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1037},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270992,"byte_end":271008,"line_start":69,"line_end":69,"column_start":12,"column_end":28},"name":"FilterStackGuard","qualname":"::traits::FilterStackGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Guard type for pushing a constraint to a `FilterStack` and popping when dropped.\n","sig":null,"attributes":[{"value":"/ Guard type for pushing a constraint to a `FilterStack` and popping when dropped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270896,"byte_end":270980,"line_start":68,"line_end":68,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271176,"byte_end":271192,"line_start":73,"line_end":73,"column_start":12,"column_end":28},"name":"ClearFilterGuard","qualname":"::traits::ClearFilterGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Guard type for clearing all pushed constraints from a `FilterStack` and reinstating them when\n dropped.\n","sig":null,"attributes":[{"value":"/ Guard type for clearing all pushed constraints from a `FilterStack` and reinstating them when","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271054,"byte_end":271151,"line_start":71,"line_end":71,"column_start":1,"column_end":98}},{"value":"/ dropped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271152,"byte_end":271164,"line_start":72,"line_end":72,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271437,"byte_end":271440,"line_start":78,"line_end":78,"column_start":9,"column_end":12},"name":"new","qualname":"<FilterStackGuard<F, T>>::new","value":"pub fn new<impl Fn(&T) -> bool + 'static: Fn(&T) -> bool +\n           'static>(impl Fn(&T) -> bool + 'static) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when\n this instance is dropped.\n","sig":null,"attributes":[{"value":"/ Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271304,"byte_end":271397,"line_start":76,"line_end":76,"column_start":2,"column_end":95}},{"value":"/ this instance is dropped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271399,"byte_end":271428,"line_start":77,"line_end":77,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271830,"byte_end":271833,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"new","qualname":"<ClearFilterGuard<F, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when\n this instance is dropped.\n","sig":null,"attributes":[{"value":"/ Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271697,"byte_end":271790,"line_start":91,"line_end":91,"column_start":2,"column_end":95}},{"value":"/ this instance is dropped.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271792,"byte_end":271821,"line_start":92,"line_end":92,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1065},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272153,"byte_end":272167,"line_start":107,"line_end":107,"column_start":11,"column_end":25},"name":"InstanceFilter","qualname":"::traits::InstanceFilter","value":"InstanceFilter<T>: Sized + Send + Sync","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"decl_id":null,"docs":" Simple trait for providing a filter over a reference to some type, given an instance of itself.\n","sig":null,"attributes":[{"value":"/ Simple trait for providing a filter over a reference to some type, given an instance of itself.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272043,"byte_end":272142,"line_start":106,"line_end":106,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272292,"byte_end":272298,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::InstanceFilter::filter","value":"pub fn filter(&Self, &T) -> bool","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Determine if a given value should be allowed through the filter (returns `true`) or not.\n","sig":null,"attributes":[{"value":"/ Determine if a given value should be allowed through the filter (returns `true`) or not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272195,"byte_end":272287,"line_start":108,"line_end":108,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272402,"byte_end":272413,"line_start":112,"line_end":112,"column_start":5,"column_end":16},"name":"is_superset","qualname":"::traits::InstanceFilter::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Determines whether `self` matches at least everything that `_o` does.\n","sig":null,"attributes":[{"value":"/ Determines whether `self` matches at least everything that `_o` does.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272324,"byte_end":272397,"line_start":111,"line_end":111,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1671},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":274894,"byte_end":274907,"line_start":199,"line_end":199,"column_start":11,"column_end":24},"name":"IntegrityTest","qualname":"::traits::IntegrityTest","value":"IntegrityTest","parent":null,"children":[{"krate":0,"index":1672}],"decl_id":null,"docs":" Type that provide some integrity tests.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":275015,"byte_end":275029,"line_start":203,"line_end":203,"column_start":5,"column_end":19},"name":"integrity_test","qualname":"::traits::IntegrityTest::integrity_test","value":"pub fn integrity_test()","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Run integrity test.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1074},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277703,"byte_end":277712,"line_start":300,"line_end":300,"column_start":11,"column_end":20},"name":"StoredMap","qualname":"::traits::StoredMap","value":"StoredMap<K, T>","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1089},{"krate":0,"index":1091}],"decl_id":null,"docs":" An abstraction of a value stored within storage, but possibly as part of a larger composite\n item.\n","sig":null,"attributes":[{"value":"/ An abstraction of a value stored within storage, but possibly as part of a larger composite","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277587,"byte_end":277682,"line_start":298,"line_end":298,"column_start":1,"column_end":96}},{"value":"/ item.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277683,"byte_end":277692,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277829,"byte_end":277832,"line_start":303,"line_end":303,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::StoredMap::get","value":"pub fn get(&K) -> T","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Get the item, or its default if it doesn't yet exist; we make no distinction between the\n two.\n","sig":null,"attributes":[{"value":"/ Get the item, or its default if it doesn't yet exist; we make no distinction between the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277722,"byte_end":277814,"line_start":301,"line_end":301,"column_start":2,"column_end":94}},{"value":"/ two.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277816,"byte_end":277824,"line_start":302,"line_end":302,"column_start":2,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278388,"byte_end":278399,"line_start":312,"line_end":312,"column_start":5,"column_end":16},"name":"is_explicit","qualname":"::traits::StoredMap::is_explicit","value":"pub fn is_explicit(&K) -> bool","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Get whether the item takes up any storage. If this is `false`, then `get` will certainly\n return the `T::default()`. If `true`, then there is no implication for `get` (i.e. it\n may return any value, including the default).","sig":null,"attributes":[{"value":"/ Get whether the item takes up any storage. If this is `false`, then `get` will certainly","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277847,"byte_end":277939,"line_start":304,"line_end":304,"column_start":2,"column_end":94}},{"value":"/ return the `T::default()`. If `true`, then there is no implication for `get` (i.e. it","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":277941,"byte_end":278030,"line_start":305,"line_end":305,"column_start":2,"column_end":91}},{"value":"/ may return any value, including the default).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278032,"byte_end":278081,"line_start":306,"line_end":306,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278083,"byte_end":278086,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ NOTE: This may still be `true`, even after `remove` is called. This is the case where","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278088,"byte_end":278177,"line_start":308,"line_end":308,"column_start":2,"column_end":91}},{"value":"/ a single storage entry is shared between multiple `StoredMap` items single, without","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278179,"byte_end":278266,"line_start":309,"line_end":309,"column_start":2,"column_end":89}},{"value":"/ additional logic to enforce it, deletion of any one them doesn't automatically imply","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278268,"byte_end":278356,"line_start":310,"line_end":310,"column_start":2,"column_end":90}},{"value":"/ deletion of them all.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278358,"byte_end":278383,"line_start":311,"line_end":311,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278442,"byte_end":278448,"line_start":314,"line_end":314,"column_start":5,"column_end":11},"name":"mutate","qualname":"::traits::StoredMap::mutate","value":"pub fn mutate<R, impl FnOnce(&mut T) -> R: FnOnce(&mut T) ->\n              R>(&K, impl FnOnce(&mut T) -> R) -> R","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Mutate the item.\n","sig":null,"attributes":[{"value":"/ Mutate the item.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278417,"byte_end":278437,"line_start":313,"line_end":313,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278593,"byte_end":278606,"line_start":316,"line_end":316,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::traits::StoredMap::mutate_exists","value":"pub fn mutate_exists<R,\n                     impl FnOnce(&mut Option<T>) -> R: FnOnce(&mut Option<T>)\n                     -> R>(&K, impl FnOnce(&mut Option<T>) -> R) -> R","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Mutate the item, removing or resetting to default value if it has been mutated to `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, removing or resetting to default value if it has been mutated to `None`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278495,"byte_end":278588,"line_start":315,"line_end":315,"column_start":2,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278849,"byte_end":278866,"line_start":319,"line_end":319,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::traits::StoredMap::try_mutate_exists","value":"pub fn try_mutate_exists<R, E,\n                         impl FnOnce(&mut Option<T>) -> Result<R, E>: FnOnce(&mut Option<T>)\n                         ->\n                         Result<R,\n                                E>>(&K,\n                                    impl FnOnce(&mut Option<T>) -> Result<R, E>)\n-> Result<R, E>","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is\n returned. It is removed or reset to default value if it has been mutated to `None`\n","sig":null,"attributes":[{"value":"/ Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278661,"byte_end":278756,"line_start":317,"line_end":317,"column_start":2,"column_end":97}},{"value":"/ returned. It is removed or reset to default value if it has been mutated to `None`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278758,"byte_end":278844,"line_start":318,"line_end":318,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278985,"byte_end":278991,"line_start":321,"line_end":321,"column_start":5,"column_end":11},"name":"insert","qualname":"::traits::StoredMap::insert","value":"pub fn insert(&K, T)","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Set the item to something new.\n","sig":null,"attributes":[{"value":"/ Set the item to something new.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":278946,"byte_end":278980,"line_start":320,"line_end":320,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279132,"byte_end":279138,"line_start":323,"line_end":323,"column_start":5,"column_end":11},"name":"remove","qualname":"::traits::StoredMap::remove","value":"pub fn remove(&K)","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Remove the item or otherwise replace it with its default value; we don't care which.\n","sig":null,"attributes":[{"value":"/ Remove the item or otherwise replace it with its default value; we don't care which.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279039,"byte_end":279127,"line_start":322,"line_end":322,"column_start":2,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":1092},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279220,"byte_end":279228,"line_start":327,"line_end":327,"column_start":11,"column_end":19},"name":"Happened","qualname":"::traits::Happened","value":"Happened<T>","parent":null,"children":[{"krate":0,"index":1094}],"decl_id":null,"docs":" A simple, generic one-parameter event notifier/handler.\n","sig":null,"attributes":[{"value":"/ A simple, generic one-parameter event notifier/handler.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279150,"byte_end":279209,"line_start":326,"line_end":326,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279263,"byte_end":279271,"line_start":329,"line_end":329,"column_start":5,"column_end":13},"name":"happened","qualname":"::traits::Happened::happened","value":"pub fn happened(&T)","parent":{"krate":0,"index":1092},"children":[],"decl_id":null,"docs":" The thing happened.\n","sig":null,"attributes":[{"value":"/ The thing happened.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279235,"byte_end":279258,"line_start":328,"line_end":328,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1098},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":280241,"byte_end":280255,"line_start":347,"line_end":347,"column_start":12,"column_end":26},"name":"StorageMapShim","qualname":"::traits::StorageMapShim","value":"","parent":null,"children":[],"decl_id":null,"docs":" A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this\n wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this\n would break the ability to have custom impls of `StoredValue`. The other workaround is to\n implement it directly in the macro.","sig":null,"attributes":[{"value":"/ A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279338,"byte_end":279434,"line_start":336,"line_end":336,"column_start":1,"column_end":97}},{"value":"/ wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279435,"byte_end":279530,"line_start":337,"line_end":337,"column_start":1,"column_end":96}},{"value":"/ would break the ability to have custom impls of `StoredValue`. The other workaround is to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279531,"byte_end":279624,"line_start":338,"line_end":338,"column_start":1,"column_end":94}},{"value":"/ implement it directly in the macro.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279625,"byte_end":279664,"line_start":339,"line_end":339,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279665,"byte_end":279668,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ This form has the advantage that two additional types are provides, `Created` and `Removed`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279669,"byte_end":279765,"line_start":341,"line_end":341,"column_start":1,"column_end":97}},{"value":"/ which are both generic events that can be tied to handlers to do something in the case of being","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279766,"byte_end":279865,"line_start":342,"line_end":342,"column_start":1,"column_end":100}},{"value":"/ about to create an account where one didn't previously exist (at all; not just where it used to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279866,"byte_end":279965,"line_start":343,"line_end":343,"column_start":1,"column_end":100}},{"value":"/ be the default value), or where the account is being removed or reset back to the default value","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":279966,"byte_end":280065,"line_start":344,"line_end":344,"column_start":1,"column_end":100}},{"value":"/ where previously it did exist (though may have been in a default state). This works well with","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":280066,"byte_end":280163,"line_start":345,"line_end":345,"column_start":1,"column_end":98}},{"value":"/ system module's `CallOnCreatedAccount` and `CallKillAccount`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":280164,"byte_end":280229,"line_start":346,"line_end":346,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1130},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282082,"byte_end":282109,"line_start":416,"line_end":416,"column_start":11,"column_end":38},"name":"EstimateNextSessionRotation","qualname":"::traits::EstimateNextSessionRotation","value":"EstimateNextSessionRotation<BlockNumber>","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133}],"decl_id":null,"docs":" Something that can estimate at which block the next session rotation will happen. This should\n be the same logical unit that dictates `ShouldEndSession` to the session module. No Assumptions\n are made about the scheduling of the sessions.\n","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next session rotation will happen. This should","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":281823,"byte_end":281920,"line_start":413,"line_end":413,"column_start":1,"column_end":98}},{"value":"/ be the same logical unit that dictates `ShouldEndSession` to the session module. No Assumptions","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":281921,"byte_end":282020,"line_start":414,"line_end":414,"column_start":1,"column_end":100}},{"value":"/ are made about the scheduling of the sessions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282021,"byte_end":282071,"line_start":415,"line_end":415,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282296,"byte_end":282326,"line_start":420,"line_end":420,"column_start":5,"column_end":35},"name":"estimate_next_session_rotation","qualname":"::traits::EstimateNextSessionRotation::estimate_next_session_rotation","value":"pub fn estimate_next_session_rotation(BlockNumber) -> Option<BlockNumber>","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Return the block number at which the next session rotation is estimated to happen.","sig":null,"attributes":[{"value":"/ Return the block number at which the next session rotation is estimated to happen.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282126,"byte_end":282212,"line_start":417,"line_end":417,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282214,"byte_end":282217,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ None should be returned if the estimation fails to come to an answer","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282219,"byte_end":282291,"line_start":419,"line_end":419,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282441,"byte_end":282447,"line_start":423,"line_end":423,"column_start":5,"column_end":11},"name":"weight","qualname":"::traits::EstimateNextSessionRotation::weight","value":"pub fn weight(BlockNumber) -> Weight","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Return the weight of calling `estimate_next_session_rotation`\n","sig":null,"attributes":[{"value":"/ Return the weight of calling `estimate_next_session_rotation`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282371,"byte_end":282436,"line_start":422,"line_end":422,"column_start":2,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":1138},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282865,"byte_end":282887,"line_start":438,"line_end":438,"column_start":11,"column_end":33},"name":"EstimateNextNewSession","qualname":"::traits::EstimateNextNewSession","value":"EstimateNextNewSession<BlockNumber>","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1141}],"decl_id":null,"docs":" Something that can estimate at which block the next `new_session` will be triggered. This must\n always be implemented by the session module.\n","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next `new_session` will be triggered. This must","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282707,"byte_end":282805,"line_start":436,"line_end":436,"column_start":1,"column_end":99}},{"value":"/ always be implemented by the session module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282806,"byte_end":282854,"line_start":437,"line_end":437,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282990,"byte_end":283015,"line_start":440,"line_end":440,"column_start":5,"column_end":30},"name":"estimate_next_new_session","qualname":"::traits::EstimateNextNewSession::estimate_next_new_session","value":"pub fn estimate_next_new_session(BlockNumber) -> Option<BlockNumber>","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Return the block number at which the next new session is estimated to happen.\n","sig":null,"attributes":[{"value":"/ Return the block number at which the next new session is estimated to happen.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":282904,"byte_end":282985,"line_start":439,"line_end":439,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283125,"byte_end":283131,"line_start":443,"line_end":443,"column_start":5,"column_end":11},"name":"weight","qualname":"::traits::EstimateNextNewSession::weight","value":"pub fn weight(BlockNumber) -> Weight","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Return the weight of calling `estimate_next_new_session`\n","sig":null,"attributes":[{"value":"/ Return the weight of calling `estimate_next_new_session`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283060,"byte_end":283120,"line_start":442,"line_end":442,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":1146},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283438,"byte_end":283441,"line_start":457,"line_end":457,"column_start":11,"column_end":14},"name":"Len","qualname":"::traits::Len","value":"Len","parent":null,"children":[{"krate":0,"index":1147}],"decl_id":null,"docs":" Anything that can have a `::len()` method.\n","sig":null,"attributes":[{"value":"/ Anything that can have a `::len()` method.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283381,"byte_end":283427,"line_start":456,"line_end":456,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283485,"byte_end":283488,"line_start":459,"line_end":459,"column_start":5,"column_end":8},"name":"len","qualname":"::traits::Len::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":1146},"children":[],"decl_id":null,"docs":" Return the length of data type.\n","sig":null,"attributes":[{"value":"/ Return the length of data type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283445,"byte_end":283480,"line_start":458,"line_end":458,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":1151},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283790,"byte_end":283793,"line_start":471,"line_end":471,"column_start":11,"column_end":14},"name":"Get","qualname":"::traits::Get","value":"Get<T>","parent":null,"children":[{"krate":0,"index":1153}],"decl_id":null,"docs":" A trait for querying a single value from a type.","sig":null,"attributes":[{"value":"/ A trait for querying a single value from a type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283672,"byte_end":283724,"line_start":468,"line_end":468,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283725,"byte_end":283728,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ It is not required that the value is constant.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283729,"byte_end":283779,"line_start":470,"line_end":470,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283834,"byte_end":283837,"line_start":473,"line_end":473,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::Get::get","value":"pub fn get() -> T","parent":{"krate":0,"index":1151},"children":[],"decl_id":null,"docs":" Return the current value.\n","sig":null,"attributes":[{"value":"/ Return the current value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283800,"byte_end":283829,"line_start":472,"line_end":472,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1157},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284001,"byte_end":284009,"line_start":481,"line_end":481,"column_start":11,"column_end":19},"name":"Contains","qualname":"::traits::Contains","value":"Contains<T: Ord>","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161}],"decl_id":null,"docs":" A trait for querying whether a type can be said to \"contain\" a value.\n","sig":null,"attributes":[{"value":"/ A trait for querying whether a type can be said to \"contain\" a value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283917,"byte_end":283990,"line_start":480,"line_end":480,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284083,"byte_end":284091,"line_start":483,"line_end":483,"column_start":5,"column_end":13},"name":"contains","qualname":"::traits::Contains::contains","value":"pub fn contains(&T) -> bool","parent":{"krate":0,"index":1157},"children":[],"decl_id":null,"docs":" Return `true` if this \"contains\" the given value `t`.\n","sig":null,"attributes":[{"value":"/ Return `true` if this \"contains\" the given value `t`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284021,"byte_end":284078,"line_start":482,"line_end":482,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284218,"byte_end":284232,"line_start":486,"line_end":486,"column_start":5,"column_end":19},"name":"sorted_members","qualname":"::traits::Contains::sorted_members","value":"pub fn sorted_members() -> Vec<T>","parent":{"krate":0,"index":1157},"children":[],"decl_id":null,"docs":" Get a vector of all members in the set, ordered.\n","sig":null,"attributes":[{"value":"/ Get a vector of all members in the set, ordered.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284161,"byte_end":284213,"line_start":485,"line_end":485,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284292,"byte_end":284297,"line_start":489,"line_end":489,"column_start":5,"column_end":10},"name":"count","qualname":"::traits::Contains::count","value":"pub fn count() -> usize","parent":{"krate":0,"index":1157},"children":[],"decl_id":null,"docs":" Get the number of items in the set.\n","sig":null,"attributes":[{"value":"/ Get the number of items in the set.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284248,"byte_end":284287,"line_start":488,"line_end":488,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":1162},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284697,"byte_end":284716,"line_start":500,"line_end":500,"column_start":11,"column_end":30},"name":"ContainsLengthBound","qualname":"::traits::ContainsLengthBound","value":"ContainsLengthBound","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164}],"decl_id":null,"docs":" A trait for querying bound for the length of an implementation of `Contains`\n","sig":null,"attributes":[{"value":"/ A trait for querying bound for the length of an implementation of `Contains`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284606,"byte_end":284686,"line_start":499,"line_end":499,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284765,"byte_end":284772,"line_start":502,"line_end":502,"column_start":5,"column_end":12},"name":"min_len","qualname":"::traits::ContainsLengthBound::min_len","value":"pub fn min_len() -> usize","parent":{"krate":0,"index":1162},"children":[],"decl_id":null,"docs":" Minimum number of elements contained\n","sig":null,"attributes":[{"value":"/ Minimum number of elements contained","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284720,"byte_end":284760,"line_start":501,"line_end":501,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284831,"byte_end":284838,"line_start":504,"line_end":504,"column_start":5,"column_end":12},"name":"max_len","qualname":"::traits::ContainsLengthBound::max_len","value":"pub fn max_len() -> usize","parent":{"krate":0,"index":1162},"children":[],"decl_id":null,"docs":" Maximum number of elements contained\n","sig":null,"attributes":[{"value":"/ Maximum number of elements contained","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284786,"byte_end":284826,"line_start":503,"line_end":503,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":1165},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284921,"byte_end":284934,"line_start":508,"line_end":508,"column_start":11,"column_end":24},"name":"IsDeadAccount","qualname":"::traits::IsDeadAccount","value":"IsDeadAccount<AccountId>","parent":null,"children":[{"krate":0,"index":1167}],"decl_id":null,"docs":" Determiner to say whether a given account is unused.\n","sig":null,"attributes":[{"value":"/ Determiner to say whether a given account is unused.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284854,"byte_end":284910,"line_start":507,"line_end":507,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284984,"byte_end":284999,"line_start":510,"line_end":510,"column_start":5,"column_end":20},"name":"is_dead_account","qualname":"::traits::IsDeadAccount::is_dead_account","value":"pub fn is_dead_account(&AccountId) -> bool","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":" Is the given account dead?\n","sig":null,"attributes":[{"value":"/ Is the given account dead?","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":284949,"byte_end":284979,"line_start":509,"line_end":509,"column_start":2,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":2200},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285226,"byte_end":285238,"line_start":521,"line_end":521,"column_start":11,"column_end":23},"name":"OnNewAccount","qualname":"::traits::OnNewAccount","value":"OnNewAccount<AccountId>","parent":null,"children":[{"krate":0,"index":2202}],"decl_id":null,"docs":" Handler for when a new account has been created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285302,"byte_end":285316,"line_start":523,"line_end":523,"column_start":5,"column_end":19},"name":"on_new_account","qualname":"::traits::OnNewAccount::on_new_account","value":"pub fn on_new_account(&AccountId)","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":" A new account `who` has been registered.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2761},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285417,"byte_end":285432,"line_start":528,"line_end":528,"column_start":11,"column_end":26},"name":"OnKilledAccount","qualname":"::traits::OnKilledAccount","value":"OnKilledAccount<AccountId>","parent":null,"children":[{"krate":0,"index":2763}],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285497,"byte_end":285514,"line_start":530,"line_end":530,"column_start":5,"column_end":22},"name":"on_killed_account","qualname":"::traits::OnKilledAccount::on_killed_account","value":"pub fn on_killed_account(&AccountId)","parent":{"krate":0,"index":2761},"children":[],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1171},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285658,"byte_end":285668,"line_start":535,"line_end":535,"column_start":11,"column_end":21},"name":"FindAuthor","qualname":"::traits::FindAuthor","value":"FindAuthor<Author>","parent":null,"children":[{"krate":0,"index":1173}],"decl_id":null,"docs":" A trait for finding the author of a block header based on the `PreRuntime` digests contained\n within it.\n","sig":null,"attributes":[{"value":"/ A trait for finding the author of a block header based on the `PreRuntime` digests contained","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285536,"byte_end":285632,"line_start":533,"line_end":533,"column_start":1,"column_end":97}},{"value":"/ within it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285633,"byte_end":285647,"line_start":534,"line_end":534,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285749,"byte_end":285760,"line_start":537,"line_end":537,"column_start":5,"column_end":16},"name":"find_author","qualname":"::traits::FindAuthor::find_author","value":"pub fn find_author<'a, I>(I) -> Option<Author> where I: 'a + IntoIterator<Item\n= (ConsensusEngineId, &'a [u8])>","parent":{"krate":0,"index":1171},"children":[],"decl_id":null,"docs":" Find the author of a block based on the pre-runtime digests.\n","sig":null,"attributes":[{"value":"/ Find the author of a block based on the pre-runtime digests.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":285680,"byte_end":285744,"line_start":536,"line_end":536,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1181},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286104,"byte_end":286114,"line_start":550,"line_end":550,"column_start":11,"column_end":21},"name":"VerifySeal","qualname":"::traits::VerifySeal","value":"VerifySeal<Header, Author>","parent":null,"children":[{"krate":0,"index":1184}],"decl_id":null,"docs":" A trait for verifying the seal of a header and returning the author.\n","sig":null,"attributes":[{"value":"/ A trait for verifying the seal of a header and returning the author.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286021,"byte_end":286093,"line_start":549,"line_end":549,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286189,"byte_end":286200,"line_start":552,"line_end":552,"column_start":5,"column_end":16},"name":"verify_seal","qualname":"::traits::VerifySeal::verify_seal","value":"pub fn verify_seal(&Header) -> Result<Option<Author>, &'static str>","parent":{"krate":0,"index":1181},"children":[],"decl_id":null,"docs":" Verify a header and return the author, if any.\n","sig":null,"attributes":[{"value":"/ Verify a header and return the author, if any.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286134,"byte_end":286184,"line_start":551,"line_end":551,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1185},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286410,"byte_end":286429,"line_start":558,"line_end":558,"column_start":11,"column_end":30},"name":"KeyOwnerProofSystem","qualname":"::traits::KeyOwnerProofSystem","value":"KeyOwnerProofSystem<Key>","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190}],"decl_id":null,"docs":" Something which can compute and check proofs of\n a historical key owner and return full identification data of that\n key owner.\n","sig":null,"attributes":[{"value":"/ Something which can compute and check proofs of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286262,"byte_end":286313,"line_start":555,"line_end":555,"column_start":1,"column_end":52}},{"value":"/ a historical key owner and return full identification data of that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286314,"byte_end":286384,"line_start":556,"line_end":556,"column_start":1,"column_end":71}},{"value":"/ key owner.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286385,"byte_end":286399,"line_start":557,"line_end":557,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1187},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286480,"byte_end":286485,"line_start":560,"line_end":560,"column_start":7,"column_end":12},"name":"Proof","qualname":"::traits::KeyOwnerProofSystem::Proof","value":"type Proof: Codec;","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" The proof of membership itself.\n","sig":null,"attributes":[{"value":"/ The proof of membership itself.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286438,"byte_end":286473,"line_start":559,"line_end":559,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1188},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286567,"byte_end":286586,"line_start":562,"line_end":562,"column_start":7,"column_end":26},"name":"IdentificationTuple","qualname":"::traits::KeyOwnerProofSystem::IdentificationTuple","value":"type IdentificationTuple: Codec;","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" The full identification of a key owner and the stash account.\n","sig":null,"attributes":[{"value":"/ The full identification of a key owner and the stash account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286495,"byte_end":286560,"line_start":561,"line_end":561,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286878,"byte_end":286883,"line_start":571,"line_end":571,"column_start":5,"column_end":10},"name":"prove","qualname":"::traits::KeyOwnerProofSystem::prove","value":"pub fn prove(Key) -> Option<Self::Proof>","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Prove membership of a key owner in the current block-state.","sig":null,"attributes":[{"value":"/ Prove membership of a key owner in the current block-state.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286597,"byte_end":286660,"line_start":564,"line_end":564,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286662,"byte_end":286665,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ This should typically only be called off-chain, since it may be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286667,"byte_end":286734,"line_start":566,"line_end":566,"column_start":2,"column_end":69}},{"value":"/ computationally heavy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286736,"byte_end":286762,"line_start":567,"line_end":567,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286764,"byte_end":286767,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ Returns `Some` iff the key owner referred to by the given `key` is a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286769,"byte_end":286841,"line_start":569,"line_end":569,"column_start":2,"column_end":74}},{"value":"/ member of the current set.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286843,"byte_end":286873,"line_start":570,"line_end":570,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287036,"byte_end":287047,"line_start":575,"line_end":575,"column_start":5,"column_end":16},"name":"check_proof","qualname":"::traits::KeyOwnerProofSystem::check_proof","value":"pub fn check_proof(Key, Self::Proof) -> Option<Self::IdentificationTuple>","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Check a proof of membership on-chain. Return `Some` iff the proof is\n valid and recent enough to check.\n","sig":null,"attributes":[{"value":"/ Check a proof of membership on-chain. Return `Some` iff the proof is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286920,"byte_end":286992,"line_start":573,"line_end":573,"column_start":2,"column_end":74}},{"value":"/ valid and recent enough to check.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":286994,"byte_end":287031,"line_start":574,"line_end":574,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":1197},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287936,"byte_end":287948,"line_start":603,"line_end":603,"column_start":11,"column_end":23},"name":"OnUnbalanced","qualname":"::traits::OnUnbalanced","value":"OnUnbalanced<Imbalance: TryDrop>","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1203},{"krate":0,"index":1204}],"decl_id":null,"docs":" Handler for when some currency \"account\" decreased in balance for\n some reason.","sig":null,"attributes":[{"value":"/ Handler for when some currency \"account\" decreased in balance for","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287563,"byte_end":287632,"line_start":593,"line_end":593,"column_start":1,"column_end":70}},{"value":"/ some reason.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287633,"byte_end":287649,"line_start":594,"line_end":594,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287650,"byte_end":287653,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ The only reason at present for an increase would be for validator rewards, but","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287654,"byte_end":287736,"line_start":596,"line_end":596,"column_start":1,"column_end":83}},{"value":"/ there may be other reasons in the future or for other chains.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287737,"byte_end":287802,"line_start":597,"line_end":597,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287803,"byte_end":287806,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/ Reasons for decreases include:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287807,"byte_end":287841,"line_start":599,"line_end":599,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287842,"byte_end":287845,"line_start":600,"line_end":600,"column_start":1,"column_end":4}},{"value":"/ - Someone got slashed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287846,"byte_end":287872,"line_start":601,"line_end":601,"column_start":1,"column_end":27}},{"value":"/ - Someone paid for a transaction to be included.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287873,"byte_end":287925,"line_start":602,"line_end":602,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288186,"byte_end":288200,"line_start":607,"line_end":607,"column_start":5,"column_end":19},"name":"on_unbalanceds","qualname":"::traits::OnUnbalanced::on_unbalanceds","value":"pub fn on_unbalanceds<B, impl Iterator<Item = Imbalance>: Iterator<Item =\n                      Imbalance>>(impl Iterator<Item = Imbalance>) where\nImbalance: crate::traits::Imbalance<B>","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" Handler for some imbalances. The different imbalances might have different origins or\n meanings, dependent on the context. Will default to simply calling on_unbalanced for all\n of them. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalances. The different imbalances might have different origins or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":287972,"byte_end":288061,"line_start":604,"line_end":604,"column_start":2,"column_end":91}},{"value":"/ meanings, dependent on the context. Will default to simply calling on_unbalanced for all","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288063,"byte_end":288155,"line_start":605,"line_end":605,"column_start":2,"column_end":94}},{"value":"/ of them. Infallible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288157,"byte_end":288181,"line_start":606,"line_end":606,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288418,"byte_end":288431,"line_start":612,"line_end":612,"column_start":5,"column_end":18},"name":"on_unbalanced","qualname":"::traits::OnUnbalanced::on_unbalanced","value":"pub fn on_unbalanced(Imbalance)","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" Handler for some imbalance. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalance. Infallible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288370,"byte_end":288413,"line_start":611,"line_end":611,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288638,"byte_end":288659,"line_start":618,"line_end":618,"column_start":5,"column_end":26},"name":"on_nonzero_unbalanced","qualname":"::traits::OnUnbalanced::on_nonzero_unbalanced","value":"pub fn on_nonzero_unbalanced(Imbalance)","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" Actually handle a non-zero imbalance. You probably want to implement this rather than\n `on_unbalanced`.\n","sig":null,"attributes":[{"value":"/ Actually handle a non-zero imbalance. You probably want to implement this rather than","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288522,"byte_end":288611,"line_start":616,"line_end":616,"column_start":2,"column_end":91}},{"value":"/ `on_unbalanced`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288613,"byte_end":288633,"line_start":617,"line_end":617,"column_start":2,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3323},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289149,"byte_end":289158,"line_start":630,"line_end":630,"column_start":2,"column_end":11},"name":"KeepAlive","qualname":"::traits::ExistenceRequirement::KeepAlive","value":"ExistenceRequirement::KeepAlive","parent":{"krate":0,"index":3322},"children":[],"decl_id":null,"docs":" Operation must not result in the account going out of existence.","sig":null,"attributes":[{"value":"/ Operation must not result in the account going out of existence.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288904,"byte_end":288972,"line_start":626,"line_end":626,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288974,"byte_end":288977,"line_start":627,"line_end":627,"column_start":2,"column_end":5}},{"value":"/ Note this implies that if the account never existed in the first place, then the operation","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288979,"byte_end":289073,"line_start":628,"line_end":628,"column_start":2,"column_end":96}},{"value":"/ may legitimately leave the account unchanged and still non-existent.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289075,"byte_end":289147,"line_start":629,"line_end":629,"column_start":2,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3325},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289222,"byte_end":289232,"line_start":632,"line_end":632,"column_start":2,"column_end":12},"name":"AllowDeath","qualname":"::traits::ExistenceRequirement::AllowDeath","value":"ExistenceRequirement::AllowDeath","parent":{"krate":0,"index":3322},"children":[],"decl_id":null,"docs":" Operation may result in account going out of existence.\n","sig":null,"attributes":[{"value":"/ Operation may result in account going out of existence.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289161,"byte_end":289220,"line_start":631,"line_end":631,"column_start":2,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":3322},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288880,"byte_end":288900,"line_start":625,"line_end":625,"column_start":10,"column_end":30},"name":"ExistenceRequirement","qualname":"::traits::ExistenceRequirement","value":"pub enum ExistenceRequirement {\n\n    /// Operation must not result in the account going out of existence.\n    ///\n    /// Note this implies that if the account never existed in the first place, then the operation\n    /// may legitimately leave the account unchanged and still non-existent.\n    KeepAlive,\n\n    /// Operation may result in account going out of existence.\n    AllowDeath,\n}","parent":null,"children":[{"krate":0,"index":3323},{"krate":0,"index":3325}],"decl_id":null,"docs":" Simple boolean for whether an account needs to be kept in existence.\n","sig":null,"attributes":[{"value":"/ Simple boolean for whether an account needs to be kept in existence.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":288760,"byte_end":288832,"line_start":623,"line_end":623,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":1207},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289341,"byte_end":289348,"line_start":636,"line_end":636,"column_start":11,"column_end":18},"name":"TryDrop","qualname":"::traits::TryDrop","value":"TryDrop: Sized","parent":null,"children":[{"krate":0,"index":1208}],"decl_id":null,"docs":" A type for which some values make sense to be able to drop without further consideration.\n","sig":null,"attributes":[{"value":"/ A type for which some values make sense to be able to drop without further consideration.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289237,"byte_end":289330,"line_start":635,"line_end":635,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289444,"byte_end":289452,"line_start":638,"line_end":638,"column_start":5,"column_end":13},"name":"try_drop","qualname":"::traits::TryDrop::try_drop","value":"pub fn try_drop(Self) -> Result<(), Self>","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its value represents \"no-operation\".\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its value represents \"no-operation\".","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289359,"byte_end":289439,"line_start":637,"line_end":637,"column_start":2,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":1209},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290983,"byte_end":290992,"line_start":670,"line_end":670,"column_start":11,"column_end":20},"name":"Imbalance","qualname":"::traits::Imbalance","value":"Imbalance<Balance>: Sized + TryDrop","parent":null,"children":[{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226}],"decl_id":null,"docs":" A trait for a not-quite Linear Type that tracks an imbalance.","sig":null,"attributes":[{"value":"/ A trait for a not-quite Linear Type that tracks an imbalance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289483,"byte_end":289548,"line_start":641,"line_end":641,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289549,"byte_end":289552,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ Functions that alter account balances return an object of this trait to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289553,"byte_end":289628,"line_start":643,"line_end":643,"column_start":1,"column_end":76}},{"value":"/ express how much account balances have been altered in aggregate. If","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289629,"byte_end":289701,"line_start":644,"line_end":644,"column_start":1,"column_end":73}},{"value":"/ dropped, the currency system will take some default steps to deal with","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289702,"byte_end":289776,"line_start":645,"line_end":645,"column_start":1,"column_end":75}},{"value":"/ the imbalance (`balances` module simply reduces or increases its","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289777,"byte_end":289845,"line_start":646,"line_end":646,"column_start":1,"column_end":69}},{"value":"/ total issuance). Your module should generally handle it in some way,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289846,"byte_end":289918,"line_start":647,"line_end":647,"column_start":1,"column_end":73}},{"value":"/ good practice is to do so in a configurable manner using an","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289919,"byte_end":289982,"line_start":648,"line_end":648,"column_start":1,"column_end":64}},{"value":"/ `OnUnbalanced` type for each situation in which your module needs to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289983,"byte_end":290055,"line_start":649,"line_end":649,"column_start":1,"column_end":73}},{"value":"/ handle an imbalance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290056,"byte_end":290080,"line_start":650,"line_end":650,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290081,"byte_end":290084,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/ Imbalances can either be Positive (funds were added somewhere without","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290085,"byte_end":290158,"line_start":652,"line_end":652,"column_start":1,"column_end":74}},{"value":"/ being subtracted elsewhere - e.g. a reward) or Negative (funds deducted","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290159,"byte_end":290234,"line_start":653,"line_end":653,"column_start":1,"column_end":76}},{"value":"/ somewhere without an equal and opposite addition - e.g. a slash or","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290235,"byte_end":290305,"line_start":654,"line_end":654,"column_start":1,"column_end":71}},{"value":"/ system fee payment).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290306,"byte_end":290330,"line_start":655,"line_end":655,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290331,"byte_end":290334,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ Since they are unsigned, the actual type is always Positive or Negative.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290335,"byte_end":290411,"line_start":657,"line_end":657,"column_start":1,"column_end":77}},{"value":"/ The trait makes no distinction except to define the `Opposite` type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290412,"byte_end":290484,"line_start":658,"line_end":658,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290485,"byte_end":290488,"line_start":659,"line_end":659,"column_start":1,"column_end":4}},{"value":"/ New instances of zero value can be created (`zero`) and destroyed","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290489,"byte_end":290558,"line_start":660,"line_end":660,"column_start":1,"column_end":70}},{"value":"/ (`drop_zero`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290559,"byte_end":290577,"line_start":661,"line_end":661,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290578,"byte_end":290581,"line_start":662,"line_end":662,"column_start":1,"column_end":4}},{"value":"/ Existing instances can be `split` and merged either consuming `self` with","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290582,"byte_end":290659,"line_start":663,"line_end":663,"column_start":1,"column_end":78}},{"value":"/ `merge` or mutating `self` with `subsume`. If the target is an `Option`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290660,"byte_end":290736,"line_start":664,"line_end":664,"column_start":1,"column_end":77}},{"value":"/ then `maybe_merge` and `maybe_subsume` might work better. Instances can","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290737,"byte_end":290812,"line_start":665,"line_end":665,"column_start":1,"column_end":76}},{"value":"/ also be `offset` with an `Opposite` that is less than or equal to in value.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290813,"byte_end":290892,"line_start":666,"line_end":666,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290893,"byte_end":290896,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/ You can always retrieve the raw balance value using `peek`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290897,"byte_end":290960,"line_start":668,"line_end":668,"column_start":1,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":290961,"byte_end":290972,"line_start":669,"line_end":669,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1211},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291084,"byte_end":291092,"line_start":672,"line_end":672,"column_start":7,"column_end":15},"name":"Opposite","qualname":"::traits::Imbalance::Opposite","value":"type Opposite: Imbalance<Balance>;","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" The oppositely imbalanced type. They come in pairs.\n","sig":null,"attributes":[{"value":"/ The oppositely imbalanced type. They come in pairs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291022,"byte_end":291077,"line_start":671,"line_end":671,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291179,"byte_end":291183,"line_start":675,"line_end":675,"column_start":5,"column_end":9},"name":"zero","qualname":"::traits::Imbalance::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" The zero imbalance. Can be destroyed with `drop_zero`.\n","sig":null,"attributes":[{"value":"/ The zero imbalance. Can be destroyed with `drop_zero`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291116,"byte_end":291174,"line_start":674,"line_end":674,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291273,"byte_end":291282,"line_start":678,"line_end":678,"column_start":5,"column_end":14},"name":"drop_zero","qualname":"::traits::Imbalance::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its `self.value()` is zero.\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its `self.value()` is zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291197,"byte_end":291268,"line_start":677,"line_end":677,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291463,"byte_end":291468,"line_start":682,"line_end":682,"column_start":5,"column_end":10},"name":"split","qualname":"::traits::Imbalance::split","value":"pub fn split(Self, Balance) -> (Self, Self)","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the first\n is guaranteed to be at most `amount` and the second will be the remainder.\n","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the first","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291312,"byte_end":291378,"line_start":680,"line_end":680,"column_start":2,"column_end":68}},{"value":"/ is guaranteed to be at most `amount` and the second will be the remainder.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291380,"byte_end":291458,"line_start":681,"line_end":681,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291829,"byte_end":291835,"line_start":689,"line_end":689,"column_start":5,"column_end":11},"name":"ration","qualname":"::traits::Imbalance::ration","value":"pub fn ration(Self, u32, u32) -> (Self, Self) where Balance: From<u32> +\nSaturating + Div<Output = Balance>","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the amounts returned will be in\n approximately the same ratio as `first`:`second`.","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the amounts returned will be in","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291511,"byte_end":291599,"line_start":684,"line_end":684,"column_start":2,"column_end":90}},{"value":"/ approximately the same ratio as `first`:`second`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291601,"byte_end":291654,"line_start":685,"line_end":685,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291656,"byte_end":291659,"line_start":686,"line_end":686,"column_start":2,"column_end":5}},{"value":"/ NOTE: This requires up to `first + second` room for a multiply, and `first + second` should","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291661,"byte_end":291756,"line_start":687,"line_end":687,"column_start":2,"column_end":97}},{"value":"/ fit into a `u32`. Overflow will safely saturate in both cases.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291758,"byte_end":291824,"line_start":688,"line_end":688,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292298,"byte_end":292309,"line_start":701,"line_end":701,"column_start":5,"column_end":16},"name":"split_merge","qualname":"::traits::Imbalance::split_merge","value":"pub fn split_merge(Self, Balance, (Self, Self)) -> (Self, Self)","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292097,"byte_end":292183,"line_start":697,"line_end":697,"column_start":2,"column_end":88}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292185,"byte_end":292233,"line_start":698,"line_end":698,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292235,"byte_end":292238,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292240,"byte_end":292293,"line_start":700,"line_end":700,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292652,"byte_end":292664,"line_start":710,"line_end":710,"column_start":5,"column_end":17},"name":"ration_merge","qualname":"::traits::Imbalance::ration_merge","value":"pub fn ration_merge(Self, u32, u32, (Self, Self)) -> (Self, Self) where\nBalance: From<u32> + Saturating + Div<Output = Balance>","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292454,"byte_end":292537,"line_start":706,"line_end":706,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292539,"byte_end":292587,"line_start":707,"line_end":707,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292589,"byte_end":292592,"line_start":708,"line_end":708,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292594,"byte_end":292647,"line_start":709,"line_end":709,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293097,"byte_end":293113,"line_start":721,"line_end":721,"column_start":5,"column_end":21},"name":"split_merge_into","qualname":"::traits::Imbalance::split_merge_into","value":"pub fn split_merge_into(Self, Balance, &mut (Self, Self))","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise into two pre-existing Imbalance refs.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292888,"byte_end":292974,"line_start":717,"line_end":717,"column_start":2,"column_end":88}},{"value":"/ element-wise into two pre-existing Imbalance refs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":292976,"byte_end":293030,"line_start":718,"line_end":718,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293032,"byte_end":293035,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `subsume`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293037,"byte_end":293092,"line_start":720,"line_end":720,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293450,"byte_end":293467,"line_start":731,"line_end":731,"column_start":5,"column_end":22},"name":"ration_merge_into","qualname":"::traits::Imbalance::ration_merge_into","value":"pub fn ration_merge_into(Self, u32, u32, &mut (Self, Self)) where\nBalance: From<u32> + Saturating + Div<Output = Balance>","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293252,"byte_end":293335,"line_start":727,"line_end":727,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293337,"byte_end":293385,"line_start":728,"line_end":728,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293387,"byte_end":293390,"line_start":729,"line_end":729,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293392,"byte_end":293445,"line_start":730,"line_end":730,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293773,"byte_end":293778,"line_start":741,"line_end":741,"column_start":5,"column_end":10},"name":"merge","qualname":"::traits::Imbalance::merge","value":"pub fn merge(Self, Self) -> Self","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293685,"byte_end":293757,"line_start":739,"line_end":739,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293759,"byte_end":293768,"line_start":740,"line_end":740,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293930,"byte_end":293940,"line_start":745,"line_end":745,"column_start":5,"column_end":15},"name":"merge_into","qualname":"::traits::Imbalance::merge_into","value":"pub fn merge_into(Self, &mut Self)","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume self to mutate `other` so that it combines both. Just like `subsume`, only with\n reversed arguments.\n","sig":null,"attributes":[{"value":"/ Consume self to mutate `other` so that it combines both. Just like `subsume`, only with","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293809,"byte_end":293900,"line_start":743,"line_end":743,"column_start":2,"column_end":93}},{"value":"/ reversed arguments.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293902,"byte_end":293925,"line_start":744,"line_end":744,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294088,"byte_end":294099,"line_start":751,"line_end":751,"column_start":5,"column_end":16},"name":"maybe_merge","qualname":"::traits::Imbalance::maybe_merge","value":"pub fn maybe_merge(Self, Option<Self>) -> Self","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume `self` and maybe an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and maybe an `other` to return a new instance that combines","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":293994,"byte_end":294072,"line_start":749,"line_end":749,"column_start":2,"column_end":80}},{"value":"/ both.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294074,"byte_end":294083,"line_start":750,"line_end":750,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294298,"byte_end":294305,"line_start":761,"line_end":761,"column_start":5,"column_end":12},"name":"subsume","qualname":"::traits::Imbalance::subsume","value":"pub fn subsume(&mut Self, Self)","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294209,"byte_end":294282,"line_start":759,"line_end":759,"column_start":2,"column_end":75}},{"value":"/ both.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294284,"byte_end":294293,"line_start":760,"line_end":760,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294428,"byte_end":294441,"line_start":765,"line_end":765,"column_start":5,"column_end":18},"name":"maybe_subsume","qualname":"::traits::Imbalance::maybe_subsume","value":"pub fn maybe_subsume(&mut Self, Option<Self>)","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Maybe consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Maybe consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294333,"byte_end":294412,"line_start":763,"line_end":763,"column_start":2,"column_end":81}},{"value":"/ both.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294414,"byte_end":294423,"line_start":764,"line_end":764,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294888,"byte_end":294894,"line_start":778,"line_end":778,"column_start":5,"column_end":11},"name":"offset","qualname":"::traits::Imbalance::offset","value":"pub fn offset(Self, Self::Opposite) -> Result<Self, Self::Opposite>","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Consume self and along with an opposite counterpart to return\n a combined result.","sig":null,"attributes":[{"value":"/ Consume self and along with an opposite counterpart to return","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294531,"byte_end":294596,"line_start":771,"line_end":771,"column_start":2,"column_end":67}},{"value":"/ a combined result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294598,"byte_end":294620,"line_start":772,"line_end":772,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294622,"byte_end":294625,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` along with a new instance of `Self` if this instance has a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294627,"byte_end":294702,"line_start":774,"line_end":774,"column_start":2,"column_end":77}},{"value":"/ greater value than the `other`. Otherwise returns `Err` with an instance of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294704,"byte_end":294783,"line_start":775,"line_end":775,"column_start":2,"column_end":81}},{"value":"/ the `Opposite`. In both cases the value represents the combination of `self`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294785,"byte_end":294865,"line_start":776,"line_end":776,"column_start":2,"column_end":82}},{"value":"/ and `other`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294867,"byte_end":294883,"line_start":777,"line_end":777,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294990,"byte_end":294994,"line_start":781,"line_end":781,"column_start":5,"column_end":9},"name":"peek","qualname":"::traits::Imbalance::peek","value":"pub fn peek(&Self) -> Balance","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" The raw value of self.\n","sig":null,"attributes":[{"value":"/ The raw value of self.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":294959,"byte_end":294985,"line_start":780,"line_end":780,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1230},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295183,"byte_end":295191,"line_start":787,"line_end":787,"column_start":2,"column_end":10},"name":"Positive","qualname":"::traits::SignedImbalance::Positive","value":"SignedImbalance::Positive(P)","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":" A positive imbalance (funds have been created but none destroyed).\n","sig":null,"attributes":[{"value":"/ A positive imbalance (funds have been created but none destroyed).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295111,"byte_end":295181,"line_start":786,"line_end":786,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1233},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295269,"byte_end":295277,"line_start":789,"line_end":789,"column_start":2,"column_end":10},"name":"Negative","qualname":"::traits::SignedImbalance::Negative","value":"SignedImbalance::Negative(P::Opposite)","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":" A negative imbalance (funds have been destroyed but none created).\n","sig":null,"attributes":[{"value":"/ A negative imbalance (funds have been destroyed but none created).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295197,"byte_end":295267,"line_start":788,"line_end":788,"column_start":2,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":1227},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295073,"byte_end":295088,"line_start":785,"line_end":785,"column_start":10,"column_end":25},"name":"SignedImbalance","qualname":"::traits::SignedImbalance","value":"pub enum SignedImbalance<B, P: Imbalance<B>> {\n\n    /// A positive imbalance (funds have been created but none destroyed).\n    Positive(P),\n\n    /// A negative imbalance (funds have been destroyed but none created).\n    Negative(P::Opposite),\n}","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1233}],"decl_id":null,"docs":" Either a positive or a negative imbalance.\n","sig":null,"attributes":[{"value":"/ Either a positive or a negative imbalance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295017,"byte_end":295063,"line_start":784,"line_end":784,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295486,"byte_end":295490,"line_start":797,"line_end":797,"column_start":9,"column_end":13},"name":"zero","qualname":"<SignedImbalance<B, P>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295554,"byte_end":295563,"line_start":801,"line_end":801,"column_start":9,"column_end":18},"name":"drop_zero","qualname":"<SignedImbalance<B, P>>::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295878,"byte_end":295883,"line_start":810,"line_end":810,"column_start":9,"column_end":14},"name":"merge","qualname":"<SignedImbalance<B, P>>::merge","value":"pub fn merge(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295786,"byte_end":295858,"line_start":808,"line_end":808,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295860,"byte_end":295869,"line_start":809,"line_end":809,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1243},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":296591,"byte_end":296603,"line_start":828,"line_end":828,"column_start":12,"column_end":24},"name":"SplitTwoWays","qualname":"::traits::SplitTwoWays","value":"","parent":null,"children":[],"decl_id":null,"docs":" Split an unbalanced amount two ways between a common divisor.\n","sig":null,"attributes":[{"value":"/ Split an unbalanced amount two ways between a common divisor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":296514,"byte_end":296579,"line_start":827,"line_end":827,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1260},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297321,"byte_end":297329,"line_start":856,"line_end":856,"column_start":11,"column_end":19},"name":"Currency","qualname":"::traits::Currency","value":"Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"decl_id":null,"docs":" Abstraction over a fungible assets system.\n","sig":null,"attributes":[{"value":"/ Abstraction over a fungible assets system.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297264,"byte_end":297310,"line_start":855,"line_end":855,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1262},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297381,"byte_end":297388,"line_start":858,"line_end":858,"column_start":7,"column_end":14},"name":"Balance","qualname":"::traits::Currency::Balance","value":"type Balance: AtLeast32BitUnsigned + FullCodec + Copy + MaybeSerializeDeserialize + Debug +\n\t\tDefault;","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The balance of an account.\n","sig":null,"attributes":[{"value":"/ The balance of an account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297344,"byte_end":297374,"line_start":857,"line_end":857,"column_start":2,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":1263},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297642,"byte_end":297659,"line_start":863,"line_end":863,"column_start":7,"column_end":24},"name":"PositiveImbalance","qualname":"::traits::Currency::PositiveImbalance","value":"type PositiveImbalance: Imbalance<Self::Balance, Opposite=Self::NegativeImbalance>;","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297481,"byte_end":297566,"line_start":861,"line_end":861,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297568,"byte_end":297635,"line_start":862,"line_end":862,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1264},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297884,"byte_end":297901,"line_start":867,"line_end":867,"column_start":7,"column_end":24},"name":"NegativeImbalance","qualname":"::traits::Currency::NegativeImbalance","value":"type NegativeImbalance: Imbalance<Self::Balance, Opposite=Self::PositiveImbalance>;","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297723,"byte_end":297808,"line_start":865,"line_end":865,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297810,"byte_end":297877,"line_start":866,"line_end":866,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298027,"byte_end":298040,"line_start":872,"line_end":872,"column_start":5,"column_end":18},"name":"total_balance","qualname":"::traits::Currency::total_balance","value":"pub fn total_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The combined balance of `who`.\n","sig":null,"attributes":[{"value":"/ The combined balance of `who`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":297988,"byte_end":298022,"line_start":871,"line_end":871,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298268,"byte_end":298277,"line_start":876,"line_end":876,"column_start":5,"column_end":14},"name":"can_slash","qualname":"::traits::Currency::can_slash","value":"pub fn can_slash(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Same result as `slash(who, value)` (but without the side-effects) assuming there are no\n balance changes in the meantime and only the reserved balance is not taken into account.\n","sig":null,"attributes":[{"value":"/ Same result as `slash(who, value)` (but without the side-effects) assuming there are no","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298078,"byte_end":298169,"line_start":874,"line_end":874,"column_start":2,"column_end":93}},{"value":"/ balance changes in the meantime and only the reserved balance is not taken into account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298171,"byte_end":298263,"line_start":875,"line_end":875,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298380,"byte_end":298394,"line_start":879,"line_end":879,"column_start":5,"column_end":19},"name":"total_issuance","qualname":"::traits::Currency::total_issuance","value":"pub fn total_issuance() -> Self::Balance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The total amount of issuance in the system.\n","sig":null,"attributes":[{"value":"/ The total amount of issuance in the system.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298328,"byte_end":298375,"line_start":878,"line_end":878,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298547,"byte_end":298562,"line_start":883,"line_end":883,"column_start":5,"column_end":20},"name":"minimum_balance","qualname":"::traits::Currency::minimum_balance","value":"pub fn minimum_balance() -> Self::Balance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The minimum balance any single account may have. This is equivalent to the `Balances` module's\n `ExistentialDeposit`.\n","sig":null,"attributes":[{"value":"/ The minimum balance any single account may have. This is equivalent to the `Balances` module's","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298417,"byte_end":298515,"line_start":881,"line_end":881,"column_start":2,"column_end":100}},{"value":"/ `ExistentialDeposit`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298517,"byte_end":298542,"line_start":882,"line_end":882,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298899,"byte_end":298903,"line_start":890,"line_end":890,"column_start":5,"column_end":9},"name":"burn","qualname":"::traits::Currency::burn","value":"pub fn burn(Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Reduce the total issuance by `amount` and return the according imbalance. The imbalance will\n typically be used to reduce an account by the same amount with e.g. `settle`.","sig":null,"attributes":[{"value":"/ Reduce the total issuance by `amount` and return the according imbalance. The imbalance will","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298585,"byte_end":298681,"line_start":885,"line_end":885,"column_start":2,"column_end":98}},{"value":"/ typically be used to reduce an account by the same amount with e.g. `settle`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298683,"byte_end":298764,"line_start":886,"line_end":886,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298766,"byte_end":298769,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is burnt, for example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298771,"byte_end":298863,"line_start":888,"line_end":888,"column_start":2,"column_end":94}},{"value":"/ in the case of underflow.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298865,"byte_end":298894,"line_start":889,"line_end":889,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299317,"byte_end":299322,"line_start":898,"line_end":898,"column_start":5,"column_end":10},"name":"issue","qualname":"::traits::Currency::issue","value":"pub fn issue(Self::Balance) -> Self::NegativeImbalance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Increase the total issuance by `amount` and return the according imbalance. The imbalance\n will typically be used to increase an account by the same amount with e.g.\n `resolve_into_existing` or `resolve_creating`.","sig":null,"attributes":[{"value":"/ Increase the total issuance by `amount` and return the according imbalance. The imbalance","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":298957,"byte_end":299050,"line_start":892,"line_end":892,"column_start":2,"column_end":95}},{"value":"/ will typically be used to increase an account by the same amount with e.g.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299052,"byte_end":299130,"line_start":893,"line_end":893,"column_start":2,"column_end":80}},{"value":"/ `resolve_into_existing` or `resolve_creating`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299132,"byte_end":299182,"line_start":894,"line_end":894,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299184,"byte_end":299187,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is issued, for example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299189,"byte_end":299282,"line_start":896,"line_end":896,"column_start":2,"column_end":95}},{"value":"/ in the case of overflow.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299284,"byte_end":299312,"line_start":897,"line_end":897,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299566,"byte_end":299570,"line_start":904,"line_end":904,"column_start":5,"column_end":9},"name":"pair","qualname":"::traits::Currency::pair","value":"pub fn pair(Self::Balance)\n-> (Self::PositiveImbalance, Self::NegativeImbalance)","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Produce a pair of imbalances that cancel each other out exactly.","sig":null,"attributes":[{"value":"/ Produce a pair of imbalances that cancel each other out exactly.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299376,"byte_end":299444,"line_start":900,"line_end":900,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299446,"byte_end":299449,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ This is just the same as burning and issuing the same amount and has no effect on the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299451,"byte_end":299540,"line_start":902,"line_end":902,"column_start":2,"column_end":91}},{"value":"/ total issuance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299542,"byte_end":299561,"line_start":903,"line_end":903,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300245,"byte_end":300257,"line_start":917,"line_end":917,"column_start":5,"column_end":17},"name":"free_balance","qualname":"::traits::Currency::free_balance","value":"pub fn free_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The 'free' balance of a given account.","sig":null,"attributes":[{"value":"/ The 'free' balance of a given account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299707,"byte_end":299749,"line_start":908,"line_end":908,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299751,"byte_end":299754,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ This is the only balance that matters in terms of most operations on tokens. It alone","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299756,"byte_end":299845,"line_start":910,"line_end":910,"column_start":2,"column_end":91}},{"value":"/ is used to determine the balance when in the contract execution environment. When this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299847,"byte_end":299937,"line_start":911,"line_end":911,"column_start":2,"column_end":92}},{"value":"/ balance falls below the value of `ExistentialDeposit`, then the 'current account' is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":299939,"byte_end":300027,"line_start":912,"line_end":912,"column_start":2,"column_end":90}},{"value":"/ deleted: specifically `FreeBalance`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300029,"byte_end":300069,"line_start":913,"line_end":913,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300071,"byte_end":300074,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300076,"byte_end":300166,"line_start":915,"line_end":915,"column_start":2,"column_end":92}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300168,"byte_end":300240,"line_start":916,"line_end":916,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300510,"byte_end":300529,"line_start":923,"line_end":923,"column_start":5,"column_end":24},"name":"ensure_can_withdraw","qualname":"::traits::Currency::ensure_can_withdraw","value":"pub fn ensure_can_withdraw(&AccountId, Self::Balance, WithdrawReasons,\n                           Self::Balance) -> DispatchResult","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Returns `Ok` iff the account is able to make a withdrawal of the given amount\n for the given reason. Basically, it's just a dry-run of `withdraw`.","sig":null,"attributes":[{"value":"/ Returns `Ok` iff the account is able to make a withdrawal of the given amount","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300295,"byte_end":300376,"line_start":919,"line_end":919,"column_start":2,"column_end":83}},{"value":"/ for the given reason. Basically, it's just a dry-run of `withdraw`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300378,"byte_end":300449,"line_start":920,"line_end":920,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300451,"byte_end":300454,"line_start":921,"line_end":921,"column_start":2,"column_end":5}},{"value":"/ `Err(...)` with the reason why not otherwise.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300456,"byte_end":300505,"line_start":922,"line_end":922,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300888,"byte_end":300896,"line_start":936,"line_end":936,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::Currency::transfer","value":"pub fn transfer(&AccountId, &AccountId, Self::Balance, ExistenceRequirement)\n-> DispatchResult","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Transfer some liquid free balance to another staker.","sig":null,"attributes":[{"value":"/ Transfer some liquid free balance to another staker.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300691,"byte_end":300747,"line_start":932,"line_end":932,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300749,"byte_end":300752,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ This is a very high-level function. It will ensure all appropriate fees are paid","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300754,"byte_end":300838,"line_start":934,"line_end":934,"column_start":2,"column_end":86}},{"value":"/ and no imbalance in the system remains.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":300840,"byte_end":300883,"line_start":935,"line_end":935,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301401,"byte_end":301406,"line_start":950,"line_end":950,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::Currency::slash","value":"pub fn slash(&AccountId, Self::Balance)\n-> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Deducts up to `value` from the combined balance of `who`, preferring to deduct from the\n free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from the combined balance of `who`, preferring to deduct from the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301035,"byte_end":301126,"line_start":943,"line_end":943,"column_start":2,"column_end":93}},{"value":"/ free balance. This function cannot fail.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301128,"byte_end":301172,"line_start":944,"line_end":944,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301174,"byte_end":301177,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301179,"byte_end":301247,"line_start":946,"line_end":946,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301249,"byte_end":301252,"line_start":947,"line_end":947,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301254,"byte_end":301345,"line_start":948,"line_end":948,"column_start":2,"column_end":93}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301347,"byte_end":301396,"line_start":949,"line_end":949,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301623,"byte_end":301644,"line_start":958,"line_end":958,"column_start":5,"column_end":26},"name":"deposit_into_existing","qualname":"::traits::Currency::deposit_into_existing","value":"pub fn deposit_into_existing(&AccountId, Self::Balance)\n-> result::Result<Self::PositiveImbalance, DispatchError>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Mints `value` to the free balance of `who`.","sig":null,"attributes":[{"value":"/ Mints `value` to the free balance of `who`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301500,"byte_end":301547,"line_start":955,"line_end":955,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301549,"byte_end":301552,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ If `who` doesn't exist, nothing is done and an Err returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301554,"byte_end":301618,"line_start":957,"line_end":957,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301861,"byte_end":301882,"line_start":965,"line_end":965,"column_start":5,"column_end":26},"name":"resolve_into_existing","qualname":"::traits::Currency::resolve_into_existing","value":"pub fn resolve_into_existing(&AccountId, Self::NegativeImbalance)\n-> result::Result<(), Self::NegativeImbalance>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301752,"byte_end":301842,"line_start":963,"line_end":963,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":301844,"byte_end":301856,"line_start":964,"line_end":964,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302259,"byte_end":302275,"line_start":979,"line_end":979,"column_start":5,"column_end":21},"name":"deposit_creating","qualname":"::traits::Currency::deposit_creating","value":"pub fn deposit_creating(&AccountId, Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","sig":null,"attributes":[{"value":"/ Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302141,"byte_end":302232,"line_start":976,"line_end":976,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302234,"byte_end":302237,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ Infallible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302239,"byte_end":302254,"line_start":978,"line_end":978,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302462,"byte_end":302478,"line_start":986,"line_end":986,"column_start":5,"column_end":21},"name":"resolve_creating","qualname":"::traits::Currency::resolve_creating","value":"pub fn resolve_creating(&AccountId, Self::NegativeImbalance)","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302353,"byte_end":302443,"line_start":984,"line_end":984,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302445,"byte_end":302457,"line_start":985,"line_end":985,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303048,"byte_end":303056,"line_start":1002,"line_end":1002,"column_start":5,"column_end":13},"name":"withdraw","qualname":"::traits::Currency::withdraw","value":"pub fn withdraw(&AccountId, Self::Balance, WithdrawReasons,\n                ExistenceRequirement)\n-> result::Result<Self::NegativeImbalance, DispatchError>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Removes some free balance from `who` account for `reason` if possible. If `liveness` is\n `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","sig":null,"attributes":[{"value":"/ Removes some free balance from `who` account for `reason` if possible. If `liveness` is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302621,"byte_end":302712,"line_start":994,"line_end":994,"column_start":2,"column_end":93}},{"value":"/ `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302714,"byte_end":302793,"line_start":995,"line_end":995,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302795,"byte_end":302798,"line_start":996,"line_end":996,"column_start":2,"column_end":5}},{"value":"/ This checks any locks, vesting, and liquidity requirements. If the removal is not possible,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302800,"byte_end":302895,"line_start":997,"line_end":997,"column_start":2,"column_end":97}},{"value":"/ then it returns `Err`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302897,"byte_end":302923,"line_start":998,"line_end":998,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302925,"byte_end":302928,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ If the operation is successful, this will return `Ok` with a `NegativeImbalance` whose value","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":302930,"byte_end":303026,"line_start":1000,"line_end":1000,"column_start":2,"column_end":98}},{"value":"/ is `value`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303028,"byte_end":303043,"line_start":1001,"line_end":1001,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303323,"byte_end":303329,"line_start":1010,"line_end":1010,"column_start":5,"column_end":11},"name":"settle","qualname":"::traits::Currency::settle","value":"pub fn settle(&AccountId, Self::PositiveImbalance, WithdrawReasons,\n              ExistenceRequirement)\n-> result::Result<(), Self::PositiveImbalance>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.\n","sig":null,"attributes":[{"value":"/ Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303227,"byte_end":303318,"line_start":1009,"line_end":1009,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303911,"byte_end":303931,"line_start":1028,"line_end":1028,"column_start":5,"column_end":25},"name":"make_free_balance_be","qualname":"::traits::Currency::make_free_balance_be","value":"pub fn make_free_balance_be(&AccountId, Self::Balance)\n-> SignedImbalance<Self::Balance, Self::PositiveImbalance>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Ensure an account's free balance equals some value; this will create the account\n if needed.","sig":null,"attributes":[{"value":"/ Ensure an account's free balance equals some value; this will create the account","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303656,"byte_end":303740,"line_start":1023,"line_end":1023,"column_start":2,"column_end":86}},{"value":"/ if needed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303742,"byte_end":303756,"line_start":1024,"line_end":1024,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303758,"byte_end":303761,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ Returns a signed imbalance and status to indicate if the account was successfully updated or update","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303763,"byte_end":303866,"line_start":1026,"line_end":1026,"column_start":2,"column_end":105}},{"value":"/ has led to killing of the account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":303868,"byte_end":303906,"line_start":1027,"line_end":1027,"column_start":2,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3337},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304225,"byte_end":304229,"line_start":1038,"line_end":1038,"column_start":2,"column_end":6},"name":"Free","qualname":"::traits::BalanceStatus::Free","value":"BalanceStatus::Free","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":" Funds are free, as corresponding to `free` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are free, as corresponding to `free` item in Balances.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304159,"byte_end":304223,"line_start":1037,"line_end":1037,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3339},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304306,"byte_end":304314,"line_start":1040,"line_end":1040,"column_start":2,"column_end":10},"name":"Reserved","qualname":"::traits::BalanceStatus::Reserved","value":"BalanceStatus::Reserved","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":" Funds are reserved, as corresponding to `reserved` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are reserved, as corresponding to `reserved` item in Balances.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304232,"byte_end":304304,"line_start":1039,"line_end":1039,"column_start":2,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":3336},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304142,"byte_end":304155,"line_start":1036,"line_end":1036,"column_start":10,"column_end":23},"name":"BalanceStatus","qualname":"::traits::BalanceStatus","value":"pub enum BalanceStatus {\n\n    /// Funds are free, as corresponding to `free` item in Balances.\n    Free,\n\n    /// Funds are reserved, as corresponding to `reserved` item in Balances.\n    Reserved,\n}","parent":null,"children":[{"krate":0,"index":3337},{"krate":0,"index":3339}],"decl_id":null,"docs":" Status of funds.\n","sig":null,"attributes":[{"value":"/ Status of funds.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304044,"byte_end":304064,"line_start":1034,"line_end":1034,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":1283},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304387,"byte_end":304405,"line_start":1044,"line_end":1044,"column_start":11,"column_end":29},"name":"ReservableCurrency","qualname":"::traits::ReservableCurrency","value":"ReservableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290}],"decl_id":null,"docs":" A currency where funds can be reserved from the user.\n","sig":null,"attributes":[{"value":"/ A currency where funds can be reserved from the user.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304319,"byte_end":304376,"line_start":1043,"line_end":1043,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304577,"byte_end":304588,"line_start":1047,"line_end":1047,"column_start":5,"column_end":16},"name":"can_reserve","qualname":"::traits::ReservableCurrency::can_reserve","value":"pub fn can_reserve(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Same result as `reserve(who, value)` (but without the side-effects) assuming there\n are no balance changes in the meantime.\n","sig":null,"attributes":[{"value":"/ Same result as `reserve(who, value)` (but without the side-effects) assuming there","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304441,"byte_end":304527,"line_start":1045,"line_end":1045,"column_start":2,"column_end":88}},{"value":"/ are no balance changes in the meantime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304529,"byte_end":304572,"line_start":1046,"line_end":1046,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304901,"byte_end":304915,"line_start":1053,"line_end":1053,"column_start":5,"column_end":19},"name":"slash_reserved","qualname":"::traits::ReservableCurrency::slash_reserved","value":"pub fn slash_reserved(&AccountId, Self::Balance)\n-> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Deducts up to `value` from reserved balance of `who`. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from reserved balance of `who`. This function cannot fail.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304639,"byte_end":304723,"line_start":1049,"line_end":1049,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304725,"byte_end":304728,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If the reserve balance of `who`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304730,"byte_end":304823,"line_start":1051,"line_end":1051,"column_start":2,"column_end":95}},{"value":"/ is less than `value`, then a non-zero second item will be returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304825,"byte_end":304896,"line_start":1052,"line_end":1052,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305653,"byte_end":305669,"line_start":1069,"line_end":1069,"column_start":5,"column_end":21},"name":"reserved_balance","qualname":"::traits::ReservableCurrency::reserved_balance","value":"pub fn reserved_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" The amount of the balance of a given account that is externally reserved; this can still get\n slashed, but gets slashed last of all.","sig":null,"attributes":[{"value":"/ The amount of the balance of a given account that is externally reserved; this can still get","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305009,"byte_end":305105,"line_start":1058,"line_end":1058,"column_start":2,"column_end":98}},{"value":"/ slashed, but gets slashed last of all.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305107,"byte_end":305149,"line_start":1059,"line_end":1059,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305151,"byte_end":305154,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ This balance is a 'reserve' balance that other subsystems use in order to set aside tokens","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305156,"byte_end":305250,"line_start":1061,"line_end":1061,"column_start":2,"column_end":96}},{"value":"/ that are still 'owned' by the account holder, but which are suspendable.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305252,"byte_end":305328,"line_start":1062,"line_end":1062,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305330,"byte_end":305333,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305335,"byte_end":305431,"line_start":1064,"line_end":1064,"column_start":2,"column_end":98}},{"value":"/ is deleted: specifically, `ReservedBalance`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305433,"byte_end":305481,"line_start":1065,"line_end":1065,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305483,"byte_end":305486,"line_start":1066,"line_end":1066,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305488,"byte_end":305574,"line_start":1067,"line_end":1067,"column_start":2,"column_end":88}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305576,"byte_end":305648,"line_start":1068,"line_end":1068,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305943,"byte_end":305950,"line_start":1075,"line_end":1075,"column_start":5,"column_end":12},"name":"reserve","qualname":"::traits::ReservableCurrency::reserve","value":"pub fn reserve(&AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Moves `value` from balance to reserved balance.","sig":null,"attributes":[{"value":"/ Moves `value` from balance to reserved balance.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305707,"byte_end":305758,"line_start":1071,"line_end":1071,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305760,"byte_end":305763,"line_start":1072,"line_end":1072,"column_start":2,"column_end":5}},{"value":"/ If the free balance is lower than `value`, then no funds will be moved and an `Err` will","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305765,"byte_end":305857,"line_start":1073,"line_end":1073,"column_start":2,"column_end":94}},{"value":"/ be returned to notify of this. This is different behavior than `unreserve`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":305859,"byte_end":305938,"line_start":1074,"line_end":1074,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306483,"byte_end":306492,"line_start":1087,"line_end":1087,"column_start":5,"column_end":14},"name":"unreserve","qualname":"::traits::ReservableCurrency::unreserve","value":"pub fn unreserve(&AccountId, Self::Balance) -> Self::Balance","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance to free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance to free balance. This function cannot fail.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306011,"byte_end":306100,"line_start":1077,"line_end":1077,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306102,"byte_end":306105,"line_start":1078,"line_end":1078,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be moved as possible. If the reserve balance of `who`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306107,"byte_end":306197,"line_start":1079,"line_end":1079,"column_start":2,"column_end":92}},{"value":"/ is less than `value`, then the remaining amount will be returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306199,"byte_end":306268,"line_start":1080,"line_end":1080,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306270,"byte_end":306273,"line_start":1081,"line_end":1081,"column_start":2,"column_end":5}},{"value":"/ # NOTES","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306275,"byte_end":306286,"line_start":1082,"line_end":1082,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306288,"byte_end":306291,"line_start":1083,"line_end":1083,"column_start":2,"column_end":5}},{"value":"/ - This is different from `reserve`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306293,"byte_end":306332,"line_start":1084,"line_end":1084,"column_start":2,"column_end":41}},{"value":"/ - If the remaining reserved balance is less than `ExistentialDeposit`, it will","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306334,"byte_end":306416,"line_start":1085,"line_end":1085,"column_start":2,"column_end":84}},{"value":"/ invoke `on_reserved_too_low` and could reap the account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306418,"byte_end":306478,"line_start":1086,"line_end":1086,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307006,"byte_end":307025,"line_start":1096,"line_end":1096,"column_start":5,"column_end":24},"name":"repatriate_reserved","qualname":"::traits::ReservableCurrency::repatriate_reserved","value":"pub fn repatriate_reserved(&AccountId, &AccountId, Self::Balance,\n                           BalanceStatus)\n-> result::Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance of account `slashed` to balance of account\n `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be\n returned. Funds will be placed in either the `free` balance or the `reserved` balance,\n depending on the `status`.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance of account `slashed` to balance of account","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306552,"byte_end":306640,"line_start":1089,"line_end":1089,"column_start":2,"column_end":90}},{"value":"/ `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306642,"byte_end":306736,"line_start":1090,"line_end":1090,"column_start":2,"column_end":96}},{"value":"/ returned. Funds will be placed in either the `free` balance or the `reserved` balance,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306738,"byte_end":306828,"line_start":1091,"line_end":1091,"column_start":2,"column_end":92}},{"value":"/ depending on the `status`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306830,"byte_end":306860,"line_start":1092,"line_end":1092,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306862,"byte_end":306865,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306867,"byte_end":306958,"line_start":1094,"line_end":1094,"column_start":2,"column_end":93}},{"value":"/ then `Ok(non_zero)` will be returned.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":306960,"byte_end":307001,"line_start":1095,"line_end":1095,"column_start":2,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1291},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307318,"byte_end":307332,"line_start":1106,"line_end":1106,"column_start":10,"column_end":24},"name":"LockIdentifier","qualname":"::traits::LockIdentifier","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" An identifier for a lock. Used for disambiguating different locks so that\n they can be individually replaced or removed.\n","sig":null,"attributes":[{"value":"/ An identifier for a lock. Used for disambiguating different locks so that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307181,"byte_end":307258,"line_start":1104,"line_end":1104,"column_start":1,"column_end":78}},{"value":"/ they can be individually replaced or removed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307259,"byte_end":307308,"line_start":1105,"line_end":1105,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1293},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307418,"byte_end":307434,"line_start":1109,"line_end":1109,"column_start":11,"column_end":27},"name":"LockableCurrency","qualname":"::traits::LockableCurrency","value":"LockableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299}],"decl_id":null,"docs":" A currency whose accounts can have liquidity restrictions.\n","sig":null,"attributes":[{"value":"/ A currency whose accounts can have liquidity restrictions.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307345,"byte_end":307407,"line_start":1108,"line_end":1108,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":1295},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307544,"byte_end":307550,"line_start":1111,"line_end":1111,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::LockableCurrency::Moment","value":"type Moment;","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307470,"byte_end":307537,"line_start":1110,"line_end":1110,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1296},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307629,"byte_end":307637,"line_start":1114,"line_end":1114,"column_start":7,"column_end":15},"name":"MaxLocks","qualname":"::traits::LockableCurrency::MaxLocks","value":"type MaxLocks: Get<u32>;","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" The maximum number of locks a user should have on their account.\n","sig":null,"attributes":[{"value":"/ The maximum number of locks a user should have on their account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307554,"byte_end":307622,"line_start":1113,"line_end":1113,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307941,"byte_end":307949,"line_start":1122,"line_end":1122,"column_start":5,"column_end":13},"name":"set_lock","qualname":"::traits::LockableCurrency::set_lock","value":"pub fn set_lock(LockIdentifier, &AccountId, Self::Balance, WithdrawReasons)","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Create a new balance lock on account `who`.","sig":null,"attributes":[{"value":"/ Create a new balance lock on account `who`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307651,"byte_end":307698,"line_start":1116,"line_end":1116,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307700,"byte_end":307703,"line_start":1117,"line_end":1117,"column_start":2,"column_end":5}},{"value":"/ If the new lock is valid (i.e. not already expired), it will push the struct to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307705,"byte_end":307788,"line_start":1118,"line_end":1118,"column_start":2,"column_end":85}},{"value":"/ the `Locks` vec in storage. Note that you can lock more funds than a user has.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307790,"byte_end":307872,"line_start":1119,"line_end":1119,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307874,"byte_end":307877,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ If the lock `id` already exists, this will update it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307879,"byte_end":307936,"line_start":1121,"line_end":1121,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308500,"byte_end":308511,"line_start":1137,"line_end":1137,"column_start":5,"column_end":16},"name":"extend_lock","qualname":"::traits::LockableCurrency::extend_lock","value":"pub fn extend_lock(LockIdentifier, &AccountId, Self::Balance, WithdrawReasons)","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Changes a balance lock (selected by `id`) so that it becomes less liquid in all\n parameters or creates a new one if it does not exist.","sig":null,"attributes":[{"value":"/ Changes a balance lock (selected by `id`) so that it becomes less liquid in all","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308051,"byte_end":308134,"line_start":1129,"line_end":1129,"column_start":2,"column_end":85}},{"value":"/ parameters or creates a new one if it does not exist.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308136,"byte_end":308193,"line_start":1130,"line_end":1130,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308195,"byte_end":308198,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ Calling `extend_lock` on an existing lock `id` differs from `set_lock` in that it","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308200,"byte_end":308285,"line_start":1132,"line_end":1132,"column_start":2,"column_end":87}},{"value":"/ applies the most severe constraints of the two, while `set_lock` replaces the lock","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308287,"byte_end":308373,"line_start":1133,"line_end":1133,"column_start":2,"column_end":88}},{"value":"/ with the new parameters. As in, `extend_lock` will set:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308375,"byte_end":308434,"line_start":1134,"line_end":1134,"column_start":2,"column_end":61}},{"value":"/ - maximum `amount`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308436,"byte_end":308458,"line_start":1135,"line_end":1135,"column_start":2,"column_end":24}},{"value":"/ - bitwise mask of all `reasons`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308460,"byte_end":308495,"line_start":1136,"line_end":1136,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308646,"byte_end":308657,"line_start":1145,"line_end":1145,"column_start":5,"column_end":16},"name":"remove_lock","qualname":"::traits::LockableCurrency::remove_lock","value":"pub fn remove_lock(LockIdentifier, &AccountId)","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Remove an existing lock.\n","sig":null,"attributes":[{"value":"/ Remove an existing lock.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308613,"byte_end":308641,"line_start":1144,"line_end":1144,"column_start":2,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":1300},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308833,"byte_end":308848,"line_start":1153,"line_end":1153,"column_start":11,"column_end":26},"name":"VestingSchedule","qualname":"::traits::VestingSchedule","value":"VestingSchedule<AccountId>","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306}],"decl_id":null,"docs":" A vesting schedule over a currency. This allows a particular currency to have vesting limits\n applied to it.\n","sig":null,"attributes":[{"value":"/ A vesting schedule over a currency. This allows a particular currency to have vesting limits","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308707,"byte_end":308803,"line_start":1151,"line_end":1151,"column_start":1,"column_end":97}},{"value":"/ applied to it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308804,"byte_end":308822,"line_start":1152,"line_end":1152,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":1302},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308937,"byte_end":308943,"line_start":1155,"line_end":1155,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::VestingSchedule::Moment","value":"type Moment;","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308863,"byte_end":308930,"line_start":1154,"line_end":1154,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1303},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309001,"byte_end":309009,"line_start":1158,"line_end":1158,"column_start":7,"column_end":15},"name":"Currency","qualname":"::traits::VestingSchedule::Currency","value":"type Currency: Currency<AccountId>;","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" The currency that this schedule applies to.\n","sig":null,"attributes":[{"value":"/ The currency that this schedule applies to.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":308947,"byte_end":308994,"line_start":1157,"line_end":1157,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309195,"byte_end":309210,"line_start":1162,"line_end":1162,"column_start":5,"column_end":20},"name":"vesting_balance","qualname":"::traits::VestingSchedule::vesting_balance","value":"pub fn vesting_balance(&AccountId)\n-> Option<<Self::Currency as Currency<AccountId>>::Balance>","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" Get the amount that is currently being vested and cannot be transferred out of this account.\n Returns `None` if the account has no vesting schedule.\n","sig":null,"attributes":[{"value":"/ Get the amount that is currently being vested and cannot be transferred out of this account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309034,"byte_end":309130,"line_start":1160,"line_end":1160,"column_start":2,"column_end":98}},{"value":"/ Returns `None` if the account has no vesting schedule.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309132,"byte_end":309190,"line_start":1161,"line_end":1161,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309594,"byte_end":309614,"line_start":1172,"line_end":1172,"column_start":5,"column_end":25},"name":"add_vesting_schedule","qualname":"::traits::VestingSchedule::add_vesting_schedule","value":"pub fn add_vesting_schedule(&AccountId,\n                            <Self::Currency as Currency<AccountId>>::Balance,\n                            <Self::Currency as Currency<AccountId>>::Balance,\n                            Self::Moment) -> DispatchResult","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" Adds a vesting schedule to a given account.","sig":null,"attributes":[{"value":"/ Adds a vesting schedule to a given account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309291,"byte_end":309338,"line_start":1164,"line_end":1164,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309340,"byte_end":309343,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ If there already exists a vesting schedule for the given account, an `Err` is returned","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309345,"byte_end":309435,"line_start":1166,"line_end":1166,"column_start":2,"column_end":92}},{"value":"/ and nothing is updated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309437,"byte_end":309464,"line_start":1167,"line_end":1167,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309466,"byte_end":309469,"line_start":1168,"line_end":1168,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if the amount to be vested is zero.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309471,"byte_end":309521,"line_start":1169,"line_end":1169,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309523,"byte_end":309526,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309528,"byte_end":309589,"line_start":1171,"line_end":1171,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309937,"byte_end":309960,"line_start":1182,"line_end":1182,"column_start":5,"column_end":28},"name":"remove_vesting_schedule","qualname":"::traits::VestingSchedule::remove_vesting_schedule","value":"pub fn remove_vesting_schedule(&AccountId)","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" Remove a vesting schedule for a given account.","sig":null,"attributes":[{"value":"/ Remove a vesting schedule for a given account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309814,"byte_end":309864,"line_start":1179,"line_end":1179,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309866,"byte_end":309869,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":309871,"byte_end":309932,"line_start":1181,"line_end":1181,"column_start":2,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3364},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310261,"byte_end":310279,"line_start":1194,"line_end":1194,"column_start":3,"column_end":21},"name":"TransactionPayment","qualname":"::traits::WithdrawReason::TransactionPayment","value":"WithdrawReason::TransactionPayment","parent":{"krate":0,"index":3363},"children":[],"decl_id":null,"docs":" In order to pay for (system) transaction costs.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3367},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310334,"byte_end":310342,"line_start":1196,"line_end":1196,"column_start":3,"column_end":11},"name":"Transfer","qualname":"::traits::WithdrawReason::Transfer","value":"WithdrawReason::Transfer","parent":{"krate":0,"index":3363},"children":[],"decl_id":null,"docs":" In order to transfer ownership.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3370},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310432,"byte_end":310439,"line_start":1198,"line_end":1198,"column_start":3,"column_end":10},"name":"Reserve","qualname":"::traits::WithdrawReason::Reserve","value":"WithdrawReason::Reserve","parent":{"krate":0,"index":3363},"children":[],"decl_id":null,"docs":" In order to reserve some funds for a later return or repatriation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3373},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310510,"byte_end":310513,"line_start":1200,"line_end":1200,"column_start":3,"column_end":6},"name":"Fee","qualname":"::traits::WithdrawReason::Fee","value":"WithdrawReason::Fee","parent":{"krate":0,"index":3363},"children":[],"decl_id":null,"docs":" In order to pay some other (higher-level) fees.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3376},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310591,"byte_end":310594,"line_start":1202,"line_end":1202,"column_start":3,"column_end":6},"name":"Tip","qualname":"::traits::WithdrawReason::Tip","value":"WithdrawReason::Tip","parent":{"krate":0,"index":3363},"children":[],"decl_id":null,"docs":" In order to tip a validator for transaction inclusion.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3363},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310188,"byte_end":310202,"line_start":1192,"line_end":1192,"column_start":8,"column_end":22},"name":"WithdrawReason","qualname":"::traits::WithdrawReason","value":"pub enum WithdrawReason {\n\n    #[doc = r\" In order to pay for (system) transaction costs.\"]\n    TransactionPayment = ,\n\n    #[doc = r\" In order to transfer ownership.\"]\n    Transfer = ,\n\n    #[doc =\n      r\" In order to reserve some funds for a later return or repatriation.\"]\n    Reserve = ,\n\n    #[doc = r\" In order to pay some other (higher-level) fees.\"]\n    Fee = ,\n\n    #[doc = r\" In order to tip a validator for transaction inclusion.\"]\n    Tip = ,\n}","parent":null,"children":[{"krate":0,"index":3364},{"krate":0,"index":3367},{"krate":0,"index":3370},{"krate":0,"index":3373},{"krate":0,"index":3376}],"decl_id":null,"docs":" Reason for moving funds out of an account.\n","sig":null,"attributes":[{"value":"repr(i8)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/bitmask-0.5.0/src/lib.rs","byte_start":7614313,"byte_end":7614324,"line_start":501,"line_end":501,"column_start":9,"column_end":20}},{"value":"allow(dead_code)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/bitmask-0.5.0/src/lib.rs","byte_start":7614454,"byte_end":7614473,"line_start":504,"line_end":504,"column_start":9,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":3408},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310079,"byte_end":310094,"line_start":1188,"line_end":1188,"column_start":11,"column_end":26},"name":"WithdrawReasons","qualname":"::traits::WithdrawReasons","value":"WithdrawReasons {  }","parent":null,"children":[{"krate":0,"index":3409}],"decl_id":null,"docs":" Reasons for moving funds out of an account.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/bitmask-0.5.0/src/lib.rs","byte_start":7614771,"byte_end":7614790,"line_start":514,"line_end":514,"column_start":9,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":1307},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310625,"byte_end":310629,"line_start":1206,"line_end":1206,"column_start":11,"column_end":15},"name":"Time","qualname":"::traits::Time","value":"Time","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1308},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310638,"byte_end":310644,"line_start":1207,"line_end":1207,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::Time::Moment","value":"type Moment: AtLeast32Bit + Parameter + Default + Copy;","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310694,"byte_end":310697,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::Time::now","value":"pub fn now() -> Self::Moment","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1310},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310764,"byte_end":310772,"line_start":1213,"line_end":1213,"column_start":11,"column_end":19},"name":"UnixTime","qualname":"::traits::UnixTime","value":"UnixTime","parent":null,"children":[{"krate":0,"index":1311}],"decl_id":null,"docs":" Trait to deal with unix time.\n","sig":null,"attributes":[{"value":"/ Trait to deal with unix time.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310720,"byte_end":310753,"line_start":1212,"line_end":1212,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310832,"byte_end":310835,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::UnixTime::now","value":"pub fn now() -> core::time::Duration","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Return duration since `SystemTime::UNIX_EPOCH`.\n","sig":null,"attributes":[{"value":"/ Return duration since `SystemTime::UNIX_EPOCH`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310776,"byte_end":310827,"line_start":1214,"line_end":1214,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311258,"byte_end":311264,"line_start":1230,"line_end":1230,"column_start":9,"column_end":15},"name":"except","qualname":"<WithdrawReasons>::except","value":"pub fn except(WithdrawReason) -> WithdrawReasons","parent":null,"children":[],"decl_id":null,"docs":" Choose all variants except for `one`.","sig":null,"attributes":[{"value":"/ Choose all variants except for `one`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310890,"byte_end":310931,"line_start":1219,"line_end":1219,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310933,"byte_end":310936,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310938,"byte_end":310949,"line_start":1221,"line_end":1221,"column_start":2,"column_end":13}},{"value":"/ # use frame_support::traits::{WithdrawReason, WithdrawReasons};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310951,"byte_end":311018,"line_start":1222,"line_end":1222,"column_start":2,"column_end":69}},{"value":"/ # fn main() {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311020,"byte_end":311037,"line_start":1223,"line_end":1223,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311039,"byte_end":311054,"line_start":1224,"line_end":1224,"column_start":2,"column_end":17}},{"value":"/ \tWithdrawReason::Fee | WithdrawReason::Transfer | WithdrawReason::Reserve | WithdrawReason::Tip,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311056,"byte_end":311156,"line_start":1225,"line_end":1225,"column_start":2,"column_end":102}},{"value":"/ \tWithdrawReasons::except(WithdrawReason::TransactionPayment),","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311158,"byte_end":311223,"line_start":1226,"line_end":1226,"column_start":2,"column_end":67}},{"value":"/\t);","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311225,"byte_end":311231,"line_start":1227,"line_end":1227,"column_start":2,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311233,"byte_end":311240,"line_start":1228,"line_end":1228,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311242,"byte_end":311249,"line_start":1229,"line_end":1229,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":1314},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311460,"byte_end":311473,"line_start":1238,"line_end":1238,"column_start":11,"column_end":24},"name":"ChangeMembers","qualname":"::traits::ChangeMembers","value":"ChangeMembers<AccountId: Clone + Ord>","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320}],"decl_id":null,"docs":" Trait for type that can handle incremental changes to a set of account IDs.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle incremental changes to a set of account IDs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311370,"byte_end":311449,"line_start":1237,"line_end":1237,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311706,"byte_end":311720,"line_start":1243,"line_end":1243,"column_start":5,"column_end":19},"name":"change_members","qualname":"::traits::ChangeMembers::change_members","value":"pub fn change_members(&[AccountId], &[AccountId], Vec<AccountId>)","parent":{"krate":0,"index":1314},"children":[],"decl_id":null,"docs":" A number of members `incoming` just joined the set and replaced some `outgoing` ones. The\n new set is given by `new`, and need not be sorted.","sig":null,"attributes":[{"value":"/ A number of members `incoming` just joined the set and replaced some `outgoing` ones. The","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311501,"byte_end":311594,"line_start":1239,"line_end":1239,"column_start":2,"column_end":95}},{"value":"/ new set is given by `new`, and need not be sorted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311596,"byte_end":311650,"line_start":1240,"line_end":1240,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311652,"byte_end":311655,"line_start":1241,"line_end":1241,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311657,"byte_end":311701,"line_start":1242,"line_end":1242,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312185,"byte_end":312206,"line_start":1254,"line_end":1254,"column_start":5,"column_end":26},"name":"change_members_sorted","qualname":"::traits::ChangeMembers::change_members_sorted","value":"pub fn change_members_sorted(&[AccountId], &[AccountId], &[AccountId])","parent":{"krate":0,"index":1314},"children":[],"decl_id":null,"docs":" A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The\n new set is thus given by `sorted_new` and **must be sorted**.","sig":null,"attributes":[{"value":"/ A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311876,"byte_end":311971,"line_start":1248,"line_end":1248,"column_start":2,"column_end":97}},{"value":"/ new set is thus given by `sorted_new` and **must be sorted**.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":311973,"byte_end":312038,"line_start":1249,"line_end":1249,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312040,"byte_end":312043,"line_start":1250,"line_end":1250,"column_start":2,"column_end":5}},{"value":"/ NOTE: This is the only function that needs to be implemented in `ChangeMembers`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312045,"byte_end":312129,"line_start":1251,"line_end":1251,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312131,"byte_end":312134,"line_start":1252,"line_end":1252,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312136,"byte_end":312180,"line_start":1253,"line_end":1253,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312483,"byte_end":312501,"line_start":1264,"line_end":1264,"column_start":5,"column_end":23},"name":"set_members_sorted","qualname":"::traits::ChangeMembers::set_members_sorted","value":"pub fn set_members_sorted(&[AccountId], &[AccountId])","parent":{"krate":0,"index":1314},"children":[],"decl_id":null,"docs":" Set the new members; they **must already be sorted**. This will compute the diff and use it to\n call `change_members_sorted`.","sig":null,"attributes":[{"value":"/ Set the new members; they **must already be sorted**. This will compute the diff and use it to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312294,"byte_end":312392,"line_start":1260,"line_end":1260,"column_start":2,"column_end":100}},{"value":"/ call `change_members_sorted`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312394,"byte_end":312427,"line_start":1261,"line_end":1261,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312429,"byte_end":312432,"line_start":1262,"line_end":1262,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312434,"byte_end":312478,"line_start":1263,"line_end":1263,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312859,"byte_end":312879,"line_start":1271,"line_end":1271,"column_start":5,"column_end":25},"name":"compute_members_diff","qualname":"::traits::ChangeMembers::compute_members_diff","value":"pub fn compute_members_diff(&[AccountId], &[AccountId])\n-> (Vec<AccountId>, Vec<AccountId>)","parent":{"krate":0,"index":1314},"children":[],"decl_id":null,"docs":" Set the new members; they **must already be sorted**. This will compute the diff and use it to\n call `change_members_sorted`.\n","sig":null,"attributes":[{"value":"/ Set the new members; they **must already be sorted**. This will compute the diff and use it to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312721,"byte_end":312819,"line_start":1269,"line_end":1269,"column_start":2,"column_end":100}},{"value":"/ call `change_members_sorted`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":312821,"byte_end":312854,"line_start":1270,"line_end":1270,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":313741,"byte_end":313750,"line_start":1306,"line_end":1306,"column_start":5,"column_end":14},"name":"set_prime","qualname":"::traits::ChangeMembers::set_prime","value":"pub fn set_prime(Option<AccountId>)","parent":{"krate":0,"index":1314},"children":[],"decl_id":null,"docs":" Set the prime member.\n","sig":null,"attributes":[{"value":"/ Set the prime member.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":313711,"byte_end":313736,"line_start":1305,"line_end":1305,"column_start":2,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1327},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314107,"byte_end":314124,"line_start":1317,"line_end":1317,"column_start":11,"column_end":28},"name":"InitializeMembers","qualname":"::traits::InitializeMembers","value":"InitializeMembers<AccountId>","parent":null,"children":[{"krate":0,"index":1329}],"decl_id":null,"docs":" Trait for type that can handle the initialization of account IDs at genesis.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle the initialization of account IDs at genesis.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314016,"byte_end":314096,"line_start":1316,"line_end":1316,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314194,"byte_end":314212,"line_start":1319,"line_end":1319,"column_start":5,"column_end":23},"name":"initialize_members","qualname":"::traits::InitializeMembers::initialize_members","value":"pub fn initialize_members(&[AccountId])","parent":{"krate":0,"index":1327},"children":[],"decl_id":null,"docs":" Initialize the members to the given `members`.\n","sig":null,"attributes":[{"value":"/ Initialize the members to the given `members`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314139,"byte_end":314189,"line_start":1318,"line_end":1318,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1333},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314373,"byte_end":314383,"line_start":1327,"line_end":1327,"column_start":11,"column_end":21},"name":"Randomness","qualname":"::traits::Randomness","value":"Randomness<Output>","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314860,"byte_end":314866,"line_start":1337,"line_end":1337,"column_start":5,"column_end":11},"name":"random","qualname":"::traits::Randomness::random","value":"pub fn random(&[u8]) -> Output","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Get a \"random\" value","sig":null,"attributes":[{"value":"/ Get a \"random\" value","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314395,"byte_end":314419,"line_start":1328,"line_end":1328,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314421,"byte_end":314424,"line_start":1329,"line_end":1329,"column_start":2,"column_end":5}},{"value":"/ Being a deterministic blockchain, real randomness is difficult to come by. This gives you","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314426,"byte_end":314519,"line_start":1330,"line_end":1330,"column_start":2,"column_end":95}},{"value":"/ something that approximates it. At best, this will be randomness which was","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314521,"byte_end":314599,"line_start":1331,"line_end":1331,"column_start":2,"column_end":80}},{"value":"/ hard to predict a long time ago, but that has become easy to predict recently.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314601,"byte_end":314683,"line_start":1332,"line_end":1332,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314685,"byte_end":314688,"line_start":1333,"line_end":1333,"column_start":2,"column_end":5}},{"value":"/ `subject` is a context identifier and allows you to get a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314690,"byte_end":314751,"line_start":1334,"line_end":1334,"column_start":2,"column_end":63}},{"value":"/ different result to other callers of this function; use it like","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314753,"byte_end":314820,"line_start":1335,"line_end":1335,"column_start":2,"column_end":69}},{"value":"/ `random(&b\"my context\"[..])`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314822,"byte_end":314855,"line_start":1336,"line_end":1336,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315159,"byte_end":315170,"line_start":1344,"line_end":1344,"column_start":5,"column_end":16},"name":"random_seed","qualname":"::traits::Randomness::random_seed","value":"pub fn random_seed() -> Output","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Get the basic random seed.","sig":null,"attributes":[{"value":"/ Get the basic random seed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314896,"byte_end":314926,"line_start":1339,"line_end":1339,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314928,"byte_end":314931,"line_start":1340,"line_end":1340,"column_start":2,"column_end":5}},{"value":"/ In general you won't want to use this, but rather `Self::random` which allows you to give a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":314933,"byte_end":315028,"line_start":1341,"line_end":1341,"column_start":2,"column_end":97}},{"value":"/ subject for the random result and whose value will be independently low-influence random","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315030,"byte_end":315122,"line_start":1342,"line_end":1342,"column_start":2,"column_end":94}},{"value":"/ from any other such seeds.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315124,"byte_end":315154,"line_start":1343,"line_end":1343,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1337},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315310,"byte_end":315324,"line_start":1350,"line_end":1350,"column_start":12,"column_end":26},"name":"TestRandomness","qualname":"::traits::TestRandomness","value":"","parent":null,"children":[],"decl_id":null,"docs":" Provides an implementation of [`Randomness`] that should only be used in tests!\n","sig":null,"attributes":[{"value":"/ Provides an implementation of [`Randomness`] that should only be used in tests!","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315215,"byte_end":315298,"line_start":1349,"line_end":1349,"column_start":1,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":1342},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315740,"byte_end":315748,"line_start":1361,"line_end":1361,"column_start":11,"column_end":19},"name":"Lateness","qualname":"::traits::Lateness","value":"Lateness<N>","parent":null,"children":[{"krate":0,"index":1344}],"decl_id":null,"docs":" Trait to be used by block producing consensus engine modules to determine\n how late the current block is (e.g. in a slot-based proposal mechanism how\n many slots were skipped since the previous block).\n","sig":null,"attributes":[{"value":"/ Trait to be used by block producing consensus engine modules to determine","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315518,"byte_end":315595,"line_start":1358,"line_end":1358,"column_start":1,"column_end":78}},{"value":"/ how late the current block is (e.g. in a slot-based proposal mechanism how","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315596,"byte_end":315674,"line_start":1359,"line_end":1359,"column_start":1,"column_end":79}},{"value":"/ many slots were skipped since the previous block).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315675,"byte_end":315729,"line_start":1360,"line_end":1360,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315851,"byte_end":315859,"line_start":1364,"line_end":1364,"column_start":5,"column_end":13},"name":"lateness","qualname":"::traits::Lateness::lateness","value":"pub fn lateness(&Self) -> N","parent":{"krate":0,"index":1342},"children":[],"decl_id":null,"docs":" Returns a generic measure of how late the current block is compared to\n its parent.\n","sig":null,"attributes":[{"value":"/ Returns a generic measure of how late the current block is compared to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315755,"byte_end":315829,"line_start":1362,"line_end":1362,"column_start":2,"column_end":76}},{"value":"/ its parent.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315831,"byte_end":315846,"line_start":1363,"line_end":1363,"column_start":2,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1348},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316164,"byte_end":316185,"line_start":1375,"line_end":1375,"column_start":11,"column_end":32},"name":"ValidatorRegistration","qualname":"::traits::ValidatorRegistration","value":"ValidatorRegistration<ValidatorId>","parent":null,"children":[{"krate":0,"index":1350}],"decl_id":null,"docs":" Implementors of this trait provide information about whether or not some validator has\n been registered with them. The [Session module](../../pallet_session/index.html) is an implementor.\n","sig":null,"attributes":[{"value":"/ Implementors of this trait provide information about whether or not some validator has","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315959,"byte_end":316049,"line_start":1373,"line_end":1373,"column_start":1,"column_end":91}},{"value":"/ been registered with them. The [Session module](../../pallet_session/index.html) is an implementor.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316050,"byte_end":316153,"line_start":1374,"line_end":1374,"column_start":1,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316314,"byte_end":316327,"line_start":1378,"line_end":1378,"column_start":5,"column_end":18},"name":"is_registered","qualname":"::traits::ValidatorRegistration::is_registered","value":"pub fn is_registered(&ValidatorId) -> bool","parent":{"krate":0,"index":1348},"children":[],"decl_id":null,"docs":" Returns true if the provided validator ID has been registered with the implementing runtime\n module\n","sig":null,"attributes":[{"value":"/ Returns true if the provided validator ID has been registered with the implementing runtime","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316202,"byte_end":316297,"line_start":1376,"line_end":1376,"column_start":2,"column_end":97}},{"value":"/ module","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316299,"byte_end":316309,"line_start":1377,"line_end":1377,"column_start":2,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1351},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316559,"byte_end":316569,"line_start":1385,"line_end":1385,"column_start":11,"column_end":21},"name":"PalletInfo","qualname":"::traits::PalletInfo","value":"PalletInfo","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1354}],"decl_id":null,"docs":" Provides information about the pallet setup in the runtime.","sig":null,"attributes":[{"value":"/ Provides information about the pallet setup in the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316358,"byte_end":316421,"line_start":1381,"line_end":1381,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316422,"byte_end":316425,"line_start":1382,"line_end":1382,"column_start":1,"column_end":4}},{"value":"/ An implementor should be able to provide information about each pallet that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316426,"byte_end":316505,"line_start":1383,"line_end":1383,"column_start":1,"column_end":80}},{"value":"/ is configured in `construct_runtime!`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316506,"byte_end":316548,"line_start":1384,"line_end":1384,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316655,"byte_end":316660,"line_start":1387,"line_end":1387,"column_start":5,"column_end":10},"name":"index","qualname":"::traits::PalletInfo::index","value":"pub fn index<P: 'static>() -> Option<usize>","parent":{"krate":0,"index":1351},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its index as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its index as configured in the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316573,"byte_end":316650,"line_start":1386,"line_end":1386,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316775,"byte_end":316779,"line_start":1389,"line_end":1389,"column_start":5,"column_end":9},"name":"name","qualname":"::traits::PalletInfo::name","value":"pub fn name<P: 'static>() -> Option<&'static str>","parent":{"krate":0,"index":1351},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its name as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its name as configured in the runtime.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316694,"byte_end":316770,"line_start":1388,"line_end":1388,"column_start":2,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":3525},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317079,"byte_end":317091,"line_start":1399,"line_end":1399,"column_start":12,"column_end":24},"name":"CallMetadata","qualname":"::traits::CallMetadata","value":"CallMetadata { function_name, pallet_name }","parent":null,"children":[{"krate":0,"index":3526},{"krate":0,"index":3527}],"decl_id":null,"docs":" The function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ The function and pallet name of the Call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":316967,"byte_end":317012,"line_start":1397,"line_end":1397,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3526},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317126,"byte_end":317139,"line_start":1401,"line_end":1401,"column_start":6,"column_end":19},"name":"function_name","qualname":"::traits::CallMetadata::function_name","value":"&'static str","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Name of the function.\n","sig":null,"attributes":[{"value":"/ Name of the function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317095,"byte_end":317120,"line_start":1400,"line_end":1400,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":3527},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317215,"byte_end":317226,"line_start":1403,"line_end":1403,"column_start":6,"column_end":17},"name":"pallet_name","qualname":"::traits::CallMetadata::pallet_name","value":"&'static str","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Name of the pallet to which the function belongs.\n","sig":null,"attributes":[{"value":"/ Name of the pallet to which the function belongs.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317156,"byte_end":317209,"line_start":1402,"line_end":1402,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":1361},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317295,"byte_end":317306,"line_start":1407,"line_end":1407,"column_start":11,"column_end":22},"name":"GetCallName","qualname":"::traits::GetCallName","value":"GetCallName","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1363}],"decl_id":null,"docs":" Gets the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Gets the function name of the Call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317245,"byte_end":317284,"line_start":1406,"line_end":1406,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317345,"byte_end":317359,"line_start":1409,"line_end":1409,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::GetCallName::get_call_names","value":"pub fn get_call_names() -> &'static [&'static str]","parent":{"krate":0,"index":1361},"children":[],"decl_id":null,"docs":" Return all function names.\n","sig":null,"attributes":[{"value":"/ Return all function names.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317310,"byte_end":317340,"line_start":1408,"line_end":1408,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317437,"byte_end":317450,"line_start":1411,"line_end":1411,"column_start":5,"column_end":18},"name":"get_call_name","qualname":"::traits::GetCallName::get_call_name","value":"pub fn get_call_name(&Self) -> &'static str","parent":{"krate":0,"index":1361},"children":[],"decl_id":null,"docs":" Return the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Return the function name of the Call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317391,"byte_end":317432,"line_start":1410,"line_end":1410,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1364},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317556,"byte_end":317571,"line_start":1415,"line_end":1415,"column_start":11,"column_end":26},"name":"GetCallMetadata","qualname":"::traits::GetCallMetadata","value":"GetCallMetadata","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"decl_id":null,"docs":" Gets the metadata for the Call - function name and pallet name.\n","sig":null,"attributes":[{"value":"/ Gets the metadata for the Call - function name and pallet name.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317478,"byte_end":317545,"line_start":1414,"line_end":1414,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317608,"byte_end":317624,"line_start":1417,"line_end":1417,"column_start":5,"column_end":21},"name":"get_module_names","qualname":"::traits::GetCallMetadata::get_module_names","value":"pub fn get_module_names() -> &'static [&'static str]","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Return all module names.\n","sig":null,"attributes":[{"value":"/ Return all module names.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317575,"byte_end":317603,"line_start":1416,"line_end":1416,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317714,"byte_end":317728,"line_start":1419,"line_end":1419,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::GetCallMetadata::get_call_names","value":"pub fn get_call_names(&str) -> &'static [&'static str]","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Return all function names for the given `module`.\n","sig":null,"attributes":[{"value":"/ Return all function names for the given `module`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317656,"byte_end":317709,"line_start":1418,"line_end":1418,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317856,"byte_end":317873,"line_start":1421,"line_end":1421,"column_start":5,"column_end":22},"name":"get_call_metadata","qualname":"::traits::GetCallMetadata::get_call_metadata","value":"pub fn get_call_metadata(&Self) -> CallMetadata","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Return a [`CallMetadata`], containing function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ Return a [`CallMetadata`], containing function and pallet name of the Call.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":317772,"byte_end":317851,"line_start":1420,"line_end":1420,"column_start":2,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":3541},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318068,"byte_end":318078,"line_start":1427,"line_end":1427,"column_start":11,"column_end":21},"name":"OnFinalize","qualname":"::traits::OnFinalize","value":"OnFinalize<BlockNumber>","parent":null,"children":[{"krate":0,"index":3543}],"decl_id":null,"docs":" The block finalization trait. Implementing this lets you express what should happen\n for your module when the block is ending.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3543},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318169,"byte_end":318180,"line_start":1429,"line_end":1429,"column_start":5,"column_end":16},"name":"on_finalize","qualname":"::traits::OnFinalize::on_finalize","value":"pub fn on_finalize(BlockNumber)","parent":{"krate":0,"index":3541},"children":[],"decl_id":null,"docs":" The block is being finalized. Implement to have something happen.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1368},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318400,"byte_end":318412,"line_start":1434,"line_end":1434,"column_start":11,"column_end":23},"name":"OnInitialize","qualname":"::traits::OnInitialize","value":"OnInitialize<BlockNumber>","parent":null,"children":[{"krate":0,"index":1370}],"decl_id":null,"docs":" The block initialization trait. Implementing this lets you express what should happen\n for your module when the block is beginning (right before the first extrinsic is executed).\n","sig":null,"attributes":[{"value":"/ The block initialization trait. Implementing this lets you express what should happen","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318204,"byte_end":318293,"line_start":1432,"line_end":1432,"column_start":1,"column_end":90}},{"value":"/ for your module when the block is beginning (right before the first extrinsic is executed).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318294,"byte_end":318389,"line_start":1433,"line_end":1433,"column_start":1,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318571,"byte_end":318584,"line_start":1438,"line_end":1438,"column_start":5,"column_end":18},"name":"on_initialize","qualname":"::traits::OnInitialize::on_initialize","value":"pub fn on_initialize(BlockNumber) -> crate::weights::Weight","parent":{"krate":0,"index":1368},"children":[],"decl_id":null,"docs":" The block is being initialized. Implement to have something happen.","sig":null,"attributes":[{"value":"/ The block is being initialized. Implement to have something happen.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318429,"byte_end":318500,"line_start":1435,"line_end":1435,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318502,"byte_end":318505,"line_start":1436,"line_end":1436,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed in the block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318507,"byte_end":318566,"line_start":1437,"line_end":1437,"column_start":2,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":1371},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319093,"byte_end":319109,"line_start":1454,"line_end":1454,"column_start":11,"column_end":27},"name":"OnRuntimeUpgrade","qualname":"::traits::OnRuntimeUpgrade","value":"OnRuntimeUpgrade","parent":null,"children":[{"krate":0,"index":1372}],"decl_id":null,"docs":" The runtime upgrade trait.","sig":null,"attributes":[{"value":"/ The runtime upgrade trait.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318913,"byte_end":318943,"line_start":1450,"line_end":1450,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318944,"byte_end":318947,"line_start":1451,"line_end":1451,"column_start":1,"column_end":4}},{"value":"/ Implementing this lets you express what should happen when the runtime upgrades,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":318948,"byte_end":319032,"line_start":1452,"line_end":1452,"column_start":1,"column_end":85}},{"value":"/ and changes may need to occur to your module.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319033,"byte_end":319082,"line_start":1453,"line_end":1453,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319458,"byte_end":319476,"line_start":1464,"line_end":1464,"column_start":5,"column_end":23},"name":"on_runtime_upgrade","qualname":"::traits::OnRuntimeUpgrade::on_runtime_upgrade","value":"pub fn on_runtime_upgrade() -> crate::weights::Weight","parent":{"krate":0,"index":1371},"children":[],"decl_id":null,"docs":" Perform a module upgrade.","sig":null,"attributes":[{"value":"/ Perform a module upgrade.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319113,"byte_end":319142,"line_start":1455,"line_end":1455,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319144,"byte_end":319147,"line_start":1456,"line_end":1456,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319149,"byte_end":319162,"line_start":1457,"line_end":1457,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319164,"byte_end":319167,"line_start":1458,"line_end":1458,"column_start":2,"column_end":5}},{"value":"/ This function will be called before we initialized any runtime state, aka `on_initialize`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319169,"byte_end":319262,"line_start":1459,"line_end":1459,"column_start":2,"column_end":95}},{"value":"/ wasn't called yet. So, information like the block number and any other","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319264,"byte_end":319338,"line_start":1460,"line_end":1460,"column_start":2,"column_end":76}},{"value":"/ block local data are not accessible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319340,"byte_end":319380,"line_start":1461,"line_end":1461,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319382,"byte_end":319385,"line_start":1462,"line_end":1462,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed for runtime upgrade.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":319387,"byte_end":319453,"line_start":1463,"line_end":1463,"column_start":2,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":5187},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320273,"byte_end":320287,"line_start":1487,"line_end":1487,"column_start":11,"column_end":25},"name":"OffchainWorker","qualname":"::traits::OffchainWorker","value":"OffchainWorker<BlockNumber>","parent":null,"children":[{"krate":0,"index":5189}],"decl_id":null,"docs":" Off-chain computation trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5189},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320643,"byte_end":320658,"line_start":1494,"line_end":1494,"column_start":5,"column_end":20},"name":"offchain_worker","qualname":"::traits::OffchainWorker::offchain_worker","value":"pub fn offchain_worker(BlockNumber)","parent":{"krate":0,"index":5187},"children":[],"decl_id":null,"docs":" This function is being called after every block import (when fully synced).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1373},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320690,"byte_end":320698,"line_start":1497,"line_end":1497,"column_start":9,"column_end":17},"name":"schedule","qualname":"::traits::schedule","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":5748},{"krate":0,"index":5781},{"krate":0,"index":5775},{"krate":0,"index":5773},{"krate":0,"index":5770},{"krate":0,"index":5764},{"krate":0,"index":5766},{"krate":0,"index":5759},{"krate":0,"index":5761},{"krate":0,"index":5756},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1388}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1375},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320958,"byte_end":320964,"line_start":1503,"line_end":1503,"column_start":11,"column_end":17},"name":"Period","qualname":"::traits::schedule::Period","value":"(BlockNumber, u32)","parent":null,"children":[],"decl_id":null,"docs":" Information relating to the period of a scheduled task. First item is the length of the\n period and the second is the number of times it should be executed in total before the task\n is considered finished and removed.\n","sig":null,"attributes":[{"value":"/ Information relating to the period of a scheduled task. First item is the length of the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320718,"byte_end":320809,"line_start":1500,"line_end":1500,"column_start":2,"column_end":93}},{"value":"/ period and the second is the number of times it should be executed in total before the task","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320811,"byte_end":320906,"line_start":1501,"line_end":1501,"column_start":2,"column_end":97}},{"value":"/ is considered finished and removed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":320908,"byte_end":320947,"line_start":1502,"line_end":1502,"column_start":2,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1377},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321132,"byte_end":321140,"line_start":1507,"line_end":1507,"column_start":11,"column_end":19},"name":"Priority","qualname":"::traits::schedule::Priority","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Priority with which a call is scheduled. It's just a linear amount with lowest values meaning\n higher priority.\n","sig":null,"attributes":[{"value":"/ Priority with which a call is scheduled. It's just a linear amount with lowest values meaning","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321002,"byte_end":321099,"line_start":1505,"line_end":1505,"column_start":2,"column_end":99}},{"value":"/ higher priority.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321101,"byte_end":321121,"line_start":1506,"line_end":1506,"column_start":2,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5750},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321327,"byte_end":321329,"line_start":1513,"line_end":1513,"column_start":3,"column_end":5},"name":"At","qualname":"::traits::schedule::DispatchTime::At","value":"DispatchTime::At(BlockNumber)","parent":{"krate":0,"index":5748},"children":[],"decl_id":null,"docs":" At specified block.\n","sig":null,"attributes":[{"value":"/ At specified block.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321301,"byte_end":321324,"line_start":1512,"line_end":1512,"column_start":3,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5753},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321386,"byte_end":321391,"line_start":1515,"line_end":1515,"column_start":3,"column_end":8},"name":"After","qualname":"::traits::schedule::DispatchTime::After","value":"DispatchTime::After(BlockNumber)","parent":{"krate":0,"index":5748},"children":[],"decl_id":null,"docs":" After specified number of blocks.\n","sig":null,"attributes":[{"value":"/ After specified number of blocks.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321346,"byte_end":321383,"line_start":1514,"line_end":1514,"column_start":3,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":5748},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321271,"byte_end":321283,"line_start":1511,"line_end":1511,"column_start":11,"column_end":23},"name":"DispatchTime","qualname":"::traits::schedule::DispatchTime","value":"pub enum DispatchTime<BlockNumber> {\n\n    /// At specified block.\n    At(BlockNumber),\n\n    /// After specified number of blocks.\n    After(BlockNumber),\n}","parent":null,"children":[{"krate":0,"index":5750},{"krate":0,"index":5753}],"decl_id":null,"docs":" The dispatch time of a scheduled task.\n","sig":null,"attributes":[{"value":"/ The dispatch time of a scheduled task.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321149,"byte_end":321191,"line_start":1509,"line_end":1509,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":1378},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321558,"byte_end":321574,"line_start":1520,"line_end":1520,"column_start":12,"column_end":28},"name":"HIGHEST_PRIORITY","qualname":"::traits::schedule::HIGHEST_PRIORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The highest priority. We invert the value so that normal sorting will place the highest\n priority at the beginning of the list.\n","sig":null,"attributes":[{"value":"/ The highest priority. We invert the value so that normal sorting will place the highest","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321411,"byte_end":321502,"line_start":1518,"line_end":1518,"column_start":2,"column_end":93}},{"value":"/ priority at the beginning of the list.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321504,"byte_end":321546,"line_start":1519,"line_end":1519,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":1379},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321756,"byte_end":321769,"line_start":1523,"line_end":1523,"column_start":12,"column_end":25},"name":"HARD_DEADLINE","qualname":"::traits::schedule::HARD_DEADLINE","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" Anything of this value or lower will definitely be scheduled on the block that they ask for, even\n if it breaches the `MaximumWeight` limitation.\n","sig":null,"attributes":[{"value":"/ Anything of this value or lower will definitely be scheduled on the block that they ask for, even","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321591,"byte_end":321692,"line_start":1521,"line_end":1521,"column_start":2,"column_end":103}},{"value":"/ if it breaches the `MaximumWeight` limitation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321694,"byte_end":321744,"line_start":1522,"line_end":1522,"column_start":2,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":1380},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321857,"byte_end":321872,"line_start":1525,"line_end":1525,"column_start":12,"column_end":27},"name":"LOWEST_PRIORITY","qualname":"::traits::schedule::LOWEST_PRIORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The lowest priority. Most stuff should be around here.\n","sig":null,"attributes":[{"value":"/ The lowest priority. Most stuff should be around here.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321787,"byte_end":321845,"line_start":1524,"line_end":1524,"column_start":2,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1381},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321947,"byte_end":321951,"line_start":1528,"line_end":1528,"column_start":12,"column_end":16},"name":"Anon","qualname":"::traits::schedule::Anon","value":"Anon<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321892,"byte_end":321935,"line_start":1527,"line_end":1527,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1385},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322054,"byte_end":322061,"line_start":1530,"line_end":1530,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::Anon::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + Debug;","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":321983,"byte_end":322046,"line_start":1529,"line_end":1529,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322255,"byte_end":322263,"line_start":1537,"line_end":1537,"column_start":6,"column_end":14},"name":"schedule","qualname":"::traits::schedule::Anon::schedule","value":"pub fn schedule(DispatchTime<BlockNumber>, Option<Period<BlockNumber>>,\n                Priority, Origin, Call)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" Schedule a one-off dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a one-off dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322107,"byte_end":322194,"line_start":1532,"line_end":1532,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322197,"byte_end":322200,"line_start":1533,"line_end":1533,"column_start":3,"column_end":6}},{"value":"/ This is not named.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322203,"byte_end":322225,"line_start":1534,"line_end":1534,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322228,"byte_end":322231,"line_start":1535,"line_end":1535,"column_start":3,"column_end":6}},{"value":"/ Infallible.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322234,"byte_end":322249,"line_start":1536,"line_end":1536,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322985,"byte_end":322991,"line_start":1555,"line_end":1555,"column_start":6,"column_end":12},"name":"cancel","qualname":"::traits::schedule::Anon::cancel","value":"pub fn cancel(Self::Address) -> Result<(), ()>","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" Cancel a scheduled task. If periodic, then it will cancel all further instances of that,\n also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled task. If periodic, then it will cancel all further instances of that,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322453,"byte_end":322545,"line_start":1545,"line_end":1545,"column_start":3,"column_end":95}},{"value":"/ also.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322548,"byte_end":322557,"line_start":1546,"line_end":1546,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322560,"byte_end":322563,"line_start":1547,"line_end":1547,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322566,"byte_end":322619,"line_start":1548,"line_end":1548,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322622,"byte_end":322625,"line_start":1549,"line_end":1549,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322628,"byte_end":322716,"line_start":1550,"line_end":1550,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322719,"byte_end":322810,"line_start":1551,"line_end":1551,"column_start":3,"column_end":94}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322813,"byte_end":322816,"line_start":1552,"line_end":1552,"column_start":3,"column_end":6}},{"value":"/ NOTE2: This will not work to cancel periodic tasks after their initial execution. For","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322819,"byte_end":322908,"line_start":1553,"line_end":1553,"column_start":3,"column_end":92}},{"value":"/ that, you must name the task explicitly using the `Named` trait.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":322911,"byte_end":322979,"line_start":1554,"line_end":1554,"column_start":3,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":1388},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323095,"byte_end":323100,"line_start":1559,"line_end":1559,"column_start":12,"column_end":17},"name":"Named","qualname":"::traits::schedule::Named","value":"Named<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323040,"byte_end":323083,"line_start":1558,"line_end":1558,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1392},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323203,"byte_end":323210,"line_start":1561,"line_end":1561,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::Named::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + sp_std::fmt::Debug;","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323132,"byte_end":323195,"line_start":1560,"line_end":1560,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323461,"byte_end":323475,"line_start":1566,"line_end":1566,"column_start":6,"column_end":20},"name":"schedule_named","qualname":"::traits::schedule::Named::schedule_named","value":"pub fn schedule_named(Vec<u8>, DispatchTime<BlockNumber>,\n                      Option<Period<BlockNumber>>, Priority, Origin, Call)\n-> Result<Self::Address, ()>","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" Schedule a one-off dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a one-off dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323269,"byte_end":323356,"line_start":1563,"line_end":1563,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323359,"byte_end":323362,"line_start":1564,"line_end":1564,"column_start":3,"column_end":6}},{"value":"/ - `id`: The identity of the task. This must be unique and will return an error if not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323365,"byte_end":323455,"line_start":1565,"line_end":1565,"column_start":3,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324035,"byte_end":324047,"line_start":1582,"line_end":1582,"column_start":6,"column_end":18},"name":"cancel_named","qualname":"::traits::schedule::Named::cancel_named","value":"pub fn cancel_named(Vec<u8>) -> Result<(), ()>","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" Cancel a scheduled, named task. If periodic, then it will cancel all further instances\n of that, also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled, named task. If periodic, then it will cancel all further instances","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323670,"byte_end":323760,"line_start":1575,"line_end":1575,"column_start":3,"column_end":93}},{"value":"/ of that, also.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323763,"byte_end":323781,"line_start":1576,"line_end":1576,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323784,"byte_end":323787,"line_start":1577,"line_end":1577,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323790,"byte_end":323838,"line_start":1578,"line_end":1578,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323841,"byte_end":323844,"line_start":1579,"line_end":1579,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323847,"byte_end":323935,"line_start":1580,"line_end":1580,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":323938,"byte_end":324029,"line_start":1581,"line_end":1581,"column_start":3,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1395},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324162,"byte_end":324174,"line_start":1587,"line_end":1587,"column_start":11,"column_end":23},"name":"EnsureOrigin","qualname":"::traits::EnsureOrigin","value":"EnsureOrigin<OuterOrigin>","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1400}],"decl_id":null,"docs":" Some sort of check on the origin is performed by this object.\n","sig":null,"attributes":[{"value":"/ Some sort of check on the origin is performed by this object.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324086,"byte_end":324151,"line_start":1586,"line_end":1586,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1397},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324216,"byte_end":324223,"line_start":1589,"line_end":1589,"column_start":7,"column_end":14},"name":"Success","qualname":"::traits::EnsureOrigin::Success","value":"type Success;","parent":{"krate":0,"index":1395},"children":[],"decl_id":null,"docs":" A return type.\n","sig":null,"attributes":[{"value":"/ A return type.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324191,"byte_end":324209,"line_start":1588,"line_end":1588,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324260,"byte_end":324273,"line_start":1591,"line_end":1591,"column_start":5,"column_end":18},"name":"ensure_origin","qualname":"::traits::EnsureOrigin::ensure_origin","value":"pub fn ensure_origin(OuterOrigin) -> result::Result<Self::Success, BadOrigin>","parent":{"krate":0,"index":1395},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324226,"byte_end":324255,"line_start":1590,"line_end":1590,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324419,"byte_end":324429,"line_start":1595,"line_end":1595,"column_start":5,"column_end":15},"name":"try_origin","qualname":"::traits::EnsureOrigin::try_origin","value":"pub fn try_origin(OuterOrigin) -> result::Result<Self::Success, OuterOrigin>","parent":{"krate":0,"index":1395},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324385,"byte_end":324414,"line_start":1594,"line_end":1594,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1401},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324947,"byte_end":324969,"line_start":1608,"line_end":1608,"column_start":11,"column_end":33},"name":"UnfilteredDispatchable","qualname":"::traits::UnfilteredDispatchable","value":"UnfilteredDispatchable","parent":null,"children":[{"krate":0,"index":1402},{"krate":0,"index":1403}],"decl_id":null,"docs":" Type that can be dispatched with an origin but without checking the origin filter.","sig":null,"attributes":[{"value":"/ Type that can be dispatched with an origin but without checking the origin filter.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324701,"byte_end":324787,"line_start":1604,"line_end":1604,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324788,"byte_end":324791,"line_start":1605,"line_end":1605,"column_start":1,"column_end":4}},{"value":"/ Implemented for pallet dispatchable type by `decl_module` and for runtime dispatchable by","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324792,"byte_end":324885,"line_start":1606,"line_end":1606,"column_start":1,"column_end":94}},{"value":"/ `construct_runtime` and `impl_outer_dispatch`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324886,"byte_end":324936,"line_start":1607,"line_end":1607,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1402},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325053,"byte_end":325059,"line_start":1610,"line_end":1610,"column_start":7,"column_end":13},"name":"Origin","qualname":"::traits::UnfilteredDispatchable::Origin","value":"type Origin;","parent":{"krate":0,"index":1401},"children":[],"decl_id":null,"docs":" The origin type of the runtime, (i.e. `frame_system::Trait::Origin`).\n","sig":null,"attributes":[{"value":"/ The origin type of the runtime, (i.e. `frame_system::Trait::Origin`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":324973,"byte_end":325046,"line_start":1609,"line_end":1609,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325129,"byte_end":325151,"line_start":1613,"line_end":1613,"column_start":5,"column_end":27},"name":"dispatch_bypass_filter","qualname":"::traits::UnfilteredDispatchable::dispatch_bypass_filter","value":"pub fn dispatch_bypass_filter(Self, Self::Origin)\n-> crate::dispatch::DispatchResultWithPostInfo","parent":{"krate":0,"index":1401},"children":[],"decl_id":null,"docs":" Dispatch this call but do not check the filter in origin.\n","sig":null,"attributes":[{"value":"/ Dispatch this call but do not check the filter in origin.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325063,"byte_end":325124,"line_start":1612,"line_end":1612,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":1404},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325297,"byte_end":325308,"line_start":1617,"line_end":1617,"column_start":11,"column_end":22},"name":"OriginTrait","qualname":"::traits::OriginTrait","value":"OriginTrait: Sized","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1413}],"decl_id":null,"docs":" Methods available on `frame_system::Trait::Origin`.\n","sig":null,"attributes":[{"value":"/ Methods available on `frame_system::Trait::Origin`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325231,"byte_end":325286,"line_start":1616,"line_end":1616,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":1405},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325382,"byte_end":325386,"line_start":1619,"line_end":1619,"column_start":7,"column_end":11},"name":"Call","qualname":"::traits::OriginTrait::Call","value":"type Call;","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Runtime call type, as in `frame_system::Trait::Call`\n","sig":null,"attributes":[{"value":"/ Runtime call type, as in `frame_system::Trait::Call`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325319,"byte_end":325375,"line_start":1618,"line_end":1618,"column_start":2,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":1406},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325460,"byte_end":325473,"line_start":1622,"line_end":1622,"column_start":7,"column_end":20},"name":"PalletsOrigin","qualname":"::traits::OriginTrait::PalletsOrigin","value":"type PalletsOrigin;","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" The caller origin, overarching type of all pallets origins.\n","sig":null,"attributes":[{"value":"/ The caller origin, overarching type of all pallets origins.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325390,"byte_end":325453,"line_start":1621,"line_end":1621,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325513,"byte_end":325523,"line_start":1625,"line_end":1625,"column_start":5,"column_end":15},"name":"add_filter","qualname":"::traits::OriginTrait::add_filter","value":"pub fn add_filter<impl Fn(&Self::Call) -> bool + 'static: Fn(&Self::Call) ->\n                  bool +\n                  'static>(&mut Self, impl Fn(&Self::Call) -> bool + 'static)","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Add a filter to the origin.\n","sig":null,"attributes":[{"value":"/ Add a filter to the origin.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325477,"byte_end":325508,"line_start":1624,"line_end":1624,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325674,"byte_end":325686,"line_start":1628,"line_end":1628,"column_start":5,"column_end":17},"name":"reset_filter","qualname":"::traits::OriginTrait::reset_filter","value":"pub fn reset_filter(&mut Self)","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Reset origin filters to default one, i.e `frame_system::Trait::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Reset origin filters to default one, i.e `frame_system::Trait::BaseCallFilter`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325586,"byte_end":325669,"line_start":1627,"line_end":1627,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325762,"byte_end":325777,"line_start":1631,"line_end":1631,"column_start":5,"column_end":20},"name":"set_caller_from","qualname":"::traits::OriginTrait::set_caller_from","value":"pub fn set_caller_from<impl Into<Self>: Into<Self>>(&mut Self,\n                                                    impl Into<Self>)","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Replace the caller with caller from the other origin\n","sig":null,"attributes":[{"value":"/ Replace the caller with caller from the other origin","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325701,"byte_end":325757,"line_start":1630,"line_end":1630,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325877,"byte_end":325888,"line_start":1634,"line_end":1634,"column_start":5,"column_end":16},"name":"filter_call","qualname":"::traits::OriginTrait::filter_call","value":"pub fn filter_call(&Self, &Self::Call) -> bool","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Filter the call, if false then call is filtered out.\n","sig":null,"attributes":[{"value":"/ Filter the call, if false then call is filtered out.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325816,"byte_end":325872,"line_start":1633,"line_end":1633,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325950,"byte_end":325956,"line_start":1637,"line_end":1637,"column_start":5,"column_end":11},"name":"caller","qualname":"::traits::OriginTrait::caller","value":"pub fn caller(&Self) -> &Self::PalletsOrigin","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Get the caller.\n","sig":null,"attributes":[{"value":"/ Get the caller.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325926,"byte_end":325945,"line_start":1636,"line_end":1636,"column_start":2,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":1414},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326145,"byte_end":326151,"line_start":1643,"line_end":1643,"column_start":11,"column_end":17},"name":"IsType","qualname":"::traits::IsType","value":"IsType<T>: Into<T> + From<T>","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419}],"decl_id":null,"docs":" Trait to be used when types are exactly same.","sig":null,"attributes":[{"value":"/ Trait to be used when types are exactly same.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325992,"byte_end":326041,"line_start":1640,"line_end":1640,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326042,"byte_end":326045,"line_start":1641,"line_end":1641,"column_start":1,"column_end":4}},{"value":"/ This allow to convert back and forth from type, a reference and a mutable reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326046,"byte_end":326134,"line_start":1642,"line_end":1642,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326201,"byte_end":326209,"line_start":1645,"line_end":1645,"column_start":5,"column_end":13},"name":"from_ref","qualname":"::traits::IsType::from_ref","value":"pub fn from_ref(&T) -> &Self","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" Cast reference.\n","sig":null,"attributes":[{"value":"/ Cast reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326177,"byte_end":326196,"line_start":1644,"line_end":1644,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326253,"byte_end":326261,"line_start":1648,"line_end":1648,"column_start":5,"column_end":13},"name":"into_ref","qualname":"::traits::IsType::into_ref","value":"pub fn into_ref(&Self) -> &T","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" Cast reference.\n","sig":null,"attributes":[{"value":"/ Cast reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326229,"byte_end":326248,"line_start":1647,"line_end":1647,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326310,"byte_end":326318,"line_start":1651,"line_end":1651,"column_start":5,"column_end":13},"name":"from_mut","qualname":"::traits::IsType::from_mut","value":"pub fn from_mut(&mut T) -> &mut Self","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" Cast mutable reference.\n","sig":null,"attributes":[{"value":"/ Cast mutable reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326278,"byte_end":326305,"line_start":1650,"line_end":1650,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326378,"byte_end":326386,"line_start":1654,"line_end":1654,"column_start":5,"column_end":13},"name":"into_mut","qualname":"::traits::IsType::into_mut","value":"pub fn into_mut(&mut Self) -> &mut T","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" Cast mutable reference.\n","sig":null,"attributes":[{"value":"/ Cast mutable reference.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326346,"byte_end":326373,"line_start":1653,"line_end":1653,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":1426},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326892,"byte_end":326900,"line_start":1670,"line_end":1670,"column_start":11,"column_end":19},"name":"Instance","qualname":"::traits::Instance","value":"Instance: 'static","parent":null,"children":[{"krate":0,"index":1427}],"decl_id":null,"docs":" An instance of a pallet in the storage.","sig":null,"attributes":[{"value":"/ An instance of a pallet in the storage.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326597,"byte_end":326640,"line_start":1664,"line_end":1664,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326641,"byte_end":326644,"line_start":1665,"line_end":1665,"column_start":1,"column_end":4}},{"value":"/ It is required that these instances are unique, to support multiple instances per pallet in the same runtime!","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326645,"byte_end":326758,"line_start":1666,"line_end":1666,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326759,"byte_end":326762,"line_start":1667,"line_end":1667,"column_start":1,"column_end":4}},{"value":"/ E.g. for module MyModule default instance will have prefix \"MyModule\" and other instances","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326763,"byte_end":326856,"line_start":1668,"line_end":1668,"column_start":1,"column_end":94}},{"value":"/ \"InstanceNMyModule\".","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326857,"byte_end":326881,"line_start":1669,"line_end":1669,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":1427},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326991,"byte_end":326997,"line_start":1672,"line_end":1672,"column_start":11,"column_end":17},"name":"PREFIX","qualname":"::traits::Instance::PREFIX","value":"&'static str","parent":{"krate":0,"index":1426},"children":[],"decl_id":null,"docs":" Unique module prefix. E.g. \"InstanceNMyModule\" or \"MyModule\"\n","sig":null,"attributes":[{"value":"/ Unique module prefix. E.g. \"InstanceNMyModule\" or \"MyModule\"","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326916,"byte_end":326980,"line_start":1671,"line_end":1671,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":1428},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weights","qualname":"::weights","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":6455},{"krate":0,"index":1431},{"krate":0,"index":6457},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":6459},{"krate":0,"index":1434},{"krate":0,"index":6461},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1466},{"krate":0,"index":1469},{"krate":0,"index":1472},{"krate":0,"index":5817},{"krate":0,"index":5842},{"krate":0,"index":5841},{"krate":0,"index":5838},{"krate":0,"index":5839},{"krate":0,"index":5835},{"krate":0,"index":5836},{"krate":0,"index":5833},{"krate":0,"index":5827},{"krate":0,"index":5822},{"krate":0,"index":1475},{"krate":0,"index":5844},{"krate":0,"index":5914},{"krate":0,"index":5873},{"krate":0,"index":5870},{"krate":0,"index":5871},{"krate":0,"index":5867},{"krate":0,"index":5868},{"krate":0,"index":5865},{"krate":0,"index":5864},{"krate":0,"index":5858},{"krate":0,"index":5853},{"krate":0,"index":5851},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":5920},{"krate":0,"index":5947},{"krate":0,"index":5946},{"krate":0,"index":5943},{"krate":0,"index":5944},{"krate":0,"index":5939},{"krate":0,"index":5940},{"krate":0,"index":5937},{"krate":0,"index":5935},{"krate":0,"index":5929},{"krate":0,"index":5924},{"krate":0,"index":1490},{"krate":0,"index":5949},{"krate":0,"index":5975},{"krate":0,"index":5974},{"krate":0,"index":5971},{"krate":0,"index":5972},{"krate":0,"index":5967},{"krate":0,"index":5968},{"krate":0,"index":5965},{"krate":0,"index":5963},{"krate":0,"index":5957},{"krate":0,"index":5952},{"krate":0,"index":1492},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1505},{"krate":0,"index":1507},{"krate":0,"index":1509},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1530},{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1539},{"krate":0,"index":1542},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1556},{"krate":0,"index":1561},{"krate":0,"index":1567},{"krate":0,"index":1572},{"krate":0,"index":1578},{"krate":0,"index":1583},{"krate":0,"index":1589},{"krate":0,"index":1595},{"krate":0,"index":1600},{"krate":0,"index":5977},{"krate":0,"index":6003},{"krate":0,"index":6002},{"krate":0,"index":5999},{"krate":0,"index":6000},{"krate":0,"index":5995},{"krate":0,"index":5996},{"krate":0,"index":5993},{"krate":0,"index":5991},{"krate":0,"index":5985},{"krate":0,"index":5980},{"krate":0,"index":1604},{"krate":0,"index":6005},{"krate":0,"index":6025},{"krate":0,"index":6017},{"krate":0,"index":6011},{"krate":0,"index":1608},{"krate":0,"index":1611},{"krate":0,"index":1616},{"krate":0,"index":1620}],"decl_id":null,"docs":" # Primitives for transaction weighting.","sig":null,"attributes":[{"value":"/ # Primitives for transaction weighting.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328160,"byte_end":328203,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328204,"byte_end":328207,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Every dispatchable function is responsible for providing `#[weight = $x]` attribute. In this","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328208,"byte_end":328304,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ snipped, `$x` can be any user provided struct that implements the following traits:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328305,"byte_end":328392,"line_start":21,"line_end":21,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328393,"byte_end":328396,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - [`WeighData`]: the weight amount.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328397,"byte_end":328436,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - [`ClassifyDispatch`]: class of the dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328437,"byte_end":328487,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/ - [`PaysFee`]: weather this weight should be translated to fee and deducted upon dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328488,"byte_end":328582,"line_start":25,"line_end":25,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328583,"byte_end":328586,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Substrate then bundles then output information of the two traits into [`DispatchInfo`] struct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328587,"byte_end":328684,"line_start":27,"line_end":27,"column_start":1,"column_end":98}},{"value":"/ and provides it by implementing the [`GetDispatchInfo`] for all `Call` both inner and outer call","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328685,"byte_end":328785,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"/ types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328786,"byte_end":328796,"line_start":29,"line_end":29,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328797,"byte_end":328800,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Substrate provides two pre-defined ways to annotate weight:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328801,"byte_end":328864,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328865,"byte_end":328868,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ### 1. Fixed values","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328869,"byte_end":328892,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328893,"byte_end":328896,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This can only be used when all 3 traits can be resolved statically. You have 3 degrees of","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328897,"byte_end":328990,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"/ configuration:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":328991,"byte_end":329009,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329010,"byte_end":329013,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ 1. Define only weight, **in which case `ClassifyDispatch` will be `Normal` and `PaysFee` will be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329014,"byte_end":329114,"line_start":38,"line_end":38,"column_start":1,"column_end":101}},{"value":"/    `Yes`**.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329115,"byte_end":329130,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329131,"byte_end":329134,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329135,"byte_end":329142,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Trait;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329143,"byte_end":329173,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329174,"byte_end":329207,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329208,"byte_end":329283,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/         #[weight = 1000]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329284,"byte_end":329312,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329313,"byte_end":329368,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329369,"byte_end":329378,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329379,"byte_end":329384,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329385,"byte_end":329403,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329404,"byte_end":329411,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329412,"byte_end":329415,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 2.1 Define weight and class, **in which case `PaysFee` would be `Yes`**.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329416,"byte_end":329492,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329493,"byte_end":329496,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329497,"byte_end":329504,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Trait;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329505,"byte_end":329535,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/ # use frame_support::weights::DispatchClass;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329536,"byte_end":329584,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329585,"byte_end":329618,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329619,"byte_end":329694,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/         #[weight = (1000, DispatchClass::Operational)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329695,"byte_end":329753,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329754,"byte_end":329809,"line_start":60,"line_end":60,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329810,"byte_end":329819,"line_start":61,"line_end":61,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329820,"byte_end":329825,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329826,"byte_end":329844,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329845,"byte_end":329852,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329853,"byte_end":329856,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ 2.2 Define weight and `PaysFee`, **in which case `ClassifyDispatch` would be `Normal`**.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329857,"byte_end":329949,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329950,"byte_end":329953,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329954,"byte_end":329961,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Trait;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329962,"byte_end":329992,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/ # use frame_support::weights::Pays;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":329993,"byte_end":330032,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330033,"byte_end":330066,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330067,"byte_end":330142,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/         #[weight = (1000, Pays::No)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330143,"byte_end":330183,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330184,"byte_end":330239,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330240,"byte_end":330249,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330250,"byte_end":330255,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330256,"byte_end":330274,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330275,"byte_end":330282,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330283,"byte_end":330286,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ 3. Define all 3 parameters.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330287,"byte_end":330318,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330319,"byte_end":330322,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330323,"byte_end":330330,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Trait;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330331,"byte_end":330361,"line_start":83,"line_end":83,"column_start":1,"column_end":31}},{"value":"/ # use frame_support::weights::{DispatchClass, Pays};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330362,"byte_end":330418,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330419,"byte_end":330452,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330453,"byte_end":330528,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/         #[weight = (1000, DispatchClass::Operational, Pays::No)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330529,"byte_end":330597,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330598,"byte_end":330653,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330654,"byte_end":330663,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330664,"byte_end":330669,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330670,"byte_end":330688,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330689,"byte_end":330696,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330697,"byte_end":330700,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ### 2. Define weights as a function of input arguments using `FunctionOf` tuple struct. This struct works","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330701,"byte_end":330810,"line_start":94,"line_end":94,"column_start":1,"column_end":110}},{"value":"/ in a similar manner as above. 3 items must be provided and each can be either a fixed value or a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330811,"byte_end":330911,"line_start":95,"line_end":95,"column_start":1,"column_end":101}},{"value":"/ function/closure with the same parameters list as the dispatchable function itself, wrapper in a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":330912,"byte_end":331012,"line_start":96,"line_end":96,"column_start":1,"column_end":101}},{"value":"/ tuple.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331013,"byte_end":331023,"line_start":97,"line_end":97,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331024,"byte_end":331027,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ Using this only makes sense if you want to use a function for at least one of the elements. If","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331028,"byte_end":331126,"line_start":99,"line_end":99,"column_start":1,"column_end":99}},{"value":"/ all 3 are static values, providing a raw tuple is easier.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331127,"byte_end":331188,"line_start":100,"line_end":100,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331189,"byte_end":331192,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331193,"byte_end":331200,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Trait;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331201,"byte_end":331231,"line_start":103,"line_end":103,"column_start":1,"column_end":31}},{"value":"/ # use frame_support::weights::{DispatchClass, FunctionOf, Pays};","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331232,"byte_end":331300,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331301,"byte_end":331334,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331335,"byte_end":331410,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/         #[weight = FunctionOf(","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331411,"byte_end":331445,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/ \t\t\t// weight, function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331446,"byte_end":331473,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"/ \t\t\t|args: (&u32, &u64)| *args.0 as u64 + args.1,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331474,"byte_end":331526,"line_start":109,"line_end":109,"column_start":1,"column_end":53}},{"value":"/ \t\t\t// class, fixed.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331527,"byte_end":331550,"line_start":110,"line_end":110,"column_start":1,"column_end":24}},{"value":"/ \t\t\tDispatchClass::Operational,","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331551,"byte_end":331585,"line_start":111,"line_end":111,"column_start":1,"column_end":35}},{"value":"/ \t\t\t// pays fee, function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331586,"byte_end":331615,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ \t\t\t|args: (&u32, &u64)| if *args.0 > 1000 { Pays::Yes } else { Pays::No },","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331616,"byte_end":331694,"line_start":113,"line_end":113,"column_start":1,"column_end":79}},{"value":"/ \t\t)]","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331695,"byte_end":331703,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"/         fn dispatching(origin, a: u32, b: u64) { unimplemented!() }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331704,"byte_end":331775,"line_start":115,"line_end":115,"column_start":1,"column_end":72}},{"value":"/     }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331776,"byte_end":331785,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331786,"byte_end":331791,"line_start":117,"line_end":117,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331792,"byte_end":331810,"line_start":118,"line_end":118,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331811,"byte_end":331818,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ FRAME assumes a weight of `1_000_000_000_000` equals 1 second of compute on a standard machine.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331819,"byte_end":331918,"line_start":120,"line_end":120,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331919,"byte_end":331922,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ Latest machine specification used to benchmark are:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331923,"byte_end":331978,"line_start":122,"line_end":122,"column_start":1,"column_end":56}},{"value":"/ - Digital Ocean: ubuntu-s-2vcpu-4gb-ams3-01","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":331979,"byte_end":332026,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ - 2x Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332027,"byte_end":332077,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/ - 4GB RAM","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332078,"byte_end":332091,"line_start":125,"line_end":125,"column_start":1,"column_end":14}},{"value":"/ - Ubuntu 19.10 (GNU/Linux 5.3.0-18-generic x86_64)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332092,"byte_end":332146,"line_start":126,"line_end":126,"column_start":1,"column_end":55}},{"value":"/ - rustc 1.42.0 (b8cedc004 2020-03-09)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332147,"byte_end":332188,"line_start":127,"line_end":127,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1456},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332792,"byte_end":332798,"line_start":146,"line_end":146,"column_start":10,"column_end":16},"name":"Weight","qualname":"::weights::Weight","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Numeric range of a transaction weight.\n","sig":null,"attributes":[{"value":"/ Numeric range of a transaction weight.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332740,"byte_end":332782,"line_start":145,"line_end":145,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":1457},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333000,"byte_end":333009,"line_start":150,"line_end":150,"column_start":9,"column_end":18},"name":"constants","qualname":"::weights::constants","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":5789},{"krate":0,"index":5791},{"krate":0,"index":5793},{"krate":0,"index":5796},{"krate":0,"index":5798},{"krate":0,"index":5800},{"krate":0,"index":5803},{"krate":0,"index":5805},{"krate":0,"index":5807},{"krate":0,"index":5810},{"krate":0,"index":5812},{"krate":0,"index":5814}],"decl_id":null,"docs":" These constants are specific to FRAME, and the current implementation of its various components.\n For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...\n","sig":null,"attributes":[{"value":"/ These constants are specific to FRAME, and the current implementation of its various components.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332807,"byte_end":332907,"line_start":148,"line_end":148,"column_start":1,"column_end":101}},{"value":"/ For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":332908,"byte_end":332991,"line_start":149,"line_end":149,"column_start":1,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":1462},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333092,"byte_end":333109,"line_start":154,"line_end":154,"column_start":12,"column_end":29},"name":"WEIGHT_PER_SECOND","qualname":"::weights::constants::WEIGHT_PER_SECOND","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1463},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333150,"byte_end":333167,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MILLIS","qualname":"::weights::constants::WEIGHT_PER_MILLIS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1464},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333232,"byte_end":333249,"line_start":156,"line_end":156,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MICROS","qualname":"::weights::constants::WEIGHT_PER_MICROS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1465},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333310,"byte_end":333326,"line_start":157,"line_end":157,"column_start":12,"column_end":28},"name":"WEIGHT_PER_NANOS","qualname":"::weights::constants::WEIGHT_PER_NANOS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5789},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333453,"byte_end":333473,"line_start":161,"line_end":161,"column_start":13,"column_end":33},"name":"BlockExecutionWeight","qualname":"::weights::constants::BlockExecutionWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Importing a block with 0 txs takes ~5 ms\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5796},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333608,"byte_end":333627,"line_start":163,"line_end":163,"column_start":13,"column_end":32},"name":"ExtrinsicBaseWeight","qualname":"::weights::constants::ExtrinsicBaseWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5803},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":333779,"byte_end":333792,"line_start":166,"line_end":166,"column_start":13,"column_end":26},"name":"RocksDbWeight","qualname":"::weights::constants::RocksDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" By default, Substrate uses RocksDB, so this will be the weight used throughout\n the runtime.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5810},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334153,"byte_end":334167,"line_start":172,"line_end":172,"column_start":13,"column_end":27},"name":"ParityDbWeight","qualname":"::weights::constants::ParityDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" ParityDB can be enabled with a feature flag, but is still experimental. These weights\n are available for brave runtime engineers who may want to try this out as default.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1466},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334405,"byte_end":334414,"line_start":180,"line_end":180,"column_start":11,"column_end":20},"name":"WeighData","qualname":"::weights::WeighData","value":"WeighData<T>","parent":null,"children":[{"krate":0,"index":1468}],"decl_id":null,"docs":" Means of weighing some particular kind of data (`T`).\n","sig":null,"attributes":[{"value":"/ Means of weighing some particular kind of data (`T`).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334337,"byte_end":334394,"line_start":179,"line_end":179,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334591,"byte_end":334601,"line_start":183,"line_end":183,"column_start":5,"column_end":15},"name":"weigh_data","qualname":"::weights::WeighData::weigh_data","value":"pub fn weigh_data(&Self, T) -> Weight","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be\n a tuple of all arguments given to the function (except origin).\n","sig":null,"attributes":[{"value":"/ Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334421,"byte_end":334517,"line_start":181,"line_end":181,"column_start":2,"column_end":98}},{"value":"/ a tuple of all arguments given to the function (except origin).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334519,"byte_end":334586,"line_start":182,"line_end":182,"column_start":2,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1469},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334694,"byte_end":334710,"line_start":187,"line_end":187,"column_start":11,"column_end":27},"name":"ClassifyDispatch","qualname":"::weights::ClassifyDispatch","value":"ClassifyDispatch<T>","parent":null,"children":[{"krate":0,"index":1471}],"decl_id":null,"docs":" Means of classifying a dispatchable function.\n","sig":null,"attributes":[{"value":"/ Means of classifying a dispatchable function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334634,"byte_end":334683,"line_start":186,"line_end":186,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334927,"byte_end":334944,"line_start":191,"line_end":191,"column_start":5,"column_end":22},"name":"classify_dispatch","qualname":"::weights::ClassifyDispatch::classify_dispatch","value":"pub fn classify_dispatch(&Self, T) -> DispatchClass","parent":{"krate":0,"index":1469},"children":[],"decl_id":null,"docs":" Classify the dispatch function based on input data `target` of type `T`. When implementing\n this for a dispatchable, `T` will be a tuple of all arguments given to the function (except\n origin).\n","sig":null,"attributes":[{"value":"/ Classify the dispatch function based on input data `target` of type `T`. When implementing","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334717,"byte_end":334811,"line_start":188,"line_end":188,"column_start":2,"column_end":96}},{"value":"/ this for a dispatchable, `T` will be a tuple of all arguments given to the function (except","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334813,"byte_end":334908,"line_start":189,"line_end":189,"column_start":2,"column_end":97}},{"value":"/ origin).","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334910,"byte_end":334922,"line_start":190,"line_end":190,"column_start":2,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1472},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335142,"byte_end":335149,"line_start":196,"line_end":196,"column_start":11,"column_end":18},"name":"PaysFee","qualname":"::weights::PaysFee","value":"PaysFee<T>","parent":null,"children":[{"krate":0,"index":1474}],"decl_id":null,"docs":" Indicates if dispatch function should pay fees or not.\n If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.\n","sig":null,"attributes":[{"value":"/ Indicates if dispatch function should pay fees or not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":334984,"byte_end":335042,"line_start":194,"line_end":194,"column_start":1,"column_end":59}},{"value":"/ If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335043,"byte_end":335131,"line_start":195,"line_end":195,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335159,"byte_end":335167,"line_start":197,"line_end":197,"column_start":5,"column_end":13},"name":"pays_fee","qualname":"::weights::PaysFee::pays_fee","value":"pub fn pays_fee(&Self, T) -> Pays","parent":{"krate":0,"index":1472},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5818},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335385,"byte_end":335388,"line_start":204,"line_end":204,"column_start":2,"column_end":5},"name":"Yes","qualname":"::weights::Pays::Yes","value":"Pays::Yes","parent":{"krate":0,"index":5817},"children":[],"decl_id":null,"docs":" Transactor will pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will pay related fees.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335346,"byte_end":335383,"line_start":203,"line_end":203,"column_start":2,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5820},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335434,"byte_end":335436,"line_start":206,"line_end":206,"column_start":2,"column_end":4},"name":"No","qualname":"::weights::Pays::No","value":"Pays::No","parent":{"krate":0,"index":5817},"children":[],"decl_id":null,"docs":" Transactor will NOT pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will NOT pay related fees.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335391,"byte_end":335432,"line_start":205,"line_end":205,"column_start":2,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":5817},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335338,"byte_end":335342,"line_start":202,"line_end":202,"column_start":10,"column_end":14},"name":"Pays","qualname":"::weights::Pays","value":"pub enum Pays {\n\n    /// Transactor will pay related fees.\n    Yes,\n\n    /// Transactor will NOT pay related fees.\n    No,\n}","parent":null,"children":[{"krate":0,"index":5818},{"krate":0,"index":5820}],"decl_id":null,"docs":" Explicit enum to denote if a transaction pays fee or not.\n","sig":null,"attributes":[{"value":"/ Explicit enum to denote if a transaction pays fee or not.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335199,"byte_end":335260,"line_start":200,"line_end":200,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5845},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335791,"byte_end":335797,"line_start":221,"line_end":221,"column_start":2,"column_end":8},"name":"Normal","qualname":"::weights::DispatchClass::Normal","value":"DispatchClass::Normal","parent":{"krate":0,"index":5844},"children":[],"decl_id":null,"docs":" A normal dispatch.\n","sig":null,"attributes":[{"value":"/ A normal dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335767,"byte_end":335789,"line_start":220,"line_end":220,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5847},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335830,"byte_end":335841,"line_start":223,"line_end":223,"column_start":2,"column_end":13},"name":"Operational","qualname":"::weights::DispatchClass::Operational","value":"DispatchClass::Operational","parent":{"krate":0,"index":5844},"children":[],"decl_id":null,"docs":" An operational dispatch.\n","sig":null,"attributes":[{"value":"/ An operational dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335800,"byte_end":335828,"line_start":222,"line_end":222,"column_start":2,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5849},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336742,"byte_end":336751,"line_start":236,"line_end":236,"column_start":2,"column_end":11},"name":"Mandatory","qualname":"::weights::DispatchClass::Mandatory","value":"DispatchClass::Mandatory","parent":{"krate":0,"index":5844},"children":[],"decl_id":null,"docs":" A mandatory dispatch. These kinds of dispatch are always included regardless of their\n weight, therefore it is critical that they are separately validated to ensure that a\n malicious validator cannot craft a valid but impossibly heavy block. Usually this just means\n ensuring that the extrinsic can only be included once and that it is always very light.","sig":null,"attributes":[{"value":"/ A mandatory dispatch. These kinds of dispatch are always included regardless of their","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335844,"byte_end":335933,"line_start":224,"line_end":224,"column_start":2,"column_end":91}},{"value":"/ weight, therefore it is critical that they are separately validated to ensure that a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335935,"byte_end":336023,"line_start":225,"line_end":225,"column_start":2,"column_end":90}},{"value":"/ malicious validator cannot craft a valid but impossibly heavy block. Usually this just means","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336025,"byte_end":336121,"line_start":226,"line_end":226,"column_start":2,"column_end":98}},{"value":"/ ensuring that the extrinsic can only be included once and that it is always very light.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336123,"byte_end":336214,"line_start":227,"line_end":227,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336216,"byte_end":336219,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ Do *NOT* use it for extrinsics that can be heavy.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336221,"byte_end":336274,"line_start":229,"line_end":229,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336276,"byte_end":336279,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ The only real use case for this is inherent extrinsics that are required to execute in a","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336281,"byte_end":336373,"line_start":231,"line_end":231,"column_start":2,"column_end":94}},{"value":"/ block for the block to be valid, and it solves the issue in the case that the block","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336375,"byte_end":336462,"line_start":232,"line_end":232,"column_start":2,"column_end":89}},{"value":"/ initialization is sufficiently heavy to mean that those inherents do not fit into the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336464,"byte_end":336553,"line_start":233,"line_end":233,"column_start":2,"column_end":91}},{"value":"/ block. Essentially, we assume that in these exceptional circumstances, it is better to","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336555,"byte_end":336645,"line_start":234,"line_end":234,"column_start":2,"column_end":92}},{"value":"/ allow an overweight block to be created than to not allow any block at all to be created.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336647,"byte_end":336740,"line_start":235,"line_end":235,"column_start":2,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":5844},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335750,"byte_end":335763,"line_start":219,"line_end":219,"column_start":10,"column_end":23},"name":"DispatchClass","qualname":"::weights::DispatchClass","value":"pub enum DispatchClass {\n\n    /// A normal dispatch.\n    Normal,\n\n    /// An operational dispatch.\n    Operational,\n\n    /// A mandatory dispatch. These kinds of dispatch are always included regardless of their\n    /// weight, therefore it is critical that they are separately validated to ensure that a\n    /// malicious validator cannot craft a valid but impossibly heavy block. Usually this just means\n    /// ensuring that the extrinsic can only be included once and that it is always very light.\n    ///\n    /// Do *NOT* use it for extrinsics that can be heavy.\n    ///\n    /// The only real use case for this is inherent extrinsics that are required to execute in a\n    /// block for the block to be valid, and it solves the issue in the case that the block\n    /// initialization is sufficiently heavy to mean that those inherents do not fit into the\n    /// block. Essentially, we assume that in these exceptional circumstances, it is better to\n    /// allow an overweight block to be created than to not allow any block at all to be created.\n    Mandatory,\n}","parent":null,"children":[{"krate":0,"index":5845},{"krate":0,"index":5847},{"krate":0,"index":5849}],"decl_id":null,"docs":" A generalized group of dispatch types.\n","sig":null,"attributes":[{"value":"/ A generalized group of dispatch types.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335507,"byte_end":335549,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335639,"byte_end":335670,"line_start":217,"line_end":217,"column_start":29,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":1479},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336898,"byte_end":336906,"line_start":246,"line_end":246,"column_start":9,"column_end":17},"name":"priority","qualname":"::weights::priority","value":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","parent":null,"children":[{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1488}],"decl_id":null,"docs":" Primitives related to priority management of Frame.\n","sig":null,"attributes":[{"value":"/ Primitives related to priority management of Frame.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336834,"byte_end":336889,"line_start":245,"line_end":245,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":1480},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337002,"byte_end":337007,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"LIMIT","qualname":"::weights::priority::LIMIT","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" The starting point of all Operational transactions. 3/4 of u64::max_value().\n","sig":null,"attributes":[{"value":"/ The starting point of all Operational transactions. 3/4 of u64::max_value().","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336910,"byte_end":336990,"line_start":247,"line_end":247,"column_start":2,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1482},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337267,"byte_end":337273,"line_start":255,"line_end":255,"column_start":3,"column_end":9},"name":"Normal","qualname":"::weights::priority::FrameTransactionPriority::Normal","value":"FrameTransactionPriority::Normal(u64)","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1485},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337282,"byte_end":337293,"line_start":256,"line_end":256,"column_start":3,"column_end":14},"name":"Operational","qualname":"::weights::priority::FrameTransactionPriority::Operational","value":"FrameTransactionPriority::Operational(u64)","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1481},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337238,"byte_end":337262,"line_start":254,"line_end":254,"column_start":11,"column_end":35},"name":"FrameTransactionPriority","qualname":"::weights::priority::FrameTransactionPriority","value":"pub enum FrameTransactionPriority { Normal(u64), Operational(u64), }","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1485}],"decl_id":null,"docs":" Wrapper for priority of different dispatch classes.","sig":null,"attributes":[{"value":"/ Wrapper for priority of different dispatch classes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337049,"byte_end":337104,"line_start":250,"line_end":250,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337106,"byte_end":337109,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ This only makes sure that any value created for the operational dispatch class is","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337111,"byte_end":337196,"line_start":252,"line_end":252,"column_start":2,"column_end":87}},{"value":"/ incremented by [`LIMIT`].","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337198,"byte_end":337227,"line_start":253,"line_end":253,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":5920},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337748,"byte_end":337760,"line_start":271,"line_end":271,"column_start":12,"column_end":24},"name":"DispatchInfo","qualname":"::weights::DispatchInfo","value":"DispatchInfo { weight, class, pays_fee }","parent":null,"children":[{"krate":0,"index":5921},{"krate":0,"index":5922},{"krate":0,"index":5923}],"decl_id":null,"docs":" A bundle of static information collected from the `#[weight = $x]` attributes.\n","sig":null,"attributes":[{"value":"/ A bundle of static information collected from the `#[weight = $x]` attributes.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337577,"byte_end":337659,"line_start":269,"line_end":269,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":5921},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337801,"byte_end":337807,"line_start":273,"line_end":273,"column_start":6,"column_end":12},"name":"weight","qualname":"::weights::DispatchInfo::weight","value":"u64","parent":{"krate":0,"index":5920},"children":[],"decl_id":null,"docs":" Weight of this transaction.\n","sig":null,"attributes":[{"value":"/ Weight of this transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337764,"byte_end":337795,"line_start":272,"line_end":272,"column_start":2,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5922},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337854,"byte_end":337859,"line_start":275,"line_end":275,"column_start":6,"column_end":11},"name":"class","qualname":"::weights::DispatchInfo::class","value":"weights::DispatchClass","parent":{"krate":0,"index":5920},"children":[],"decl_id":null,"docs":" Class of this transaction.\n","sig":null,"attributes":[{"value":"/ Class of this transaction.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337818,"byte_end":337848,"line_start":274,"line_end":274,"column_start":2,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5923},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337918,"byte_end":337926,"line_start":277,"line_end":277,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::DispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":5920},"children":[],"decl_id":null,"docs":" Does this transaction pay fees.\n","sig":null,"attributes":[{"value":"/ Does this transaction pay fees.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337877,"byte_end":337912,"line_start":276,"line_end":276,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":1490},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338086,"byte_end":338101,"line_start":282,"line_end":282,"column_start":11,"column_end":26},"name":"GetDispatchInfo","qualname":"::weights::GetDispatchInfo","value":"GetDispatchInfo","parent":null,"children":[{"krate":0,"index":1491}],"decl_id":null,"docs":" A `Dispatchable` function (aka transaction) that can carry some static information along with\n it, using the `#[weight]` attribute.\n","sig":null,"attributes":[{"value":"/ A `Dispatchable` function (aka transaction) that can carry some static information along with","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":337937,"byte_end":338034,"line_start":280,"line_end":280,"column_start":1,"column_end":98}},{"value":"/ it, using the `#[weight]` attribute.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338035,"byte_end":338075,"line_start":281,"line_end":281,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338246,"byte_end":338263,"line_start":286,"line_end":286,"column_start":5,"column_end":22},"name":"get_dispatch_info","qualname":"::weights::GetDispatchInfo::get_dispatch_info","value":"pub fn get_dispatch_info(&Self) -> DispatchInfo","parent":{"krate":0,"index":1490},"children":[],"decl_id":null,"docs":" Return a `DispatchInfo`, containing relevant information of this dispatch.","sig":null,"attributes":[{"value":"/ Return a `DispatchInfo`, containing relevant information of this dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338105,"byte_end":338183,"line_start":283,"line_end":283,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338185,"byte_end":338188,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This is done independently of its encoded size.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338190,"byte_end":338241,"line_start":285,"line_end":285,"column_start":2,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5949},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338518,"byte_end":338534,"line_start":292,"line_end":292,"column_start":12,"column_end":28},"name":"PostDispatchInfo","qualname":"::weights::PostDispatchInfo","value":"PostDispatchInfo { actual_weight, pays_fee }","parent":null,"children":[{"krate":0,"index":5950},{"krate":0,"index":5951}],"decl_id":null,"docs":" Weight information that is only available post dispatch.\n NOTE: This can only be used to reduce the weight or fee, not increase it.\n","sig":null,"attributes":[{"value":"/ Weight information that is only available post dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338291,"byte_end":338351,"line_start":289,"line_end":289,"column_start":1,"column_end":61}},{"value":"/ NOTE: This can only be used to reduce the weight or fee, not increase it.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338352,"byte_end":338429,"line_start":290,"line_end":290,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":5950},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338637,"byte_end":338650,"line_start":294,"line_end":294,"column_start":6,"column_end":19},"name":"actual_weight","qualname":"::weights::PostDispatchInfo::actual_weight","value":"std::option::Option<u64>","parent":{"krate":0,"index":5949},"children":[],"decl_id":null,"docs":" Actual weight consumed by a call or `None` which stands for the worst case static weight.\n","sig":null,"attributes":[{"value":"/ Actual weight consumed by a call or `None` which stands for the worst case static weight.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338538,"byte_end":338631,"line_start":293,"line_end":293,"column_start":2,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":5951},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338746,"byte_end":338754,"line_start":296,"line_end":296,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::PostDispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":5949},"children":[],"decl_id":null,"docs":" Whether this transaction should pay fees when all is said and done.\n","sig":null,"attributes":[{"value":"/ Whether this transaction should pay fees when all is said and done.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338669,"byte_end":338740,"line_start":295,"line_end":295,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338873,"byte_end":338885,"line_start":301,"line_end":301,"column_start":9,"column_end":21},"name":"calc_unspent","qualname":"<PostDispatchInfo>::calc_unspent","value":"pub fn calc_unspent(&Self, &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much (if any) weight was not used by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much (if any) weight was not used by the `Dispatchable`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338790,"byte_end":338864,"line_start":300,"line_end":300,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":339057,"byte_end":339075,"line_start":306,"line_end":306,"column_start":9,"column_end":27},"name":"calc_actual_weight","qualname":"<PostDispatchInfo>::calc_actual_weight","value":"pub fn calc_actual_weight(&Self, &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much weight was actually spent by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much weight was actually spent by the `Dispatchable`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338977,"byte_end":339048,"line_start":305,"line_end":305,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":339320,"byte_end":339328,"line_start":315,"line_end":315,"column_start":9,"column_end":17},"name":"pays_fee","qualname":"<PostDispatchInfo>::pays_fee","value":"pub fn pays_fee(&Self, &DispatchInfo) -> Pays","parent":null,"children":[],"decl_id":null,"docs":" Determine if user should actually pay fees at the end of the dispatch.\n","sig":null,"attributes":[{"value":"/ Determine if user should actually pay fees at the end of the dispatch.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":339237,"byte_end":339311,"line_start":314,"line_end":314,"column_start":2,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1496},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":339847,"byte_end":339868,"line_start":330,"line_end":330,"column_start":8,"column_end":29},"name":"extract_actual_weight","qualname":"::weights::extract_actual_weight","value":"pub fn extract_actual_weight(&DispatchResultWithPostInfo, &DispatchInfo)\n-> Weight","parent":null,"children":[],"decl_id":null,"docs":" Extract the actual weight from a dispatch result if any or fall back to the default weight.\n","sig":null,"attributes":[{"value":"/ Extract the actual weight from a dispatch result if any or fall back to the default weight.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":339744,"byte_end":339839,"line_start":329,"line_end":329,"column_start":1,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":1507},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341198,"byte_end":341218,"line_start":391,"line_end":391,"column_start":11,"column_end":31},"name":"WithPostDispatchInfo","qualname":"::weights::WithPostDispatchInfo","value":"WithPostDispatchInfo","parent":null,"children":[{"krate":0,"index":1508}],"decl_id":null,"docs":" Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables\n that want to return a custom a posterior weight on error.\n","sig":null,"attributes":[{"value":"/ Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341029,"byte_end":341125,"line_start":389,"line_end":389,"column_start":1,"column_end":97}},{"value":"/ that want to return a custom a posterior weight on error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341126,"byte_end":341187,"line_start":390,"line_end":390,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341505,"byte_end":341516,"line_start":400,"line_end":400,"column_start":5,"column_end":16},"name":"with_weight","qualname":"::weights::WithPostDispatchInfo::with_weight","value":"pub fn with_weight(Self, Weight) -> DispatchErrorWithPostInfo","parent":{"krate":0,"index":1507},"children":[],"decl_id":null,"docs":" Call this on your modules custom errors type in order to return a custom weight on error.","sig":null,"attributes":[{"value":"/ Call this on your modules custom errors type in order to return a custom weight on error.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341222,"byte_end":341315,"line_start":392,"line_end":392,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341317,"byte_end":341320,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ # Example","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341322,"byte_end":341335,"line_start":394,"line_end":394,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341337,"byte_end":341340,"line_start":395,"line_end":395,"column_start":2,"column_end":5}},{"value":"/ ```ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341342,"byte_end":341355,"line_start":396,"line_end":396,"column_start":2,"column_end":15}},{"value":"/ let who = ensure_signed(origin).map_err(|e| e.with_weight(100))?;","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341357,"byte_end":341426,"line_start":397,"line_end":397,"column_start":2,"column_end":71}},{"value":"/ ensure!(who == me, Error::<T>::NotMe.with_weight(200_000));","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341428,"byte_end":341491,"line_start":398,"line_end":398,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341493,"byte_end":341500,"line_start":399,"line_end":399,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":1548},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343947,"byte_end":343957,"line_start":499,"line_end":499,"column_start":12,"column_end":22},"name":"FunctionOf","qualname":"::weights::FunctionOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct to represent a weight which is a function of the input arguments. The given items have\n the following types:","sig":null,"attributes":[{"value":"/ A struct to represent a weight which is a function of the input arguments. The given items have","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343233,"byte_end":343332,"line_start":489,"line_end":489,"column_start":1,"column_end":100}},{"value":"/ the following types:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343333,"byte_end":343357,"line_start":490,"line_end":490,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343358,"byte_end":343361,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ - `WD`: a raw `Weight` value or a closure that returns a `Weight` with the same","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343362,"byte_end":343445,"line_start":492,"line_end":492,"column_start":1,"column_end":84}},{"value":"/   argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343446,"byte_end":343504,"line_start":493,"line_end":493,"column_start":1,"column_end":59}},{"value":"/ - `CD`: a raw `DispatchClass` value or a closure that returns a `DispatchClass`","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343505,"byte_end":343588,"line_start":494,"line_end":494,"column_start":1,"column_end":84}},{"value":"/   with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343589,"byte_end":343661,"line_start":495,"line_end":495,"column_start":1,"column_end":73}},{"value":"/ - `PF`: a `Pays` variant for whether this dispatch pays fee or not or a closure that","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343662,"byte_end":343750,"line_start":496,"line_end":496,"column_start":1,"column_end":89}},{"value":"/   returns a `Pays` variant with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343751,"byte_end":343848,"line_start":497,"line_end":497,"column_start":1,"column_end":98}},{"value":"deprecated =\n  \"Function arguments are available directly inside the annotation now.\"","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343849,"byte_end":343935,"line_start":498,"line_end":498,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":1553},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343970,"byte_end":343976,"line_start":499,"line_end":499,"column_start":35,"column_end":41},"name":"0","qualname":"::weights::FunctionOf::0","value":"WD","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1554},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343978,"byte_end":343984,"line_start":499,"line_end":499,"column_start":43,"column_end":49},"name":"1","qualname":"::weights::FunctionOf::1","value":"CD","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1555},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":343986,"byte_end":343992,"line_start":499,"line_end":499,"column_start":51,"column_end":57},"name":"2","qualname":"::weights::FunctionOf::2","value":"PF","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5977},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346293,"byte_end":346308,"line_start":593,"line_end":593,"column_start":12,"column_end":27},"name":"RuntimeDbWeight","qualname":"::weights::RuntimeDbWeight","value":"RuntimeDbWeight { read, write }","parent":null,"children":[{"krate":0,"index":5978},{"krate":0,"index":5979}],"decl_id":null,"docs":" The weight of database operations that the runtime can invoke.\n","sig":null,"attributes":[{"value":"/ The weight of database operations that the runtime can invoke.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346138,"byte_end":346204,"line_start":591,"line_end":591,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":5978},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346316,"byte_end":346320,"line_start":594,"line_end":594,"column_start":6,"column_end":10},"name":"read","qualname":"::weights::RuntimeDbWeight::read","value":"u64","parent":{"krate":0,"index":5977},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5979},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346335,"byte_end":346340,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"name":"write","qualname":"::weights::RuntimeDbWeight::write","value":"u64","parent":{"krate":0,"index":5977},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346384,"byte_end":346389,"line_start":599,"line_end":599,"column_start":9,"column_end":14},"name":"reads","qualname":"<RuntimeDbWeight>::reads","value":"pub fn reads(Self, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346461,"byte_end":346467,"line_start":603,"line_end":603,"column_start":9,"column_end":15},"name":"writes","qualname":"<RuntimeDbWeight>::writes","value":"pub fn writes(Self, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1607},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346540,"byte_end":346552,"line_start":607,"line_end":607,"column_start":9,"column_end":21},"name":"reads_writes","qualname":"<RuntimeDbWeight>::reads_writes","value":"pub fn reads_writes(Self, Weight, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6005},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347105,"byte_end":347127,"line_start":625,"line_end":625,"column_start":12,"column_end":34},"name":"WeightToFeeCoefficient","qualname":"::weights::WeightToFeeCoefficient","value":"WeightToFeeCoefficient { coeff_integer, coeff_frac, negative, degree }","parent":null,"children":[{"krate":0,"index":6007},{"krate":0,"index":6008},{"krate":0,"index":6009},{"krate":0,"index":6010}],"decl_id":null,"docs":" One coefficient and its position in the `WeightToFeePolynomial`.","sig":null,"attributes":[{"value":"/ One coefficient and its position in the `WeightToFeePolynomial`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346742,"byte_end":346810,"line_start":614,"line_end":614,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346811,"byte_end":346814,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ One term of polynomial is calculated as:","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346815,"byte_end":346859,"line_start":616,"line_end":616,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346860,"byte_end":346863,"line_start":617,"line_end":617,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346864,"byte_end":346877,"line_start":618,"line_end":618,"column_start":1,"column_end":14}},{"value":"/ coeff_integer * x^(degree) + coeff_frac * x^(degree)","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346878,"byte_end":346934,"line_start":619,"line_end":619,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346935,"byte_end":346942,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346943,"byte_end":346946,"line_start":621,"line_end":621,"column_start":1,"column_end":4}},{"value":"/ The `negative` value encodes whether the term is added or substracted from the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346947,"byte_end":347029,"line_start":622,"line_end":622,"column_start":1,"column_end":83}},{"value":"/ overall polynomial result.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347030,"byte_end":347060,"line_start":623,"line_end":623,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6007},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347187,"byte_end":347200,"line_start":627,"line_end":627,"column_start":6,"column_end":19},"name":"coeff_integer","qualname":"::weights::WeightToFeeCoefficient::coeff_integer","value":"Balance","parent":{"krate":0,"index":6005},"children":[],"decl_id":null,"docs":" The integral part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The integral part of the coefficient.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347140,"byte_end":347181,"line_start":626,"line_end":626,"column_start":2,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6008},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347261,"byte_end":347271,"line_start":629,"line_end":629,"column_start":6,"column_end":16},"name":"coeff_frac","qualname":"::weights::WeightToFeeCoefficient::coeff_frac","value":"sp_runtime::Perbill","parent":{"krate":0,"index":6005},"children":[],"decl_id":null,"docs":" The fractional part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The fractional part of the coefficient.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347212,"byte_end":347255,"line_start":628,"line_end":628,"column_start":2,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6009},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347352,"byte_end":347360,"line_start":631,"line_end":631,"column_start":6,"column_end":14},"name":"negative","qualname":"::weights::WeightToFeeCoefficient::negative","value":"bool","parent":{"krate":0,"index":6005},"children":[],"decl_id":null,"docs":" True iff the coefficient should be interpreted as negative.\n","sig":null,"attributes":[{"value":"/ True iff the coefficient should be interpreted as negative.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347283,"byte_end":347346,"line_start":630,"line_end":630,"column_start":2,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6010},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347407,"byte_end":347413,"line_start":633,"line_end":633,"column_start":6,"column_end":12},"name":"degree","qualname":"::weights::WeightToFeeCoefficient::degree","value":"u8","parent":{"krate":0,"index":6005},"children":[],"decl_id":null,"docs":" Degree/exponent of the term.\n","sig":null,"attributes":[{"value":"/ Degree/exponent of the term.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347369,"byte_end":347401,"line_start":632,"line_end":632,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1608},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347489,"byte_end":347512,"line_start":637,"line_end":637,"column_start":10,"column_end":33},"name":"WeightToFeeCoefficients","qualname":"::weights::WeightToFeeCoefficients","value":"SmallVec<[WeightToFeeCoefficient<T>; ]>","parent":null,"children":[],"decl_id":null,"docs":" A list of coefficients that represent one polynomial.\n","sig":null,"attributes":[{"value":"/ A list of coefficients that represent one polynomial.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347422,"byte_end":347479,"line_start":636,"line_end":636,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1611},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347715,"byte_end":347736,"line_start":642,"line_end":642,"column_start":11,"column_end":32},"name":"WeightToFeePolynomial","qualname":"::weights::WeightToFeePolynomial","value":"WeightToFeePolynomial","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614}],"decl_id":null,"docs":" A trait that describes the weight to fee calculation as polynomial.","sig":null,"attributes":[{"value":"/ A trait that describes the weight to fee calculation as polynomial.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347561,"byte_end":347632,"line_start":639,"line_end":639,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347633,"byte_end":347636,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ An implementor should only implement the `polynomial` function.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347637,"byte_end":347704,"line_start":641,"line_end":641,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":1612},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347814,"byte_end":347821,"line_start":644,"line_end":644,"column_start":7,"column_end":14},"name":"Balance","qualname":"::weights::WeightToFeePolynomial::Balance","value":"type Balance: BaseArithmetic + From<u32> + Copy + Unsigned;","parent":{"krate":0,"index":1611},"children":[],"decl_id":null,"docs":" The type that is returned as result from polynomial evaluation.\n","sig":null,"attributes":[{"value":"/ The type that is returned as result from polynomial evaluation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347740,"byte_end":347807,"line_start":643,"line_end":643,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348274,"byte_end":348284,"line_start":652,"line_end":652,"column_start":5,"column_end":15},"name":"polynomial","qualname":"::weights::WeightToFeePolynomial::polynomial","value":"pub fn polynomial() -> WeightToFeeCoefficients<Self::Balance>","parent":{"krate":0,"index":1611},"children":[],"decl_id":null,"docs":" Returns a polynomial that describes the weight to fee conversion.","sig":null,"attributes":[{"value":"/ Returns a polynomial that describes the weight to fee conversion.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347871,"byte_end":347940,"line_start":646,"line_end":646,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347942,"byte_end":347945,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ This is the only function that should be manually implemented. Please note","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":347947,"byte_end":348025,"line_start":648,"line_end":648,"column_start":2,"column_end":80}},{"value":"/ that all calculation is done in the probably unsigned `Balance` type. This means","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348027,"byte_end":348111,"line_start":649,"line_end":649,"column_start":2,"column_end":86}},{"value":"/ that the order of coefficients is important as putting the negative coefficients","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348113,"byte_end":348197,"line_start":650,"line_end":650,"column_start":2,"column_end":86}},{"value":"/ first will most likely saturate the result to zero mid evaluation.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348199,"byte_end":348269,"line_start":651,"line_end":651,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348575,"byte_end":348579,"line_start":658,"line_end":658,"column_start":5,"column_end":9},"name":"calc","qualname":"::weights::WeightToFeePolynomial::calc","value":"pub fn calc(&Weight) -> Self::Balance","parent":{"krate":0,"index":1611},"children":[],"decl_id":null,"docs":" Calculates the fee from the passed `weight` according to the `polynomial`.","sig":null,"attributes":[{"value":"/ Calculates the fee from the passed `weight` according to the `polynomial`.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348332,"byte_end":348410,"line_start":654,"line_end":654,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348412,"byte_end":348415,"line_start":655,"line_end":655,"column_start":2,"column_end":5}},{"value":"/ This should not be overriden in most circumstances. Calculation is done in the","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348417,"byte_end":348499,"line_start":656,"line_end":656,"column_start":2,"column_end":84}},{"value":"/ `Balance` type and never overflows. All evaluation is saturating.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":348501,"byte_end":348570,"line_start":657,"line_end":657,"column_start":2,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1616},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":349328,"byte_end":349339,"line_start":681,"line_end":681,"column_start":12,"column_end":23},"name":"IdentityFee","qualname":"::weights::IdentityFee","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.\n","sig":null,"attributes":[{"value":"/ Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":349225,"byte_end":349316,"line_start":680,"line_end":680,"column_start":1,"column_end":92}}]},{"kind":"Enum","id":{"krate":0,"index":6028},"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":2150,"byte_end":2155,"line_start":85,"line_end":85,"column_start":10,"column_end":15},"name":"Never","qualname":"::Never","value":"pub enum Never { }","parent":null,"children":[],"decl_id":null,"docs":" A type that cannot be instantiated.\n","sig":null,"attributes":[{"value":"/ A type that cannot be instantiated.","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":2084,"byte_end":2123,"line_start":83,"line_end":83,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28600,"byte_end":28613,"line_start":161,"line_end":161,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28986,"byte_end":28999,"line_start":178,"line_end":178,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46531,"byte_end":46532,"line_start":63,"line_end":63,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":174533,"byte_end":174551,"line_start":105,"line_end":105,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":175363,"byte_end":175364,"line_start":139,"line_end":139,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":176946,"byte_end":176947,"line_start":197,"line_end":197,"column_start":86,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":348},{"krate":0,"index":353},{"krate":0,"index":358},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":187858,"byte_end":187859,"line_start":127,"line_end":127,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":433},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":451},{"krate":0,"index":457},{"krate":0,"index":463},{"krate":0,"index":469},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":193501,"byte_end":193502,"line_start":331,"line_end":331,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201607,"byte_end":201608,"line_start":56,"line_end":56,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":546},{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":204894,"byte_end":204909,"line_start":33,"line_end":33,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205747,"byte_end":205762,"line_start":56,"line_end":56,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206676,"byte_end":206694,"line_start":91,"line_end":91,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":207586,"byte_end":207604,"line_start":115,"line_end":115,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143760,"byte_end":143774,"line_start":453,"line_end":453,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148504,"byte_end":148507,"line_start":606,"line_end":606,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148545,"byte_end":148551,"line_start":607,"line_end":607,"column_start":32,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148601,"byte_end":148604,"line_start":610,"line_end":610,"column_start":38,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148651,"byte_end":148654,"line_start":611,"line_end":611,"column_start":41,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148968,"byte_end":148974,"line_start":616,"line_end":616,"column_start":56,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211846,"byte_end":211847,"line_start":35,"line_end":35,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":867},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212907,"byte_end":212915,"line_start":75,"line_end":75,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213025,"byte_end":213033,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213181,"byte_end":213193,"line_start":89,"line_end":89,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213376,"byte_end":213388,"line_start":99,"line_end":99,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213654,"byte_end":213670,"line_start":111,"line_end":111,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213856,"byte_end":213872,"line_start":121,"line_end":121,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214114,"byte_end":214124,"line_start":133,"line_end":133,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214291,"byte_end":214301,"line_start":142,"line_end":142,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214463,"byte_end":214470,"line_start":151,"line_end":151,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214630,"byte_end":214637,"line_start":160,"line_end":160,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271278,"byte_end":271294,"line_start":75,"line_end":75,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271579,"byte_end":271595,"line_start":84,"line_end":84,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271671,"byte_end":271687,"line_start":90,"line_end":90,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271925,"byte_end":271941,"line_start":98,"line_end":98,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":280484,"byte_end":280498,"line_start":360,"line_end":360,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1119},{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283548,"byte_end":283549,"line_start":462,"line_end":462,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295454,"byte_end":295469,"line_start":796,"line_end":796,"column_start":3,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":296922,"byte_end":296934,"line_start":844,"line_end":844,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310871,"byte_end":310886,"line_start":1218,"line_end":1218,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315381,"byte_end":315395,"line_start":1352,"line_end":1352,"column_start":55,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326434,"byte_end":326435,"line_start":1657,"line_end":1657,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335458,"byte_end":335462,"line_start":209,"line_end":209,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336773,"byte_end":336786,"line_start":239,"line_end":239,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338770,"byte_end":338786,"line_start":299,"line_end":299,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340085,"byte_end":340101,"line_start":337,"line_end":337,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340287,"byte_end":340303,"line_start":347,"line_end":347,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340427,"byte_end":340443,"line_start":356,"line_end":356,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340584,"byte_end":340600,"line_start":365,"line_end":365,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340744,"byte_end":340760,"line_start":374,"line_end":374,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341612,"byte_end":341613,"line_start":403,"line_end":403,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341923,"byte_end":341929,"line_start":417,"line_end":417,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":342025,"byte_end":342031,"line_start":423,"line_end":423,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":342141,"byte_end":342147,"line_start":429,"line_end":429,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344086,"byte_end":344096,"line_start":503,"line_end":503,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344265,"byte_end":344275,"line_start":511,"line_end":511,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344494,"byte_end":344504,"line_start":521,"line_end":521,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344710,"byte_end":344720,"line_start":529,"line_end":529,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344942,"byte_end":344952,"line_start":539,"line_end":539,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345111,"byte_end":345121,"line_start":547,"line_end":547,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345333,"byte_end":345351,"line_start":557,"line_end":557,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345623,"byte_end":345639,"line_start":569,"line_end":569,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345923,"byte_end":345929,"line_start":580,"line_end":580,"column_start":76,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346358,"byte_end":346373,"line_start":598,"line_end":598,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":349411,"byte_end":349422,"line_start":683,"line_end":683,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1369,"byte_end":1374,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1422,"byte_end":1430,"line_start":56,"line_end":56,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1440,"byte_end":1447,"line_start":57,"line_end":57,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":121}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128445,"byte_end":128453,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":136}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128463,"byte_end":128469,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128479,"byte_end":128484,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":226}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128509,"byte_end":128518,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":128528,"byte_end":128537,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":557}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1480,"byte_end":1485,"line_start":60,"line_end":60,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":923}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1508,"byte_end":1516,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":934}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1539,"byte_end":1547,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":956}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1570,"byte_end":1578,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":967}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1601,"byte_end":1606,"line_start":68,"line_end":68,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":975}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1616,"byte_end":1622,"line_start":69,"line_end":69,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":984}},{"kind":"Mod","span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/lib.rs","byte_start":1632,"byte_end":1639,"line_start":70,"line_end":70,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1428}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28600,"byte_end":28613,"line_start":161,"line_end":161,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/debug.rs","byte_start":28986,"byte_end":28999,"line_start":178,"line_end":178,"column_start":19,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":44,"index":144}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46461,"byte_end":46466,"line_start":62,"line_end":62,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":21,"index":134},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46469,"byte_end":46479,"line_start":62,"line_end":62,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":21,"index":701},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46482,"byte_end":46487,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1736},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46490,"byte_end":46492,"line_start":62,"line_end":62,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1769},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46500,"byte_end":46505,"line_start":62,"line_end":62,"column_start":61,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":6563},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":46531,"byte_end":46532,"line_start":63,"line_end":63,"column_start":23,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":109},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":174533,"byte_end":174551,"line_start":105,"line_end":105,"column_start":16,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":297},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":175363,"byte_end":175364,"line_start":139,"line_end":139,"column_start":41,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":315},"to":{"krate":0,"index":700}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/map.rs","byte_start":176946,"byte_end":176947,"line_start":197,"line_end":197,"column_start":86,"column_end":87},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":327},"to":{"krate":0,"index":651}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":187858,"byte_end":187859,"line_start":127,"line_end":127,"column_start":61,"column_end":62},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":724}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/double_map.rs","byte_start":193501,"byte_end":193502,"line_start":331,"line_end":331,"column_start":52,"column_end":53},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":484},"to":{"krate":0,"index":709}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/generator/value.rs","byte_start":201607,"byte_end":201608,"line_start":56,"line_end":56,"column_start":69,"column_end":70},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":526},"to":{"krate":0,"index":624}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":204894,"byte_end":204909,"line_start":33,"line_end":33,"column_start":9,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":205747,"byte_end":205762,"line_start":56,"line_end":56,"column_start":38,"column_end":53},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":566},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":206676,"byte_end":206694,"line_start":91,"line_end":91,"column_start":40,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/migration.rs","byte_start":207586,"byte_end":207604,"line_start":115,"line_end":115,"column_start":6,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":582},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":136083,"byte_end":136093,"line_start":240,"line_end":240,"column_start":60,"column_end":70},"kind":"SuperTrait","from":{"krate":0,"index":651},"to":{"krate":0,"index":700}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":137079,"byte_end":137095,"line_start":264,"line_end":264,"column_start":4,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":724},"to":{"krate":0,"index":709}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":143760,"byte_end":143774,"line_start":453,"line_end":453,"column_start":22,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":792},"to":{"krate":2,"index":5283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147422,"byte_end":147428,"line_start":576,"line_end":576,"column_start":49,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":824},"to":{"krate":0,"index":817}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147735,"byte_end":147741,"line_start":583,"line_end":583,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":824},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":147751,"byte_end":147763,"line_start":583,"line_end":583,"column_start":57,"column_end":69},"kind":"SuperTrait","from":{"krate":21,"index":128},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148504,"byte_end":148507,"line_start":606,"line_end":606,"column_start":29,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":824}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148545,"byte_end":148551,"line_start":607,"line_end":607,"column_start":32,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":189,"index":2038},"to":{"krate":0,"index":824}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148601,"byte_end":148604,"line_start":610,"line_end":610,"column_start":38,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":817}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148651,"byte_end":148654,"line_start":611,"line_end":611,"column_start":41,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":4556},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/storage/mod.rs","byte_start":148968,"byte_end":148974,"line_start":616,"line_end":616,"column_start":56,"column_end":62},"kind":{"Impl":{"id":18}},"from":{"krate":189,"index":2038},"to":{"krate":0,"index":817}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211560,"byte_end":211565,"line_start":25,"line_end":25,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":211846,"byte_end":211847,"line_start":35,"line_end":35,"column_start":29,"column_end":30},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":857},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212666,"byte_end":212679,"line_start":66,"line_end":66,"column_start":36,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":869},"to":{"krate":0,"index":872}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":212907,"byte_end":212915,"line_start":75,"line_end":75,"column_start":24,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":874},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213025,"byte_end":213033,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":874},"to":{"krate":0,"index":872}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213181,"byte_end":213193,"line_start":89,"line_end":89,"column_start":24,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":881},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213376,"byte_end":213388,"line_start":99,"line_end":99,"column_start":34,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":881},"to":{"krate":0,"index":872}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213654,"byte_end":213670,"line_start":111,"line_end":111,"column_start":24,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":888},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":213856,"byte_end":213872,"line_start":121,"line_end":121,"column_start":34,"column_end":50},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":888},"to":{"krate":0,"index":872}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214114,"byte_end":214124,"line_start":133,"line_end":133,"column_start":24,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":895},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214291,"byte_end":214301,"line_start":142,"line_end":142,"column_start":24,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":902},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214463,"byte_end":214470,"line_start":151,"line_end":151,"column_start":24,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":909},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/hash.rs","byte_start":214630,"byte_end":214637,"line_start":160,"line_end":160,"column_start":24,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":869}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":270428,"byte_end":270434,"line_start":51,"line_end":51,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1023},"to":{"krate":0,"index":1029}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271278,"byte_end":271294,"line_start":75,"line_end":75,"column_start":28,"column_end":44},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271579,"byte_end":271595,"line_start":84,"line_end":84,"column_start":37,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":2257}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271671,"byte_end":271687,"line_start":90,"line_end":90,"column_start":28,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":271925,"byte_end":271941,"line_start":98,"line_end":98,"column_start":37,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1042},"to":{"krate":2,"index":2257}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272172,"byte_end":272177,"line_start":107,"line_end":107,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":1065}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272180,"byte_end":272184,"line_start":107,"line_end":107,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":1065}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":272187,"byte_end":272191,"line_start":107,"line_end":107,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1065}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":280484,"byte_end":280498,"line_start":360,"line_end":360,"column_start":23,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1098},"to":{"krate":0,"index":1074}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":283548,"byte_end":283549,"line_start":462,"line_end":462,"column_start":40,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1149},"to":{"krate":0,"index":1146}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":289350,"byte_end":289355,"line_start":636,"line_end":636,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":1207}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291003,"byte_end":291008,"line_start":670,"line_end":670,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":1209}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":291011,"byte_end":291018,"line_start":670,"line_end":670,"column_start":39,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":1207},"to":{"krate":0,"index":1209}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":295454,"byte_end":295469,"line_start":796,"line_end":796,"column_start":3,"column_end":18},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":296922,"byte_end":296934,"line_start":844,"line_end":844,"column_start":23,"column_end":35},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1243},"to":{"krate":0,"index":1197}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":304418,"byte_end":304426,"line_start":1044,"line_end":1044,"column_start":42,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":1260},"to":{"krate":0,"index":1283}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":307447,"byte_end":307455,"line_start":1109,"line_end":1109,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1260},"to":{"krate":0,"index":1293}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":310871,"byte_end":310886,"line_start":1218,"line_end":1218,"column_start":6,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":315381,"byte_end":315395,"line_start":1352,"line_end":1352,"column_start":55,"column_end":69},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1337},"to":{"krate":0,"index":1333}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":325310,"byte_end":325315,"line_start":1617,"line_end":1617,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2043},"to":{"krate":0,"index":1404}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326156,"byte_end":326160,"line_start":1643,"line_end":1643,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1953},"to":{"krate":0,"index":1414}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326166,"byte_end":326170,"line_start":1643,"line_end":1643,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":1414}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/traits.rs","byte_start":326434,"byte_end":326435,"line_start":1657,"line_end":1657,"column_start":23,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1421},"to":{"krate":0,"index":1414}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":335458,"byte_end":335462,"line_start":209,"line_end":209,"column_start":18,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":5817},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":336773,"byte_end":336786,"line_start":239,"line_end":239,"column_start":18,"column_end":31},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5844},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":338770,"byte_end":338786,"line_start":299,"line_end":299,"column_start":6,"column_end":22},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":5949},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340085,"byte_end":340101,"line_start":337,"line_end":337,"column_start":39,"column_end":55},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":5949},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340287,"byte_end":340303,"line_start":347,"line_end":347,"column_start":21,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":5949},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340427,"byte_end":340443,"line_start":356,"line_end":356,"column_start":31,"column_end":47},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5949},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340584,"byte_end":340600,"line_start":365,"line_end":365,"column_start":19,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5949},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":340744,"byte_end":340760,"line_start":374,"line_end":374,"column_start":40,"column_end":56},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5949},"to":{"krate":189,"index":1192}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341612,"byte_end":341613,"line_start":403,"line_end":403,"column_start":34,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1510},"to":{"krate":0,"index":1507}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":341923,"byte_end":341929,"line_start":417,"line_end":417,"column_start":26,"column_end":32},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1456},"to":{"krate":0,"index":1466}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":342025,"byte_end":342031,"line_start":423,"line_end":423,"column_start":33,"column_end":39},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1456},"to":{"krate":0,"index":1469}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":342141,"byte_end":342147,"line_start":429,"line_end":429,"column_start":24,"column_end":30},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1456},"to":{"krate":0,"index":1472}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344086,"byte_end":344096,"line_start":503,"line_end":503,"column_start":40,"column_end":50},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1548},"to":{"krate":0,"index":1466}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344265,"byte_end":344275,"line_start":511,"line_end":511,"column_start":44,"column_end":54},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1548},"to":{"krate":0,"index":1466}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344494,"byte_end":344504,"line_start":521,"line_end":521,"column_start":47,"column_end":57},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1548},"to":{"krate":0,"index":1469}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344710,"byte_end":344720,"line_start":529,"line_end":529,"column_start":51,"column_end":61},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1548},"to":{"krate":0,"index":1469}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":344942,"byte_end":344952,"line_start":539,"line_end":539,"column_start":38,"column_end":48},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1548},"to":{"krate":0,"index":1472}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345111,"byte_end":345121,"line_start":547,"line_end":547,"column_start":42,"column_end":52},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1548},"to":{"krate":0,"index":1472}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345333,"byte_end":345351,"line_start":557,"line_end":557,"column_start":6,"column_end":24},"kind":{"Impl":{"id":93}},"from":{"krate":189,"index":1539},"to":{"krate":0,"index":1490}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345623,"byte_end":345639,"line_start":569,"line_end":569,"column_start":6,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":189,"index":1650},"to":{"krate":0,"index":1490}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":345923,"byte_end":345929,"line_start":580,"line_end":580,"column_start":76,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":189,"index":2710},"to":{"krate":0,"index":1490}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":346358,"byte_end":346373,"line_start":598,"line_end":598,"column_start":6,"column_end":21},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":5977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/weights.rs","byte_start":349411,"byte_end":349422,"line_start":683,"line_end":683,"column_start":35,"column_end":46},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1616},"to":{"krate":0,"index":1611}}]}